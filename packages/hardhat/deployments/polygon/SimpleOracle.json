{
  "address": "0xBf5ec3570909D09D817F2AA4FD3Ad607090AaD46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum SimpleOracle.Status",
          "name": "initialStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum SimpleOracle.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StatusChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum SimpleOracle.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "changeStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStatus",
      "outputs": [
        {
          "internalType": "enum SimpleOracle.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum SimpleOracle.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71e562cf3ed93d615dfe286bbd92edbfeac0a74f7b1b986acf0e311e29c748b9",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xBf5ec3570909D09D817F2AA4FD3Ad607090AaD46",
    "transactionIndex": 91,
    "gasUsed": "282254",
    "logsBloom": "0x
    "blockHash": "0x49dde18c7759722da9b99a70b0d320ddefda4ba9d4a18f986937b55b94c4172e",
    "transactionHash": "0x71e562cf3ed93d615dfe286bbd92edbfeac0a74f7b1b986acf0e311e29c748b9",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 44519656,
        "transactionHash": "0x71e562cf3ed93d615dfe286bbd92edbfeac0a74f7b1b986acf0e311e29c748b9",
        "address": "0xBf5ec3570909D09D817F2AA4FD3Ad607090AaD46",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 401,
        "blockHash": "0x49dde18c7759722da9b99a70b0d320ddefda4ba9d4a18f986937b55b94c4172e"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 44519656,
        "transactionHash": "0x71e562cf3ed93d615dfe286bbd92edbfeac0a74f7b1b986acf0e311e29c748b9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004c376163acba180000000000000000000000000000000000000000000000008cd68cf4d5f3c98e00000000000000000000000000000000000000000000052338eb111ed3f1583b0000000000000000000000000000000000000000000000008c8a559372470f7600000000000000000000000000000000000000000000052339374880379e1253",
        "logIndex": 402,
        "blockHash": "0x49dde18c7759722da9b99a70b0d320ddefda4ba9d4a18f986937b55b94c4172e"
      }
    ],
    "blockNumber": 44519656,
    "cumulativeGasUsed": "16954124",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0
  ],
  "numDeployments": 2,
  "solcInputHash": "03384d77698b2b928e4e33f92243ffc3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"initialStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"changeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleOracle.sol\":\"SimpleOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SimpleOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract SimpleOracle is Ownable {\\r\\n  // create enum struct\\r\\n  enum Status {\\r\\n    Buy,\\r\\n    Sell\\r\\n  }\\r\\n\\r\\n  // current status variable\\r\\n  Status public currentStatus;\\r\\n  uint256 public lastUpdated;\\r\\n\\r\\n  // create event\\r\\n  event StatusChange(Status indexed status, uint256 timestamp);\\r\\n\\r\\n  // constructor to set initial status\\r\\n  constructor(Status initialStatus) {\\r\\n    currentStatus = initialStatus;\\r\\n  }\\r\\n\\r\\n  // create function to change status\\r\\n  function changeStatus(Status status) external onlyOwner {\\r\\n    currentStatus = status;\\r\\n    lastUpdated = block.timestamp;\\r\\n    emit StatusChange(status, lastUpdated);\\r\\n  }\\r\\n\\r\\n  // create function to get status\\r\\n  function getStatus() external view returns (Status) {\\r\\n    return currentStatus;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5267e3b6c81dc72664ec3440d7194bfcce497ce5979781711d6bb9c5ef9fece\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104a93803806104a983398101604081905261002f916100b8565b61003833610068565b6000805482919060ff60a01b1916600160a01b83600181111561005d5761005d6100e0565b0217905550506100f6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ca57600080fd5b8151600281106100d957600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b6103a4806101056000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806395bc95381161005b57806395bc9538146100cb578063d0b06f5d146100de578063ef8a9235146100f5578063f2fde38b1461010957600080fd5b80634e69d56014610082578063715018a6146100a65780638da5cb5b146100b0575b600080fd5b600054600160a01b900460ff165b60405161009d91906102f5565b60405180910390f35b6100ae61011c565b005b6000546040516001600160a01b03909116815260200161009d565b6100ae6100d936600461031d565b610130565b6100e760015481565b60405190815260200161009d565b60005461009090600160a01b900460ff1681565b6100ae610117366004610345565b6101b7565b610124610235565b61012e600061028f565b565b610138610235565b6000805482919060ff60a01b1916600160a01b83600181111561015d5761015d6102df565b02179055504260019081558190811115610179576101796102df565b7f532fa750fce4e40042c5a70a70aa53f7dcdb7d64a1bcfab7d47440e10a6bcc056001546040516101ac91815260200190565b60405180910390a250565b6101bf610235565b6001600160a01b0381166102295760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102328161028f565b50565b6000546001600160a01b0316331461012e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610220565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061031757634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561032f57600080fd5b81356002811061033e57600080fd5b9392505050565b60006020828403121561035757600080fd5b81356001600160a01b038116811461033e57600080fdfea2646970667358221220214d900eed936f1c55ad7d0f50e5484b1d338f7dc2abd5ea9d33ee4ae8a502cf64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806395bc95381161005b57806395bc9538146100cb578063d0b06f5d146100de578063ef8a9235146100f5578063f2fde38b1461010957600080fd5b80634e69d56014610082578063715018a6146100a65780638da5cb5b146100b0575b600080fd5b600054600160a01b900460ff165b60405161009d91906102f5565b60405180910390f35b6100ae61011c565b005b6000546040516001600160a01b03909116815260200161009d565b6100ae6100d936600461031d565b610130565b6100e760015481565b60405190815260200161009d565b60005461009090600160a01b900460ff1681565b6100ae610117366004610345565b6101b7565b610124610235565b61012e600061028f565b565b610138610235565b6000805482919060ff60a01b1916600160a01b83600181111561015d5761015d6102df565b02179055504260019081558190811115610179576101796102df565b7f532fa750fce4e40042c5a70a70aa53f7dcdb7d64a1bcfab7d47440e10a6bcc056001546040516101ac91815260200190565b60405180910390a250565b6101bf610235565b6001600160a01b0381166102295760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102328161028f565b50565b6000546001600160a01b0316331461012e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610220565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061031757634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561032f57600080fd5b81356002811061033e57600080fd5b9392505050565b60006020828403121561035757600080fd5b81356001600160a01b038116811461033e57600080fdfea2646970667358221220214d900eed936f1c55ad7d0f50e5484b1d338f7dc2abd5ea9d33ee4ae8a502cf64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SimpleOracle.sol:SimpleOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 145,
        "contract": "contracts/SimpleOracle.sol:SimpleOracle",
        "label": "currentStatus",
        "offset": 20,
        "slot": "0",
        "type": "t_enum(Status)142"
      },
      {
        "astId": 147,
        "contract": "contracts/SimpleOracle.sol:SimpleOracle",
        "label": "lastUpdated",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(Status)142": {
        "encoding": "inplace",
        "label": "enum SimpleOracle.Status",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}