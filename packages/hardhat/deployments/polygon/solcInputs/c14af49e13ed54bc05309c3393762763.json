{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/lib/Buffer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.19;\r\n\r\nimport {BufferBase} from \"./BufferBase.sol\";\r\n\r\nlibrary Buffer {\r\n  using BufferBase for BufferBase.buffer;\r\n\r\n  uint8 private constant MAJOR_TYPE_INT = 0;\r\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n  uint8 private constant MAJOR_TYPE_STRING = 3;\r\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n  uint8 private constant MAJOR_TYPE_MAP = 5;\r\n  uint8 private constant MAJOR_TYPE_TAG = 6;\r\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\r\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\r\n\r\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\r\n    if (value <= 23) {\r\n      buf.appendUint8(uint8((major << 5) | value));\r\n    } else if (value <= 0xFF) {\r\n      buf.appendUint8(uint8((major << 5) | 24));\r\n      buf.appendInt(value, 1);\r\n    } else if (value <= 0xFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 25));\r\n      buf.appendInt(value, 2);\r\n    } else if (value <= 0xFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 26));\r\n      buf.appendInt(value, 4);\r\n    } else {\r\n      buf.appendUint8(uint8((major << 5) | 27));\r\n      buf.appendInt(value, 8);\r\n    }\r\n  }\r\n\r\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\r\n    buf.appendUint8(uint8((major << 5) | 31));\r\n  }\r\n\r\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\r\n    if (value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, value);\r\n    } else {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\r\n    }\r\n  }\r\n\r\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\r\n    if (value < -0x10000000000000000) {\r\n      encodeSignedBigNum(buf, value);\r\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, uint(value));\r\n    } else if (value >= 0) {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\r\n    } else {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\r\n    }\r\n  }\r\n\r\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\r\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\r\n    buf.append(value);\r\n  }\r\n\r\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(value));\r\n  }\r\n\r\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\r\n  }\r\n\r\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\r\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\r\n    buf.append(bytes(value));\r\n  }\r\n\r\n  function startArray(BufferBase.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n  }\r\n\r\n  function startMap(BufferBase.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n  }\r\n\r\n  function endSequence(BufferBase.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n  }\r\n}"
    },
    "contracts/lib/BufferBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev A library for working with mutable byte buffers in Solidity.\r\n *\r\n * Byte buffers are mutable and expandable, and provide a variety of primitives\r\n * for writing to them. At any time you can fetch a bytes object containing the\r\n * current contents of the buffer. The bytes object should not be stored between\r\n * operations, as it may change due to resizing of the buffer.\r\n */\r\nlibrary BufferBase {\r\n    /**\r\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n     *      a capacity. The capacity may be longer than the current value, in\r\n     *      which case it can be extended without the need to allocate more memory.\r\n     */\r\n    struct buffer {\r\n        bytes buf;\r\n        uint256 capacity;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes a buffer with an initial capacity.\r\n     * @param buf The buffer to initialize.\r\n     * @param capacity The number of bytes of space to allocate the buffer.\r\n     * @return The buffer, for chaining.\r\n     */\r\n    function init(\r\n        buffer memory buf,\r\n        uint256 capacity\r\n    ) internal pure returns (buffer memory) {\r\n        if (capacity % 32 != 0) {\r\n            capacity += 32 - (capacity % 32);\r\n        }\r\n        // Allocate space for the buffer data\r\n        buf.capacity = capacity;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(buf, ptr)\r\n            mstore(ptr, 0)\r\n            mstore(0x40, add(32, add(ptr, capacity)))\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes a new buffer from an existing bytes object.\r\n     *      Changes to the buffer may mutate the original value.\r\n     * @param b The bytes object to initialize the buffer with.\r\n     * @return A new buffer.\r\n     */\r\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\r\n        buffer memory buf;\r\n        buf.buf = b;\r\n        buf.capacity = b.length;\r\n        return buf;\r\n    }\r\n\r\n    function resize(buffer memory buf, uint256 capacity) private pure {\r\n        bytes memory oldbuf = buf.buf;\r\n        init(buf, capacity);\r\n        append(buf, oldbuf);\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        if (a > b) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets buffer length to 0.\r\n     * @param buf The buffer to truncate.\r\n     * @return The original buffer, for chaining..\r\n     */\r\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\r\n        assembly {\r\n            let bufptr := mload(buf)\r\n            mstore(bufptr, 0)\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The start offset to write to.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to copy.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function write(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        bytes memory data,\r\n        uint256 len\r\n    ) internal pure returns (buffer memory) {\r\n        require(len <= data.length);\r\n\r\n        if (off + len > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len + off) * 2);\r\n        }\r\n\r\n        uint256 dest;\r\n        uint256 src;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Start address = buffer address + offset + sizeof(buffer length)\r\n            dest := add(add(bufptr, 32), off)\r\n            // Update buffer length if we're extending it\r\n            if gt(add(len, off), buflen) {\r\n                mstore(bufptr, add(len, off))\r\n            }\r\n            src := add(data, 32)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        unchecked {\r\n            uint256 mask = (256 ** (32 - len)) - 1;\r\n            assembly {\r\n                let srcpart := and(mload(src), not(mask))\r\n                let destpart := and(mload(dest), mask)\r\n                mstore(dest, or(destpart, srcpart))\r\n            }\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to copy.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function append(\r\n        buffer memory buf,\r\n        bytes memory data,\r\n        uint256 len\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, len);\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function append(\r\n        buffer memory buf,\r\n        bytes memory data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, data.length);\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\r\n     *      capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write the byte at.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeUint8(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        uint8 data\r\n    ) internal pure returns (buffer memory) {\r\n        if (off >= buf.capacity) {\r\n            resize(buf, buf.capacity * 2);\r\n        }\r\n\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Address = buffer address + sizeof(buffer length) + off\r\n            let dest := add(add(bufptr, off), 32)\r\n            mstore8(dest, data)\r\n            // Update buffer length if we extended it\r\n            if eq(off, buflen) {\r\n                mstore(bufptr, add(buflen, 1))\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\r\n     *      capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function appendUint8(\r\n        buffer memory buf,\r\n        uint8 data\r\n    ) internal pure returns (buffer memory) {\r\n        return writeUint8(buf, buf.buf.length, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\r\n     *      exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write at.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to write (left-aligned).\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function write(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        bytes32 data,\r\n        uint256 len\r\n    ) private pure returns (buffer memory) {\r\n        if (len + off > buf.capacity) {\r\n            resize(buf, (len + off) * 2);\r\n        }\r\n\r\n        unchecked {\r\n            uint256 mask = (256 ** len) - 1;\r\n            // Right-align data\r\n            data = data >> (8 * (32 - len));\r\n            assembly {\r\n                // Memory address of the buffer data\r\n                let bufptr := mload(buf)\r\n                // Address = buffer address + sizeof(buffer length) + off + len\r\n                let dest := add(add(bufptr, off), len)\r\n                mstore(dest, or(and(mload(dest), not(mask)), data))\r\n                // Update buffer length if we extended it\r\n                if gt(add(off, len), mload(bufptr)) {\r\n                    mstore(bufptr, add(off, len))\r\n                }\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\r\n     *      capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write at.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeBytes20(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        bytes20 data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, off, bytes32(data), 20);\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chhaining.\r\n     */\r\n    function appendBytes20(\r\n        buffer memory buf,\r\n        bytes20 data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, bytes32(data), 20);\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function appendBytes32(\r\n        buffer memory buf,\r\n        bytes32 data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, 32);\r\n    }\r\n\r\n    /**\r\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write at.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to write (right-aligned).\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeInt(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        uint256 data,\r\n        uint256 len\r\n    ) private pure returns (buffer memory) {\r\n        if (len + off > buf.capacity) {\r\n            resize(buf, (len + off) * 2);\r\n        }\r\n\r\n        uint256 mask = (256 ** len) - 1;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Address = buffer address + off + sizeof(buffer length) + len\r\n            let dest := add(add(bufptr, off), len)\r\n            mstore(dest, or(and(mload(dest), not(mask)), data))\r\n            // Update buffer length if we extended it\r\n            if gt(add(off, len), mload(bufptr)) {\r\n                mstore(bufptr, add(off, len))\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n     * exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function appendInt(\r\n        buffer memory buf,\r\n        uint256 data,\r\n        uint256 len\r\n    ) internal pure returns (buffer memory) {\r\n        return writeInt(buf, buf.buf.length, data, len);\r\n    }\r\n}"
    },
    "contracts/lib/RequestLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport {Buffer} from \"./Buffer.sol\";\r\nimport {BufferBase} from \"./BufferBase.sol\";\r\n\r\nlibrary RequestLib {\r\n  using Buffer for BufferBase.buffer;\r\n\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    BufferBase.buffer requestData;\r\n  }\r\n\r\n  function initialize(\r\n    Request memory self,\r\n    address callbackAddr,\r\n    bytes4 callbackFunc\r\n  ) internal pure returns (Request memory) {\r\n    self.callbackAddress = callbackAddr;\r\n    self.callbackFunctionId = callbackFunc;\r\n    return self;\r\n  }\r\n\r\n  function setId(Request memory self, bytes32 id) internal pure {\r\n    self.id = id;\r\n  }\r\n\r\n  function add(Request memory self, string memory key, string memory value) internal pure {\r\n    self.requestData.encodeString(key);\r\n    self.requestData.encodeString(value);\r\n  }\r\n\r\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\r\n    self.requestData.encodeString(\" header(\");\r\n    self.requestData.encodeString(headerKey);\r\n    self.requestData.encodeString(value);\r\n    self.requestData.encodeString(\") \");\r\n  }\r\n}"
    },
    "contracts/pull/HttpRequestOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../lib/RequestLib.sol\";\r\n\r\nerror OnlyReporter();\r\n\r\ncontract HttpRequestOracle is Ownable {\r\n  using RequestLib for RequestLib.Request;\r\n\r\n  mapping(address => bool) reporters;\r\n\r\n  event RequestSent(bytes32 indexed id, bytes data);\r\n  event RequestFulfilled(bytes32 indexed id);\r\n  event RequestCancelled(bytes32 indexed id);\r\n\r\n  function updateReporter(address reporterAddress, bool isReporter) external onlyOwner {\r\n    reporters[reporterAddress] = isReporter;\r\n  }\r\n\r\n  function getReporter(address reporterAddress) external view returns (bool) {\r\n    return reporters[reporterAddress];\r\n  }\r\n\r\n  function _hasReporter(address reporterAddress) private view returns (bool) {\r\n    return reporters[reporterAddress];\r\n  }\r\n\r\n  function sendRequest(RequestLib.Request memory req) external returns (bytes32) {\r\n    bytes memory encodedRequest = abi.encodeWithSelector(\r\n      this.updateReporter.selector,\r\n      req.id,\r\n      req.callbackFunctionId,\r\n      req.requestData.buf\r\n    );\r\n    emit RequestSent(req.id, encodedRequest);\r\n    return req.id;\r\n  }\r\n}"
    },
    "contracts/pull/HttpRequestWithHeader.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport \"./HttpRequestOracle.sol\";\r\nimport \"./RequestConsumer.sol\";\r\n\r\ncontract HttpRequestConsumerWithHeader is RequestConsumer {\r\n  using RequestLib for RequestLib.Request;\r\n\r\n  HttpRequestOracle httpOracle;\r\n  string prediction_signal;\r\n\r\n  event RequestExchangeRate(bytes32 indexed requestId, string prediction_signal);\r\n\r\n  constructor(address _oracle) {\r\n    httpOracle = HttpRequestOracle(_oracle);\r\n  }\r\n\r\n  function requestPredictionSignal() private returns (bytes32) {\r\n    RequestLib.Request memory req = buildRequest(this._requestedDataCompleted.selector);\r\n    req.setId(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\r\n\r\n    // The code above is the same as\r\n    // const request = require('request');\r\n\r\n    // request.get({\r\n    //   url: 'https://api.api-ninjas.com/v1/exchangerate?pair=USD_EUR',\r\n    //   headers: {\r\n    //     'X-Api-Key': 'YOUR_API_KEY'\r\n    //   },\r\n    // }, function(error, response, body) {\r\n    //   if(error) return console.error('Request failed:', error);\r\n    //   else if(response.statusCode != 200) return console.error('Error:', response.statusCode, body.toString('utf8'));\r\n    //   else console.log(body)\r\n    // });\r\n\r\n    req.add(\"get\", \"https://api.scobrudot.dev/data/\");\r\n    req.addHeader(\"Authorization\", \"\");\r\n\r\n    // Set the path to find the desired data in the API response, where the response format is:\r\n    //  {\r\n    //   \"currency_pair\": \"USD_EUR\",\r\n    //   \"exchange_rate\": 0.826641\r\n    // }\r\n    req.add(\"path\", \"prediction_signal\");\r\n    httpOracle.sendRequest(req);\r\n    return req.id;\r\n  }\r\n\r\n  function _requestedDataCompleted(bytes32 _requestId, string memory _prediction_signal) public {\r\n    emit RequestExchangeRate(_requestId, _prediction_signal);\r\n    prediction_signal = _prediction_signal;\r\n  }\r\n}"
    },
    "contracts/pull/RequestConsumer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport \"./HttpRequestOracle.sol\";\r\nimport \"../lib/RequestLib.sol\";\r\n\r\nabstract contract RequestConsumer {\r\n  using RequestLib for RequestLib.Request;\r\n\r\n  function buildRequest(bytes4 callbackFunctionSignature) internal view returns (RequestLib.Request memory) {\r\n    RequestLib.Request memory req;\r\n    return req.initialize(address(this), callbackFunctionSignature);\r\n  }\r\n}"
    },
    "contracts/SimpleOracle.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract SimpleOracle is Ownable {\r\n  // create enum struct\r\n  enum Status {\r\n    Buy,\r\n    Sell\r\n  }\r\n\r\n  // current status variable\r\n  Status private currentStatus;\r\n\r\n  // create event\r\n  event StatusChange(Status indexed status);\r\n\r\n  // constructor to set initial status\r\n  constructor(Status initialStatus) {\r\n    currentStatus = initialStatus;\r\n  }\r\n\r\n  // create function to change status\r\n  function changeStatus(Status status) external onlyOwner {\r\n    currentStatus = status;\r\n    emit StatusChange(status);\r\n  }\r\n\r\n  // create function to get status\r\n  function getStatus() external view returns (Status) {\r\n    return currentStatus;\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}