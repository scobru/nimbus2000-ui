{
  "address": "0xe127C747024ebf28e27AaB3658D5E8057249a059",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reporterAddress",
          "type": "address"
        }
      ],
      "name": "getReporter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunctionId",
              "type": "bytes4"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BufferBase.buffer",
              "name": "requestData",
              "type": "tuple"
            }
          ],
          "internalType": "struct RequestLib.Request",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reporterAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReporter",
          "type": "bool"
        }
      ],
      "name": "updateReporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4dd0da027277ea469eec53bbc5c5f044a8ff82a64ea61227b269ddd238488215",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xe127C747024ebf28e27AaB3658D5E8057249a059",
    "transactionIndex": 45,
    "gasUsed": "417476",
    "logsBloom": "0x
    "blockHash": "0x088c29e3d4500b689054aa8d09ca235e9d4547fe0520567249e54aadd07ef577",
    "transactionHash": "0x4dd0da027277ea469eec53bbc5c5f044a8ff82a64ea61227b269ddd238488215",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 44439748,
        "transactionHash": "0x4dd0da027277ea469eec53bbc5c5f044a8ff82a64ea61227b269ddd238488215",
        "address": "0xe127C747024ebf28e27AaB3658D5E8057249a059",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x088c29e3d4500b689054aa8d09ca235e9d4547fe0520567249e54aadd07ef577"
      },
      {
        "transactionIndex": 45,
        "blockNumber": 44439748,
        "transactionHash": "0x4dd0da027277ea469eec53bbc5c5f044a8ff82a64ea61227b269ddd238488215",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003a869b2e6fb61c000000000000000000000000000000000000000000000000a4ae5c93b46ee89200000000000000000000000000000000000000000000035c6d42ff443de1d4b0000000000000000000000000000000000000000000000000a473d5f885ff327600000000000000000000000000000000000000000000035c6d7d85df6c518acc",
        "logIndex": 155,
        "blockHash": "0x088c29e3d4500b689054aa8d09ca235e9d4547fe0520567249e54aadd07ef577"
      }
    ],
    "blockNumber": 44439748,
    "cumulativeGasUsed": "7322175",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2333ceefdd26077ced287b7a6fa75c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporterAddress\",\"type\":\"address\"}],\"name\":\"getReporter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferBase.buffer\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"internalType\":\"struct RequestLib.Request\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReporter\",\"type\":\"bool\"}],\"name\":\"updateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pull/HttpRequestOracle.sol\":\"HttpRequestOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.19;\\r\\n\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary Buffer {\\r\\n  using BufferBase for BufferBase.buffer;\\r\\n\\r\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\r\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\r\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\r\\n\\r\\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\\r\\n    if (value <= 23) {\\r\\n      buf.appendUint8(uint8((major << 5) | value));\\r\\n    } else if (value <= 0xFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 24));\\r\\n      buf.appendInt(value, 1);\\r\\n    } else if (value <= 0xFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 25));\\r\\n      buf.appendInt(value, 2);\\r\\n    } else if (value <= 0xFFFFFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 26));\\r\\n      buf.appendInt(value, 4);\\r\\n    } else {\\r\\n      buf.appendUint8(uint8((major << 5) | 27));\\r\\n      buf.appendInt(value, 8);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\\r\\n    buf.appendUint8(uint8((major << 5) | 31));\\r\\n  }\\r\\n\\r\\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, value);\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\\r\\n    if (value < -0x10000000000000000) {\\r\\n      encodeSignedBigNum(buf, value);\\r\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, uint(value));\\r\\n    } else if (value >= 0) {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\r\\n    buf.append(value);\\r\\n  }\\r\\n\\r\\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(value));\\r\\n  }\\r\\n\\r\\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\r\\n  }\\r\\n\\r\\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\r\\n    buf.append(bytes(value));\\r\\n  }\\r\\n\\r\\n  function startArray(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\r\\n  }\\r\\n\\r\\n  function startMap(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\r\\n  }\\r\\n\\r\\n  function endSequence(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2aa6ac6639551697f8b11dc7daed84b0d51d9b51405c25b373b024f0e1c4f712\",\"license\":\"MIT\"},\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"},\"contracts/lib/RequestLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary RequestLib {\\r\\n  using Buffer for BufferBase.buffer;\\r\\n\\r\\n  struct Request {\\r\\n    bytes32 id;\\r\\n    address callbackAddress;\\r\\n    bytes4 callbackFunctionId;\\r\\n    BufferBase.buffer requestData;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    Request memory self,\\r\\n    address callbackAddr,\\r\\n    bytes4 callbackFunc\\r\\n  ) internal pure returns (Request memory) {\\r\\n    self.callbackAddress = callbackAddr;\\r\\n    self.callbackFunctionId = callbackFunc;\\r\\n    return self;\\r\\n  }\\r\\n\\r\\n  function setId(Request memory self, bytes32 id) internal pure {\\r\\n    self.id = id;\\r\\n  }\\r\\n\\r\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\r\\n    self.requestData.encodeString(key);\\r\\n    self.requestData.encodeString(value);\\r\\n  }\\r\\n\\r\\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\\r\\n    self.requestData.encodeString(\\\" header(\\\");\\r\\n    self.requestData.encodeString(headerKey);\\r\\n    self.requestData.encodeString(value);\\r\\n    self.requestData.encodeString(\\\") \\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf8f70cb860bdc2202257a50ef25d755d31ccebcf9ffb900f8df3e9045831fd53\",\"license\":\"UNLICENSED\"},\"contracts/pull/HttpRequestOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../lib/RequestLib.sol\\\";\\r\\n\\r\\nerror OnlyReporter();\\r\\n\\r\\ncontract HttpRequestOracle is Ownable {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  mapping(address => bool) reporters;\\r\\n\\r\\n  event RequestSent(bytes32 indexed id, bytes data);\\r\\n  event RequestFulfilled(bytes32 indexed id);\\r\\n  event RequestCancelled(bytes32 indexed id);\\r\\n\\r\\n  function updateReporter(address reporterAddress, bool isReporter) external onlyOwner {\\r\\n    reporters[reporterAddress] = isReporter;\\r\\n  }\\r\\n\\r\\n  function getReporter(address reporterAddress) external view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function _hasReporter(address reporterAddress) private view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function sendRequest(RequestLib.Request memory req) external returns (bytes32) {\\r\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\r\\n      this.updateReporter.selector,\\r\\n      req.id,\\r\\n      req.callbackFunctionId,\\r\\n      req.requestData.buf\\r\\n    );\\r\\n    emit RequestSent(req.id, encodedRequest);\\r\\n    return req.id;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc69e4f20d24c112f1a3effb2b7c0b0af033f172d94ced2149c73195e9e2f7d04\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106228061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631ec6e24f14610067578063215d35cc1461007c578063715018a6146100a2578063732995af146100aa5780638da5cb5b146100e6578063f2fde38b14610101575b600080fd5b61007a610075366004610340565b610114565b005b61008f61008a36600461040f565b610147565b6040519081526020015b60405180910390f35b61007a6101e8565b6100d66100b8366004610540565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610099565b6000546040516001600160a01b039091168152602001610099565b61007a61010f366004610540565b6101fc565b61011c61027a565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b805160408083015160608401515191516000938493631ec6e24f60e01b93610174939091906024016105a8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252845191519092507fafb0931d973a0c62c636ef23ddd0b58b890a9bf7c77bca04c2ffbb30f61a8e86906101da9084906105d9565b60405180910390a250505190565b6101f061027a565b6101fa60006102d4565b565b61020461027a565b6001600160a01b03811661026e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610277816102d4565b50565b6000546001600160a01b031633146101fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610265565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461033b57600080fd5b919050565b6000806040838503121561035357600080fd5b61035c83610324565b91506020830135801515811461037157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156103b5576103b561037c565b60405290565b6040805190810167ffffffffffffffff811182821017156103b5576103b561037c565b604051601f8201601f1916810167ffffffffffffffff811182821017156104075761040761037c565b604052919050565b6000602080838503121561042257600080fd5b823567ffffffffffffffff8082111561043a57600080fd5b908401906080828703121561044e57600080fd5b610456610392565b82358152610465848401610324565b8185015260408301356001600160e01b03198116811461048457600080fd5b604082015260608301358281111561049b57600080fd5b9290920191604083880312156104b057600080fd5b6104b86103bb565b8335838111156104c757600080fd5b8401601f810189136104d857600080fd5b8035848111156104ea576104ea61037c565b6104fc601f8201601f191688016103de565b9450808552898782840101111561051257600080fd5b8087830188870137600090850187015250918252918301359281019290925260608101919091529392505050565b60006020828403121561055257600080fd5b61055b82610324565b9392505050565b6000815180845260005b818110156105885760208185018101518683018201520161056c565b506000602082860101526020601f19601f83011685010191505092915050565b83815263ffffffff60e01b831660208201526060604082015260006105d06060830184610562565b95945050505050565b60208152600061055b602083018461056256fea2646970667358221220bec162703ff5bd6cc76af0119918d370189e8b4f5b78cb5ef1adf8f91ef55e1664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631ec6e24f14610067578063215d35cc1461007c578063715018a6146100a2578063732995af146100aa5780638da5cb5b146100e6578063f2fde38b14610101575b600080fd5b61007a610075366004610340565b610114565b005b61008f61008a36600461040f565b610147565b6040519081526020015b60405180910390f35b61007a6101e8565b6100d66100b8366004610540565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610099565b6000546040516001600160a01b039091168152602001610099565b61007a61010f366004610540565b6101fc565b61011c61027a565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b805160408083015160608401515191516000938493631ec6e24f60e01b93610174939091906024016105a8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252845191519092507fafb0931d973a0c62c636ef23ddd0b58b890a9bf7c77bca04c2ffbb30f61a8e86906101da9084906105d9565b60405180910390a250505190565b6101f061027a565b6101fa60006102d4565b565b61020461027a565b6001600160a01b03811661026e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610277816102d4565b50565b6000546001600160a01b031633146101fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610265565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461033b57600080fd5b919050565b6000806040838503121561035357600080fd5b61035c83610324565b91506020830135801515811461037157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156103b5576103b561037c565b60405290565b6040805190810167ffffffffffffffff811182821017156103b5576103b561037c565b604051601f8201601f1916810167ffffffffffffffff811182821017156104075761040761037c565b604052919050565b6000602080838503121561042257600080fd5b823567ffffffffffffffff8082111561043a57600080fd5b908401906080828703121561044e57600080fd5b610456610392565b82358152610465848401610324565b8185015260408301356001600160e01b03198116811461048457600080fd5b604082015260608301358281111561049b57600080fd5b9290920191604083880312156104b057600080fd5b6104b86103bb565b8335838111156104c757600080fd5b8401601f810189136104d857600080fd5b8035848111156104ea576104ea61037c565b6104fc601f8201601f191688016103de565b9450808552898782840101111561051257600080fd5b8087830188870137600090850187015250918252918301359281019290925260608101919091529392505050565b60006020828403121561055257600080fd5b61055b82610324565b9392505050565b6000815180845260005b818110156105885760208185018101518683018201520161056c565b506000602082860101526020601f19601f83011685010191505092915050565b83815263ffffffff60e01b831660208201526060604082015260006105d06060830184610562565b95945050505050565b60208152600061055b602083018461056256fea2646970667358221220bec162703ff5bd6cc76af0119918d370189e8b4f5b78cb5ef1adf8f91ef55e1664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/pull/HttpRequestOracle.sol:HttpRequestOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1284,
        "contract": "contracts/pull/HttpRequestOracle.sol:HttpRequestOracle",
        "label": "reporters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}