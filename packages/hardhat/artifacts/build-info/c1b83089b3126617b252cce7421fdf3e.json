{"id":"c1b83089b3126617b252cce7421fdf3e","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/lib/Buffer.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.19;\r\n\r\nimport {BufferBase} from \"./BufferBase.sol\";\r\n\r\nlibrary Buffer {\r\n  using BufferBase for BufferBase.buffer;\r\n\r\n  uint8 private constant MAJOR_TYPE_INT = 0;\r\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n  uint8 private constant MAJOR_TYPE_STRING = 3;\r\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n  uint8 private constant MAJOR_TYPE_MAP = 5;\r\n  uint8 private constant MAJOR_TYPE_TAG = 6;\r\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\r\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\r\n\r\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\r\n    if (value <= 23) {\r\n      buf.appendUint8(uint8((major << 5) | value));\r\n    } else if (value <= 0xFF) {\r\n      buf.appendUint8(uint8((major << 5) | 24));\r\n      buf.appendInt(value, 1);\r\n    } else if (value <= 0xFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 25));\r\n      buf.appendInt(value, 2);\r\n    } else if (value <= 0xFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 26));\r\n      buf.appendInt(value, 4);\r\n    } else {\r\n      buf.appendUint8(uint8((major << 5) | 27));\r\n      buf.appendInt(value, 8);\r\n    }\r\n  }\r\n\r\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\r\n    buf.appendUint8(uint8((major << 5) | 31));\r\n  }\r\n\r\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\r\n    if (value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, value);\r\n    } else {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\r\n    }\r\n  }\r\n\r\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\r\n    if (value < -0x10000000000000000) {\r\n      encodeSignedBigNum(buf, value);\r\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, uint(value));\r\n    } else if (value >= 0) {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\r\n    } else {\r\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\r\n    }\r\n  }\r\n\r\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\r\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\r\n    buf.append(value);\r\n  }\r\n\r\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(value));\r\n  }\r\n\r\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\r\n  }\r\n\r\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\r\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\r\n    buf.append(bytes(value));\r\n  }\r\n\r\n  function startArray(BufferBase.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n  }\r\n\r\n  function startMap(BufferBase.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n  }\r\n\r\n  function endSequence(BufferBase.buffer memory buf) internal pure {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n  }\r\n}"},"contracts/lib/BufferBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev A library for working with mutable byte buffers in Solidity.\r\n *\r\n * Byte buffers are mutable and expandable, and provide a variety of primitives\r\n * for writing to them. At any time you can fetch a bytes object containing the\r\n * current contents of the buffer. The bytes object should not be stored between\r\n * operations, as it may change due to resizing of the buffer.\r\n */\r\nlibrary BufferBase {\r\n    /**\r\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n     *      a capacity. The capacity may be longer than the current value, in\r\n     *      which case it can be extended without the need to allocate more memory.\r\n     */\r\n    struct buffer {\r\n        bytes buf;\r\n        uint256 capacity;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes a buffer with an initial capacity.\r\n     * @param buf The buffer to initialize.\r\n     * @param capacity The number of bytes of space to allocate the buffer.\r\n     * @return The buffer, for chaining.\r\n     */\r\n    function init(\r\n        buffer memory buf,\r\n        uint256 capacity\r\n    ) internal pure returns (buffer memory) {\r\n        if (capacity % 32 != 0) {\r\n            capacity += 32 - (capacity % 32);\r\n        }\r\n        // Allocate space for the buffer data\r\n        buf.capacity = capacity;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(buf, ptr)\r\n            mstore(ptr, 0)\r\n            mstore(0x40, add(32, add(ptr, capacity)))\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes a new buffer from an existing bytes object.\r\n     *      Changes to the buffer may mutate the original value.\r\n     * @param b The bytes object to initialize the buffer with.\r\n     * @return A new buffer.\r\n     */\r\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\r\n        buffer memory buf;\r\n        buf.buf = b;\r\n        buf.capacity = b.length;\r\n        return buf;\r\n    }\r\n\r\n    function resize(buffer memory buf, uint256 capacity) private pure {\r\n        bytes memory oldbuf = buf.buf;\r\n        init(buf, capacity);\r\n        append(buf, oldbuf);\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        if (a > b) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets buffer length to 0.\r\n     * @param buf The buffer to truncate.\r\n     * @return The original buffer, for chaining..\r\n     */\r\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\r\n        assembly {\r\n            let bufptr := mload(buf)\r\n            mstore(bufptr, 0)\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The start offset to write to.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to copy.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function write(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        bytes memory data,\r\n        uint256 len\r\n    ) internal pure returns (buffer memory) {\r\n        require(len <= data.length);\r\n\r\n        if (off + len > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len + off) * 2);\r\n        }\r\n\r\n        uint256 dest;\r\n        uint256 src;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Start address = buffer address + offset + sizeof(buffer length)\r\n            dest := add(add(bufptr, 32), off)\r\n            // Update buffer length if we're extending it\r\n            if gt(add(len, off), buflen) {\r\n                mstore(bufptr, add(len, off))\r\n            }\r\n            src := add(data, 32)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        unchecked {\r\n            uint256 mask = (256 ** (32 - len)) - 1;\r\n            assembly {\r\n                let srcpart := and(mload(src), not(mask))\r\n                let destpart := and(mload(dest), mask)\r\n                mstore(dest, or(destpart, srcpart))\r\n            }\r\n        }\r\n\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to copy.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function append(\r\n        buffer memory buf,\r\n        bytes memory data,\r\n        uint256 len\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, len);\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function append(\r\n        buffer memory buf,\r\n        bytes memory data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, data.length);\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\r\n     *      capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write the byte at.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeUint8(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        uint8 data\r\n    ) internal pure returns (buffer memory) {\r\n        if (off >= buf.capacity) {\r\n            resize(buf, buf.capacity * 2);\r\n        }\r\n\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n            // Address = buffer address + sizeof(buffer length) + off\r\n            let dest := add(add(bufptr, off), 32)\r\n            mstore8(dest, data)\r\n            // Update buffer length if we extended it\r\n            if eq(off, buflen) {\r\n                mstore(bufptr, add(buflen, 1))\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\r\n     *      capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function appendUint8(\r\n        buffer memory buf,\r\n        uint8 data\r\n    ) internal pure returns (buffer memory) {\r\n        return writeUint8(buf, buf.buf.length, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\r\n     *      exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write at.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to write (left-aligned).\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function write(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        bytes32 data,\r\n        uint256 len\r\n    ) private pure returns (buffer memory) {\r\n        if (len + off > buf.capacity) {\r\n            resize(buf, (len + off) * 2);\r\n        }\r\n\r\n        unchecked {\r\n            uint256 mask = (256 ** len) - 1;\r\n            // Right-align data\r\n            data = data >> (8 * (32 - len));\r\n            assembly {\r\n                // Memory address of the buffer data\r\n                let bufptr := mload(buf)\r\n                // Address = buffer address + sizeof(buffer length) + off + len\r\n                let dest := add(add(bufptr, off), len)\r\n                mstore(dest, or(and(mload(dest), not(mask)), data))\r\n                // Update buffer length if we extended it\r\n                if gt(add(off, len), mload(bufptr)) {\r\n                    mstore(bufptr, add(off, len))\r\n                }\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\r\n     *      capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write at.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeBytes20(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        bytes20 data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, off, bytes32(data), 20);\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chhaining.\r\n     */\r\n    function appendBytes20(\r\n        buffer memory buf,\r\n        bytes20 data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, bytes32(data), 20);\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function appendBytes32(\r\n        buffer memory buf,\r\n        bytes32 data\r\n    ) internal pure returns (buffer memory) {\r\n        return write(buf, buf.buf.length, data, 32);\r\n    }\r\n\r\n    /**\r\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\r\n     *      the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param off The offset to write at.\r\n     * @param data The data to append.\r\n     * @param len The number of bytes to write (right-aligned).\r\n     * @return The original buffer, for chaining.\r\n     */\r\n    function writeInt(\r\n        buffer memory buf,\r\n        uint256 off,\r\n        uint256 data,\r\n        uint256 len\r\n    ) private pure returns (buffer memory) {\r\n        if (len + off > buf.capacity) {\r\n            resize(buf, (len + off) * 2);\r\n        }\r\n\r\n        uint256 mask = (256 ** len) - 1;\r\n        assembly {\r\n            // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n            // Address = buffer address + off + sizeof(buffer length) + len\r\n            let dest := add(add(bufptr, off), len)\r\n            mstore(dest, or(and(mload(dest), not(mask)), data))\r\n            // Update buffer length if we extended it\r\n            if gt(add(off, len), mload(bufptr)) {\r\n                mstore(bufptr, add(off, len))\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n     * exceed the capacity of the buffer.\r\n     * @param buf The buffer to append to.\r\n     * @param data The data to append.\r\n     * @return The original buffer.\r\n     */\r\n    function appendInt(\r\n        buffer memory buf,\r\n        uint256 data,\r\n        uint256 len\r\n    ) internal pure returns (buffer memory) {\r\n        return writeInt(buf, buf.buf.length, data, len);\r\n    }\r\n}"},"contracts/lib/RequestLib.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport {Buffer} from \"./Buffer.sol\";\r\nimport {BufferBase} from \"./BufferBase.sol\";\r\n\r\nlibrary RequestLib {\r\n  using Buffer for BufferBase.buffer;\r\n\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    BufferBase.buffer requestData;\r\n  }\r\n\r\n  function initialize(\r\n    Request memory self,\r\n    address callbackAddr,\r\n    bytes4 callbackFunc\r\n  ) internal pure returns (Request memory) {\r\n    self.callbackAddress = callbackAddr;\r\n    self.callbackFunctionId = callbackFunc;\r\n    return self;\r\n  }\r\n\r\n  function setId(Request memory self, bytes32 id) internal pure {\r\n    self.id = id;\r\n  }\r\n\r\n  function add(Request memory self, string memory key, string memory value) internal pure {\r\n    self.requestData.encodeString(key);\r\n    self.requestData.encodeString(value);\r\n  }\r\n\r\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\r\n    self.requestData.encodeString(\" header(\");\r\n    self.requestData.encodeString(headerKey);\r\n    self.requestData.encodeString(value);\r\n    self.requestData.encodeString(\") \");\r\n  }\r\n}"},"contracts/pull/HttpRequestOracle.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../lib/RequestLib.sol\";\r\n\r\nerror OnlyReporter();\r\n\r\ncontract HttpRequestOracle is Ownable {\r\n  using RequestLib for RequestLib.Request;\r\n\r\n  mapping(address => bool) reporters;\r\n\r\n  event RequestSent(bytes32 indexed id, bytes data);\r\n  event RequestFulfilled(bytes32 indexed id);\r\n  event RequestCancelled(bytes32 indexed id);\r\n\r\n  function updateReporter(address reporterAddress, bool isReporter) external onlyOwner {\r\n    reporters[reporterAddress] = isReporter;\r\n  }\r\n\r\n  function getReporter(address reporterAddress) external view returns (bool) {\r\n    return reporters[reporterAddress];\r\n  }\r\n\r\n  function _hasReporter(address reporterAddress) private view returns (bool) {\r\n    return reporters[reporterAddress];\r\n  }\r\n\r\n  function sendRequest(RequestLib.Request memory req) external returns (bytes32) {\r\n    bytes memory encodedRequest = abi.encodeWithSelector(\r\n      this.updateReporter.selector,\r\n      req.id,\r\n      req.callbackFunctionId,\r\n      req.requestData.buf\r\n    );\r\n    emit RequestSent(req.id, encodedRequest);\r\n    return req.id;\r\n  }\r\n}"},"contracts/pull/HttpRequestWithHeader.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport \"./HttpRequestOracle.sol\";\r\nimport \"./RequestConsumer.sol\";\r\n\r\ncontract HttpRequestConsumerWithHeader is RequestConsumer {\r\n  using RequestLib for RequestLib.Request;\r\n\r\n  HttpRequestOracle httpOracle;\r\n  string prediction_signal;\r\n\r\n  event RequestExchangeRate(bytes32 indexed requestId, string prediction_signal);\r\n\r\n  constructor(address _oracle) {\r\n    httpOracle = HttpRequestOracle(_oracle);\r\n  }\r\n\r\n  function requestPredictionSignal() private returns (bytes32) {\r\n    RequestLib.Request memory req = buildRequest(this._requestedDataCompleted.selector);\r\n    req.setId(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\r\n\r\n    // The code above is the same as\r\n    // const request = require('request');\r\n\r\n    // request.get({\r\n    //   url: 'https://api.api-ninjas.com/v1/exchangerate?pair=USD_EUR',\r\n    //   headers: {\r\n    //     'X-Api-Key': 'YOUR_API_KEY'\r\n    //   },\r\n    // }, function(error, response, body) {\r\n    //   if(error) return console.error('Request failed:', error);\r\n    //   else if(response.statusCode != 200) return console.error('Error:', response.statusCode, body.toString('utf8'));\r\n    //   else console.log(body)\r\n    // });\r\n\r\n    req.add(\"get\", \"https://api.scobrudot.dev/data/\");\r\n    req.addHeader(\"Authorization\", \"\");\r\n\r\n    // Set the path to find the desired data in the API response, where the response format is:\r\n    //  {\r\n    //   \"currency_pair\": \"USD_EUR\",\r\n    //   \"exchange_rate\": 0.826641\r\n    // }\r\n    req.add(\"path\", \"prediction_signal\");\r\n    httpOracle.sendRequest(req);\r\n    return req.id;\r\n  }\r\n\r\n  function _requestedDataCompleted(bytes32 _requestId, string memory _prediction_signal) public {\r\n    emit RequestExchangeRate(_requestId, _prediction_signal);\r\n    prediction_signal = _prediction_signal;\r\n  }\r\n}"},"contracts/pull/RequestConsumer.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport \"./HttpRequestOracle.sol\";\r\nimport \"../lib/RequestLib.sol\";\r\n\r\nabstract contract RequestConsumer {\r\n  using RequestLib for RequestLib.Request;\r\n\r\n  function buildRequest(bytes4 callbackFunctionSignature) internal view returns (RequestLib.Request memory) {\r\n    RequestLib.Request memory req;\r\n    return req.initialize(address(this), callbackFunctionSignature);\r\n  }\r\n}"},"contracts/SimpleOracle.sol":{"content":"pragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract SimpleOracle is Ownable {\r\n  // create enum struct\r\n  enum Status {\r\n    Buy,\r\n    Sell\r\n  }\r\n\r\n  // current status variable\r\n  Status private currentStatus;\r\n\r\n  // create event\r\n  event StatusChange(Status indexed status);\r\n\r\n  // constructor to set initial status\r\n  constructor(Status initialStatus) {\r\n    currentStatus = initialStatus;\r\n  }\r\n\r\n  // create function to change status\r\n  function changeStatus(Status status) external onlyOwner {\r\n    currentStatus = status;\r\n    emit StatusChange(status);\r\n  }\r\n\r\n  // create function to get status\r\n  function getStatus() external view returns (Status) {\r\n    return currentStatus;\r\n  }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/SimpleOracle.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/SimpleOracle.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[134],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":135,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":134,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,134],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[134]},"id":135,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"111:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":134,"linearizedBaseContracts":[134],"name":"Context","nameLocation":"626:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":123,"nodeType":"Block","src":"702:34:1","statements":[{"expression":{"expression":{"id":120,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:1","memberName":"sender","nodeType":"MemberAccess","src":"719:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":119,"id":122,"nodeType":"Return","src":"712:17:1"}]},"id":124,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:1","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[],"src":"659:2:1"},"returnParameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":124,"src":"693:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:1"},"scope":134,"src":"640:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":132,"nodeType":"Block","src":"809:32:1","statements":[{"expression":{"expression":{"id":129,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:1","memberName":"data","nodeType":"MemberAccess","src":"826:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":128,"id":131,"nodeType":"Return","src":"819:15:1"}]},"id":133,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:1","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"759:2:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":133,"src":"793:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":126,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:1"},"scope":134,"src":"742:99:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":135,"src":"608:235:1","usedErrors":[]}],"src":"86:758:1"},"id":1},"contracts/SimpleOracle.sol":{"ast":{"absolutePath":"contracts/SimpleOracle.sol","exportedSymbols":{"Context":[134],"Ownable":[112],"SimpleOracle":[188]},"id":189,"nodeType":"SourceUnit","nodes":[{"id":136,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"0:23:2"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":189,"sourceUnit":113,"src":"27:52:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":138,"name":"Ownable","nameLocations":["108:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"108:7:2"},"id":139,"nodeType":"InheritanceSpecifier","src":"108:7:2"}],"canonicalName":"SimpleOracle","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":188,"linearizedBaseContracts":[188,112,134],"name":"SimpleOracle","nameLocation":"92:12:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"SimpleOracle.Status","id":142,"members":[{"id":140,"name":"Buy","nameLocation":"165:3:2","nodeType":"EnumValue","src":"165:3:2"},{"id":141,"name":"Sell","nameLocation":"175:4:2","nodeType":"EnumValue","src":"175:4:2"}],"name":"Status","nameLocation":"151:6:2","nodeType":"EnumDefinition","src":"146:38:2"},{"constant":false,"id":145,"mutability":"mutable","name":"currentStatus","nameLocation":"235:13:2","nodeType":"VariableDeclaration","scope":188,"src":"220:28:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"},"typeName":{"id":144,"nodeType":"UserDefinedTypeName","pathNode":{"id":143,"name":"Status","nameLocations":["220:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":142,"src":"220:6:2"},"referencedDeclaration":142,"src":"220:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"visibility":"private"},{"anonymous":false,"eventSelector":"caf614a467539eadacc5961ee316ce2d5590a46321100b51c19e0bbec526dd27","id":150,"name":"StatusChange","nameLocation":"280:12:2","nodeType":"EventDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"indexed":true,"mutability":"mutable","name":"status","nameLocation":"308:6:2","nodeType":"VariableDeclaration","scope":150,"src":"293:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"},"typeName":{"id":147,"nodeType":"UserDefinedTypeName","pathNode":{"id":146,"name":"Status","nameLocations":["293:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":142,"src":"293:6:2"},"referencedDeclaration":142,"src":"293:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"visibility":"internal"}],"src":"292:23:2"},"src":"274:42:2"},{"body":{"id":160,"nodeType":"Block","src":"396:42:2","statements":[{"expression":{"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":156,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"403:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":157,"name":"initialStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"419:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"src":"403:29:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"id":159,"nodeType":"ExpressionStatement","src":"403:29:2"}]},"id":161,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"initialStatus","nameLocation":"381:13:2","nodeType":"VariableDeclaration","scope":161,"src":"374:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"},"typeName":{"id":152,"nodeType":"UserDefinedTypeName","pathNode":{"id":151,"name":"Status","nameLocations":["374:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":142,"src":"374:6:2"},"referencedDeclaration":142,"src":"374:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"visibility":"internal"}],"src":"373:22:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"396:0:2"},"scope":188,"src":"362:76:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":177,"nodeType":"Block","src":"539:67:2","statements":[{"expression":{"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":169,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"546:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":170,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"562:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"src":"546:22:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"id":172,"nodeType":"ExpressionStatement","src":"546:22:2"},{"eventCall":{"arguments":[{"id":174,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"593:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}],"id":173,"name":"StatusChange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"580:12:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_Status_$142_$returns$__$","typeString":"function (enum SimpleOracle.Status)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"580:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":176,"nodeType":"EmitStatement","src":"575:25:2"}]},"functionSelector":"95bc9538","id":178,"implemented":true,"kind":"function","modifiers":[{"id":167,"kind":"modifierInvocation","modifierName":{"id":166,"name":"onlyOwner","nameLocations":["529:9:2"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"529:9:2"},"nodeType":"ModifierInvocation","src":"529:9:2"}],"name":"changeStatus","nameLocation":"492:12:2","nodeType":"FunctionDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"status","nameLocation":"512:6:2","nodeType":"VariableDeclaration","scope":178,"src":"505:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"},"typeName":{"id":163,"nodeType":"UserDefinedTypeName","pathNode":{"id":162,"name":"Status","nameLocations":["505:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":142,"src":"505:6:2"},"referencedDeclaration":142,"src":"505:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"visibility":"internal"}],"src":"504:15:2"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[],"src":"539:0:2"},"scope":188,"src":"483:123:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":186,"nodeType":"Block","src":"700:33:2","statements":[{"expression":{"id":184,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"714:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"functionReturnParameters":183,"id":185,"nodeType":"Return","src":"707:20:2"}]},"functionSelector":"4e69d560","id":187,"implemented":true,"kind":"function","modifiers":[],"name":"getStatus","nameLocation":"657:9:2","nodeType":"FunctionDefinition","parameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"666:2:2"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":187,"src":"692:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"},"typeName":{"id":181,"nodeType":"UserDefinedTypeName","pathNode":{"id":180,"name":"Status","nameLocations":["692:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":142,"src":"692:6:2"},"referencedDeclaration":142,"src":"692:6:2","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$142","typeString":"enum SimpleOracle.Status"}},"visibility":"internal"}],"src":"691:8:2"},"scope":188,"src":"648:85:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":189,"src":"83:653:2","usedErrors":[]}],"src":"0:738:2"},"id":2},"contracts/lib/Buffer.sol":{"ast":{"absolutePath":"contracts/lib/Buffer.sol","exportedSymbols":{"Buffer":[635],"BufferBase":[1157]},"id":636,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":190,"literals":["solidity",">=","0.4",".19"],"nodeType":"PragmaDirective","src":"33:25:3"},{"absolutePath":"contracts/lib/BufferBase.sol","file":"./BufferBase.sol","id":192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":636,"sourceUnit":1158,"src":"62:44:3","symbolAliases":[{"foreign":{"id":191,"name":"BufferBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"70:10:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Buffer","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":635,"linearizedBaseContracts":[635],"name":"Buffer","nameLocation":"118:6:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":196,"libraryName":{"id":193,"name":"BufferBase","nameLocations":["136:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":1157,"src":"136:10:3"},"nodeType":"UsingForDirective","src":"130:39:3","typeName":{"id":195,"nodeType":"UserDefinedTypeName","pathNode":{"id":194,"name":"BufferBase.buffer","nameLocations":["151:10:3","162:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"151:17:3"},"referencedDeclaration":643,"src":"151:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}}},{"constant":true,"id":199,"mutability":"constant","name":"MAJOR_TYPE_INT","nameLocation":"198:14:3","nodeType":"VariableDeclaration","scope":635,"src":"175:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":197,"name":"uint8","nodeType":"ElementaryTypeName","src":"175:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"30","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"215:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":202,"mutability":"constant","name":"MAJOR_TYPE_NEGATIVE_INT","nameLocation":"244:23:3","nodeType":"VariableDeclaration","scope":635,"src":"221:50:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":200,"name":"uint8","nodeType":"ElementaryTypeName","src":"221:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"270:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":205,"mutability":"constant","name":"MAJOR_TYPE_BYTES","nameLocation":"299:16:3","nodeType":"VariableDeclaration","scope":635,"src":"276:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":203,"name":"uint8","nodeType":"ElementaryTypeName","src":"276:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"318:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":208,"mutability":"constant","name":"MAJOR_TYPE_STRING","nameLocation":"347:17:3","nodeType":"VariableDeclaration","scope":635,"src":"324:44:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":206,"name":"uint8","nodeType":"ElementaryTypeName","src":"324:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"367:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":211,"mutability":"constant","name":"MAJOR_TYPE_ARRAY","nameLocation":"396:16:3","nodeType":"VariableDeclaration","scope":635,"src":"373:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":209,"name":"uint8","nodeType":"ElementaryTypeName","src":"373:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"415:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"private"},{"constant":true,"id":214,"mutability":"constant","name":"MAJOR_TYPE_MAP","nameLocation":"444:14:3","nodeType":"VariableDeclaration","scope":635,"src":"421:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":212,"name":"uint8","nodeType":"ElementaryTypeName","src":"421:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"35","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"461:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"private"},{"constant":true,"id":217,"mutability":"constant","name":"MAJOR_TYPE_TAG","nameLocation":"490:14:3","nodeType":"VariableDeclaration","scope":635,"src":"467:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":215,"name":"uint8","nodeType":"ElementaryTypeName","src":"467:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"36","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"507:1:3","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"private"},{"constant":true,"id":220,"mutability":"constant","name":"MAJOR_TYPE_CONTENT_FREE","nameLocation":"536:23:3","nodeType":"VariableDeclaration","scope":635,"src":"513:50:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":218,"name":"uint8","nodeType":"ElementaryTypeName","src":"513:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"37","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"562:1:3","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"private"},{"constant":true,"id":223,"mutability":"constant","name":"TAG_TYPE_BIGNUM","nameLocation":"593:15:3","nodeType":"VariableDeclaration","scope":635,"src":"570:42:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":221,"name":"uint8","nodeType":"ElementaryTypeName","src":"570:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"611:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":226,"mutability":"constant","name":"TAG_TYPE_NEGATIVE_BIGNUM","nameLocation":"640:24:3","nodeType":"VariableDeclaration","scope":635,"src":"617:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":224,"name":"uint8","nodeType":"ElementaryTypeName","src":"617:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"667:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"body":{"id":355,"nodeType":"Block","src":"773:539:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":236,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"784:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3233","id":237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"793:2:3","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"src":"784:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"868:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"877:4:3","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"868:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"983:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"307846464646","id":280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"992:6:3","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xFFFF"},"src":"983:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1100:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646464646464646","id":305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1109:10:3","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xFFFFFFFF"},"src":"1100:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":350,"nodeType":"Block","src":"1217:90:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":334,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1249:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1258:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1249:10:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":337,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1248:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3237","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1263:2:3","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"1248:17:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1242:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":332,"name":"uint8","nodeType":"ElementaryTypeName","src":"1242:5:3","typeDescriptions":{}}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1242:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":329,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1226:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1230:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"1226:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":342,"nodeType":"ExpressionStatement","src":"1226:41:3"},{"expression":{"arguments":[{"id":346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1290:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"38","id":347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"expression":{"id":343,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1276:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1280:9:3","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1156,"src":"1276:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1276:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":349,"nodeType":"ExpressionStatement","src":"1276:23:3"}]},"id":351,"nodeType":"IfStatement","src":"1096:211:3","trueBody":{"id":328,"nodeType":"Block","src":"1121:90:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":312,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1153:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1162:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1153:10:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1152:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3236","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1167:2:3","typeDescriptions":{"typeIdentifier":"t_rational_26_by_1","typeString":"int_const 26"},"value":"26"},"src":"1152:17:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1146:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":310,"name":"uint8","nodeType":"ElementaryTypeName","src":"1146:5:3","typeDescriptions":{}}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1146:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":307,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1130:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1134:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"1130:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1130:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":320,"nodeType":"ExpressionStatement","src":"1130:41:3"},{"expression":{"arguments":[{"id":324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1194:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"34","id":325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1201:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":321,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1180:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":323,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1184:9:3","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1156,"src":"1180:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1180:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":327,"nodeType":"ExpressionStatement","src":"1180:23:3"}]}},"id":352,"nodeType":"IfStatement","src":"979:328:3","trueBody":{"id":303,"nodeType":"Block","src":"1000:90:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":287,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1032:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1041:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1032:10:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1031:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3235","id":291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1046:2:3","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"src":"1031:17:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1025:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":285,"name":"uint8","nodeType":"ElementaryTypeName","src":"1025:5:3","typeDescriptions":{}}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1025:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":282,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1009:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1013:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"1009:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1009:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":295,"nodeType":"ExpressionStatement","src":"1009:41:3"},{"expression":{"arguments":[{"id":299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1073:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"32","id":300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1080:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"id":296,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1059:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1063:9:3","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1156,"src":"1059:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1059:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":302,"nodeType":"ExpressionStatement","src":"1059:23:3"}]}},"id":353,"nodeType":"IfStatement","src":"864:443:3","trueBody":{"id":278,"nodeType":"Block","src":"883:90:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":262,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"915:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"924:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"915:10:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":265,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3234","id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"929:2:3","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"914:17:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"908:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":260,"name":"uint8","nodeType":"ElementaryTypeName","src":"908:5:3","typeDescriptions":{}}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"908:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":257,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"892:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":259,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"896:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"892:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"892:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":270,"nodeType":"ExpressionStatement","src":"892:41:3"},{"expression":{"arguments":[{"id":274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"956:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"31","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"963:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":271,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"942:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"946:9:3","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1156,"src":"942:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"942:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":277,"nodeType":"ExpressionStatement","src":"942:23:3"}]}},"id":354,"nodeType":"IfStatement","src":"780:527:3","trueBody":{"id":253,"nodeType":"Block","src":"797:61:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":244,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"829:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"838:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"829:10:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":247,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"828:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"843:5:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"828:20:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"822:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":242,"name":"uint8","nodeType":"ElementaryTypeName","src":"822:5:3","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"822:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":239,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"806:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"810:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"806:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"806:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":252,"nodeType":"ExpressionStatement","src":"806:44:3"}]}}]},"id":356,"implemented":true,"kind":"function","modifiers":[],"name":"encodeFixedNumeric","nameLocation":"684:18:3","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"buf","nameLocation":"728:3:3","nodeType":"VariableDeclaration","scope":356,"src":"703:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":228,"nodeType":"UserDefinedTypeName","pathNode":{"id":227,"name":"BufferBase.buffer","nameLocations":["703:10:3","714:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"703:17:3"},"referencedDeclaration":643,"src":"703:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"major","nameLocation":"739:5:3","nodeType":"VariableDeclaration","scope":356,"src":"733:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":230,"name":"uint8","nodeType":"ElementaryTypeName","src":"733:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"value","nameLocation":"753:5:3","nodeType":"VariableDeclaration","scope":356,"src":"746:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":232,"name":"uint64","nodeType":"ElementaryTypeName","src":"746:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"702:57:3"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"773:0:3"},"scope":635,"src":"675:637:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":378,"nodeType":"Block","src":"1410:54:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":369,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"1440:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1449:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1440:10:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":372,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1439:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3331","id":373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1454:2:3","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1439:17:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1433:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":367,"name":"uint8","nodeType":"ElementaryTypeName","src":"1433:5:3","typeDescriptions":{}}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":364,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"1417:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1421:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"1417:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":377,"nodeType":"ExpressionStatement","src":"1417:41:3"}]},"id":379,"implemented":true,"kind":"function","modifiers":[],"name":"encodeIndefiniteLengthType","nameLocation":"1327:26:3","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"buf","nameLocation":"1379:3:3","nodeType":"VariableDeclaration","scope":379,"src":"1354:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":358,"nodeType":"UserDefinedTypeName","pathNode":{"id":357,"name":"BufferBase.buffer","nameLocations":["1354:10:3","1365:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1354:17:3"},"referencedDeclaration":643,"src":"1354:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":361,"mutability":"mutable","name":"major","nameLocation":"1390:5:3","nodeType":"VariableDeclaration","scope":379,"src":"1384:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":360,"name":"uint8","nodeType":"ElementaryTypeName","src":"1384:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1353:43:3"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"1410:0:3"},"scope":635,"src":"1318:146:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":407,"nodeType":"Block","src":"1546:162:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1557:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307846464646464646464646464646464646","id":388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1565:18:3","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xFFFFFFFFFFFFFFFF"},"src":"1557:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":405,"nodeType":"Block","src":"1632:71:3","statements":[{"expression":{"arguments":[{"id":397,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"1660:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":398,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1665:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1688:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1681:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":399,"name":"uint64","nodeType":"ElementaryTypeName","src":"1681:6:3","typeDescriptions":{}}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1681:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":396,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"1641:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8,uint64) pure"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":404,"nodeType":"ExpressionStatement","src":"1641:54:3"}]},"id":406,"nodeType":"IfStatement","src":"1553:150:3","trueBody":{"id":395,"nodeType":"Block","src":"1585:41:3","statements":[{"expression":{"arguments":[{"id":391,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"1607:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1612:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":390,"name":"encodeBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"1594:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint256) pure"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":394,"nodeType":"ExpressionStatement","src":"1594:24:3"}]}}]},"id":408,"implemented":true,"kind":"function","modifiers":[],"name":"encodeUInt","nameLocation":"1479:10:3","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"buf","nameLocation":"1515:3:3","nodeType":"VariableDeclaration","scope":408,"src":"1490:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":381,"nodeType":"UserDefinedTypeName","pathNode":{"id":380,"name":"BufferBase.buffer","nameLocations":["1490:10:3","1501:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1490:17:3"},"referencedDeclaration":643,"src":"1490:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":384,"mutability":"mutable","name":"value","nameLocation":"1525:5:3","nodeType":"VariableDeclaration","scope":408,"src":"1520:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":383,"name":"uint","nodeType":"ElementaryTypeName","src":"1520:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1489:42:3"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"1546:0:3"},"scope":635,"src":"1470:238:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":473,"nodeType":"Block","src":"1788:380:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1799:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1807:20:3","subExpression":{"hexValue":"30783130303030303030303030303030303030","id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:19:3","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"value":"0x10000000000000000"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_18446744073709551616_by_1","typeString":"int_const -18446744073709551616"}},"src":"1799:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":426,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1886:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307846464646464646464646464646464646","id":427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1894:18:3","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xFFFFFFFFFFFFFFFF"},"src":"1886:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1971:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1980:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1971:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":469,"nodeType":"Block","src":"2069:94:3","statements":[{"expression":{"arguments":[{"id":455,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"2097:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":456,"name":"MAJOR_TYPE_NEGATIVE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2102:23:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2142:2:3","subExpression":{"hexValue":"31","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2143:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"2147:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2142:10:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2134:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":459,"name":"uint256","nodeType":"ElementaryTypeName","src":"2134:7:3","typeDescriptions":{}}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2134:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2127:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":457,"name":"uint64","nodeType":"ElementaryTypeName","src":"2127:6:3","typeDescriptions":{}}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2127:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":454,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"2078:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8,uint64) pure"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2078:77:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":468,"nodeType":"ExpressionStatement","src":"2078:77:3"}]},"id":470,"nodeType":"IfStatement","src":"1967:196:3","trueBody":{"id":453,"nodeType":"Block","src":"1983:80:3","statements":[{"expression":{"arguments":[{"id":442,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"2011:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":443,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"2016:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"arguments":[{"id":448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"2047:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2039:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:3","typeDescriptions":{}}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2039:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2032:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":444,"name":"uint64","nodeType":"ElementaryTypeName","src":"2032:6:3","typeDescriptions":{}}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2032:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":441,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"1992:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8,uint64) pure"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1992:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":452,"nodeType":"ExpressionStatement","src":"1992:63:3"}]}},"id":471,"nodeType":"IfStatement","src":"1882:281:3","trueBody":{"id":437,"nodeType":"Block","src":"1914:47:3","statements":[{"expression":{"arguments":[{"id":430,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"1936:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"arguments":[{"id":433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1946:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1941:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":431,"name":"uint","nodeType":"ElementaryTypeName","src":"1941:4:3","typeDescriptions":{}}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":429,"name":"encodeBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"1923:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint256) pure"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1923:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":436,"nodeType":"ExpressionStatement","src":"1923:30:3"}]}},"id":472,"nodeType":"IfStatement","src":"1795:368:3","trueBody":{"id":425,"nodeType":"Block","src":"1829:47:3","statements":[{"expression":{"arguments":[{"id":421,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"1857:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1862:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":420,"name":"encodeSignedBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"1838:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_int256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,int256) pure"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1838:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":424,"nodeType":"ExpressionStatement","src":"1838:30:3"}]}}]},"id":474,"implemented":true,"kind":"function","modifiers":[],"name":"encodeInt","nameLocation":"1723:9:3","nodeType":"FunctionDefinition","parameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"buf","nameLocation":"1758:3:3","nodeType":"VariableDeclaration","scope":474,"src":"1733:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":410,"nodeType":"UserDefinedTypeName","pathNode":{"id":409,"name":"BufferBase.buffer","nameLocations":["1733:10:3","1744:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1733:17:3"},"referencedDeclaration":643,"src":"1733:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":413,"mutability":"mutable","name":"value","nameLocation":"1767:5:3","nodeType":"VariableDeclaration","scope":474,"src":"1763:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":412,"name":"int","nodeType":"ElementaryTypeName","src":"1763:3:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1732:41:3"},"returnParameters":{"id":415,"nodeType":"ParameterList","parameters":[],"src":"1788:0:3"},"scope":635,"src":"1714:454:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":498,"nodeType":"Block","src":"2259:100:3","statements":[{"expression":{"arguments":[{"id":483,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2285:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":484,"name":"MAJOR_TYPE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"2290:16:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"id":487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"2315:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2321:6:3","memberName":"length","nodeType":"MemberAccess","src":"2315:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2308:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":485,"name":"uint64","nodeType":"ElementaryTypeName","src":"2308:6:3","typeDescriptions":{}}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":482,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"2266:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8,uint64) pure"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":491,"nodeType":"ExpressionStatement","src":"2266:63:3"},{"expression":{"arguments":[{"id":495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"2347:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":492,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2336:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":494,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2340:6:3","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":900,"src":"2336:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,bytes memory) pure returns (struct BufferBase.buffer memory)"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2336:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":497,"nodeType":"ExpressionStatement","src":"2336:17:3"}]},"id":499,"implemented":true,"kind":"function","modifiers":[],"name":"encodeBytes","nameLocation":"2183:11:3","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"buf","nameLocation":"2220:3:3","nodeType":"VariableDeclaration","scope":499,"src":"2195:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":476,"nodeType":"UserDefinedTypeName","pathNode":{"id":475,"name":"BufferBase.buffer","nameLocations":["2195:10:3","2206:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2195:17:3"},"referencedDeclaration":643,"src":"2195:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"value","nameLocation":"2238:5:3","nodeType":"VariableDeclaration","scope":499,"src":"2225:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":478,"name":"bytes","nodeType":"ElementaryTypeName","src":"2225:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2194:50:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[],"src":"2259:0:3"},"scope":635,"src":"2174:185:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":529,"nodeType":"Block","src":"2443:118:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":512,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2473:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2491:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2473:19:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2472:21:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":516,"name":"TAG_TYPE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"2496:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2472:39:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2466:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":510,"name":"uint8","nodeType":"ElementaryTypeName","src":"2466:5:3","typeDescriptions":{}}},"id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2466:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":507,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"2450:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2454:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"2450:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2450:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":520,"nodeType":"ExpressionStatement","src":"2450:63:3"},{"expression":{"arguments":[{"id":522,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"2532:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"arguments":[{"id":525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"2548:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":523,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2537:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2541:6:3","memberName":"encode","nodeType":"MemberAccess","src":"2537:10:3","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2537:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":521,"name":"encodeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"2520:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct BufferBase.buffer memory,bytes memory) pure"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2520:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":528,"nodeType":"ExpressionStatement","src":"2520:35:3"}]},"id":530,"implemented":true,"kind":"function","modifiers":[],"name":"encodeBigNum","nameLocation":"2374:12:3","nodeType":"FunctionDefinition","parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"buf","nameLocation":"2412:3:3","nodeType":"VariableDeclaration","scope":530,"src":"2387:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":501,"nodeType":"UserDefinedTypeName","pathNode":{"id":500,"name":"BufferBase.buffer","nameLocations":["2387:10:3","2398:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2387:17:3"},"referencedDeclaration":643,"src":"2387:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"value","nameLocation":"2422:5:3","nodeType":"VariableDeclaration","scope":530,"src":"2417:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":503,"name":"uint","nodeType":"ElementaryTypeName","src":"2417:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2386:42:3"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"2443:0:3"},"scope":635,"src":"2365:196:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":566,"nodeType":"Block","src":"2650:141:3","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":543,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2680:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2698:1:3","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2680:19:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":546,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2679:21:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":547,"name":"TAG_TYPE_NEGATIVE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"2703:24:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2679:48:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2673:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":541,"name":"uint8","nodeType":"ElementaryTypeName","src":"2673:5:3","typeDescriptions":{}}},"id":549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2673:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":538,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2657:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":540,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2661:11:3","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":953,"src":"2657:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2657:72:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":551,"nodeType":"ExpressionStatement","src":"2657:72:3"},{"expression":{"arguments":[{"id":553,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2748:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2772:2:3","subExpression":{"hexValue":"31","id":558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2773:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":560,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2777:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2772:10:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2764:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":556,"name":"uint256","nodeType":"ElementaryTypeName","src":"2764:7:3","typeDescriptions":{}}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":554,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2753:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2757:6:3","memberName":"encode","nodeType":"MemberAccess","src":"2753:10:3","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2753:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":552,"name":"encodeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"2736:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct BufferBase.buffer memory,bytes memory) pure"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":565,"nodeType":"ExpressionStatement","src":"2736:49:3"}]},"id":567,"implemented":true,"kind":"function","modifiers":[],"name":"encodeSignedBigNum","nameLocation":"2576:18:3","nodeType":"FunctionDefinition","parameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"buf","nameLocation":"2620:3:3","nodeType":"VariableDeclaration","scope":567,"src":"2595:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":532,"nodeType":"UserDefinedTypeName","pathNode":{"id":531,"name":"BufferBase.buffer","nameLocations":["2595:10:3","2606:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2595:17:3"},"referencedDeclaration":643,"src":"2595:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"input","nameLocation":"2629:5:3","nodeType":"VariableDeclaration","scope":567,"src":"2625:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":534,"name":"int","nodeType":"ElementaryTypeName","src":"2625:3:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2594:41:3"},"returnParameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"2650:0:3"},"scope":635,"src":"2567:224:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":597,"nodeType":"Block","src":"2884:115:3","statements":[{"expression":{"arguments":[{"id":576,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"2910:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":577,"name":"MAJOR_TYPE_STRING","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"2915:17:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"arguments":[{"id":582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"2947:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2941:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":580,"name":"bytes","nodeType":"ElementaryTypeName","src":"2941:5:3","typeDescriptions":{}}},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2941:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2954:6:3","memberName":"length","nodeType":"MemberAccess","src":"2941:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2934:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":578,"name":"uint64","nodeType":"ElementaryTypeName","src":"2934:6:3","typeDescriptions":{}}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2934:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":575,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"2891:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8,uint64) pure"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2891:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":587,"nodeType":"ExpressionStatement","src":"2891:71:3"},{"expression":{"arguments":[{"arguments":[{"id":593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"2986:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2980:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":591,"name":"bytes","nodeType":"ElementaryTypeName","src":"2980:5:3","typeDescriptions":{}}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2980:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":588,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"2969:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2973:6:3","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":900,"src":"2969:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$643_memory_ptr_$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,bytes memory) pure returns (struct BufferBase.buffer memory)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2969:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":596,"nodeType":"ExpressionStatement","src":"2969:24:3"}]},"id":598,"implemented":true,"kind":"function","modifiers":[],"name":"encodeString","nameLocation":"2806:12:3","nodeType":"FunctionDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"buf","nameLocation":"2844:3:3","nodeType":"VariableDeclaration","scope":598,"src":"2819:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":569,"nodeType":"UserDefinedTypeName","pathNode":{"id":568,"name":"BufferBase.buffer","nameLocations":["2819:10:3","2830:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2819:17:3"},"referencedDeclaration":643,"src":"2819:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"value","nameLocation":"2863:5:3","nodeType":"VariableDeclaration","scope":598,"src":"2849:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":571,"name":"string","nodeType":"ElementaryTypeName","src":"2849:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2818:51:3"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"2884:0:3"},"scope":635,"src":"2797:202:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":609,"nodeType":"Block","src":"3069:62:3","statements":[{"expression":{"arguments":[{"id":605,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"3103:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":606,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"3108:16:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":604,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"3076:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8) pure"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3076:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":608,"nodeType":"ExpressionStatement","src":"3076:49:3"}]},"id":610,"implemented":true,"kind":"function","modifiers":[],"name":"startArray","nameLocation":"3014:10:3","nodeType":"FunctionDefinition","parameters":{"id":602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":601,"mutability":"mutable","name":"buf","nameLocation":"3050:3:3","nodeType":"VariableDeclaration","scope":610,"src":"3025:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":600,"nodeType":"UserDefinedTypeName","pathNode":{"id":599,"name":"BufferBase.buffer","nameLocations":["3025:10:3","3036:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"3025:17:3"},"referencedDeclaration":643,"src":"3025:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"3024:30:3"},"returnParameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"3069:0:3"},"scope":635,"src":"3005:126:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":621,"nodeType":"Block","src":"3199:60:3","statements":[{"expression":{"arguments":[{"id":617,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"3233:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":618,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"3238:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":616,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"3206:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8) pure"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3206:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":620,"nodeType":"ExpressionStatement","src":"3206:47:3"}]},"id":622,"implemented":true,"kind":"function","modifiers":[],"name":"startMap","nameLocation":"3146:8:3","nodeType":"FunctionDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"buf","nameLocation":"3180:3:3","nodeType":"VariableDeclaration","scope":622,"src":"3155:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":612,"nodeType":"UserDefinedTypeName","pathNode":{"id":611,"name":"BufferBase.buffer","nameLocations":["3155:10:3","3166:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"3155:17:3"},"referencedDeclaration":643,"src":"3155:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"3154:30:3"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[],"src":"3199:0:3"},"scope":635,"src":"3137:122:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":633,"nodeType":"Block","src":"3330:69:3","statements":[{"expression":{"arguments":[{"id":629,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"3364:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":630,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"3369:23:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":628,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"3337:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint8) pure"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3337:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":632,"nodeType":"ExpressionStatement","src":"3337:56:3"}]},"id":634,"implemented":true,"kind":"function","modifiers":[],"name":"endSequence","nameLocation":"3274:11:3","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"buf","nameLocation":"3311:3:3","nodeType":"VariableDeclaration","scope":634,"src":"3286:28:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":624,"nodeType":"UserDefinedTypeName","pathNode":{"id":623,"name":"BufferBase.buffer","nameLocations":["3286:10:3","3297:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"3286:17:3"},"referencedDeclaration":643,"src":"3286:17:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"3285:30:3"},"returnParameters":{"id":627,"nodeType":"ParameterList","parameters":[],"src":"3330:0:3"},"scope":635,"src":"3265:134:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":636,"src":"110:3292:3","usedErrors":[]}],"src":"33:3369:3"},"id":3},"contracts/lib/BufferBase.sol":{"ast":{"absolutePath":"contracts/lib/BufferBase.sol","exportedSymbols":{"BufferBase":[1157]},"id":1158,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":637,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"BufferBase","contractDependencies":[],"contractKind":"library","documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"60:390:4","text":" @dev A library for working with mutable byte buffers in Solidity.\n Byte buffers are mutable and expandable, and provide a variety of primitives\n for writing to them. At any time you can fetch a bytes object containing the\n current contents of the buffer. The bytes object should not be stored between\n operations, as it may change due to resizing of the buffer."},"fullyImplemented":true,"id":1157,"linearizedBaseContracts":[1157],"name":"BufferBase","nameLocation":"460:10:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BufferBase.buffer","id":643,"members":[{"constant":false,"id":640,"mutability":"mutable","name":"buf","nameLocation":"772:3:4","nodeType":"VariableDeclaration","scope":643,"src":"766:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":639,"name":"bytes","nodeType":"ElementaryTypeName","src":"766:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"capacity","nameLocation":"794:8:4","nodeType":"VariableDeclaration","scope":643,"src":"786:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"buffer","nameLocation":"748:6:4","nodeType":"StructDefinition","scope":1157,"src":"741:69:4","visibility":"public"},{"body":{"id":680,"nodeType":"Block","src":"1174:383:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":655,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"1189:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1200:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1189:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1206:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1189:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":670,"nodeType":"IfStatement","src":"1185:83:4","trueBody":{"id":669,"nodeType":"Block","src":"1209:59:4","statements":[{"expression":{"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":660,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"1224:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":662,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"1242:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1253:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1242:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":665,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1241:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1236:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1224:32:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":668,"nodeType":"ExpressionStatement","src":"1224:32:4"}]}},{"expression":{"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":671,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"1325:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1329:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"1325:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":674,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"1340:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1325:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":676,"nodeType":"ExpressionStatement","src":"1325:23:4"},{"AST":{"nodeType":"YulBlock","src":"1368:161:4","statements":[{"nodeType":"YulVariableDeclaration","src":"1383:22:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1400:4:4","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1394:5:4"},"nodeType":"YulFunctionCall","src":"1394:11:4"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"1387:3:4","type":""}]},{"expression":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"1426:3:4"},{"name":"ptr","nodeType":"YulIdentifier","src":"1431:3:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1419:6:4"},"nodeType":"YulFunctionCall","src":"1419:16:4"},"nodeType":"YulExpressionStatement","src":"1419:16:4"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1456:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1449:6:4"},"nodeType":"YulFunctionCall","src":"1449:14:4"},"nodeType":"YulExpressionStatement","src":"1449:14:4"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1484:4:4","type":"","value":"0x40"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1494:2:4","type":"","value":"32"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1502:3:4"},{"name":"capacity","nodeType":"YulIdentifier","src":"1507:8:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1498:3:4"},"nodeType":"YulFunctionCall","src":"1498:18:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1490:3:4"},"nodeType":"YulFunctionCall","src":"1490:27:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1477:6:4"},"nodeType":"YulFunctionCall","src":"1477:41:4"},"nodeType":"YulExpressionStatement","src":"1477:41:4"}]},"evmVersion":"london","externalReferences":[{"declaration":647,"isOffset":false,"isSlot":false,"src":"1426:3:4","valueSize":1},{"declaration":649,"isOffset":false,"isSlot":false,"src":"1507:8:4","valueSize":1}],"id":677,"nodeType":"InlineAssembly","src":"1359:170:4"},{"expression":{"id":678,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"1546:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":654,"id":679,"nodeType":"Return","src":"1539:10:4"}]},"documentation":{"id":644,"nodeType":"StructuredDocumentation","src":"818:236:4","text":" @dev Initializes a buffer with an initial capacity.\n @param buf The buffer to initialize.\n @param capacity The number of bytes of space to allocate the buffer.\n @return The buffer, for chaining."},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1069:4:4","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"buf","nameLocation":"1098:3:4","nodeType":"VariableDeclaration","scope":681,"src":"1084:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":646,"nodeType":"UserDefinedTypeName","pathNode":{"id":645,"name":"buffer","nameLocations":["1084:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1084:6:4"},"referencedDeclaration":643,"src":"1084:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"capacity","nameLocation":"1120:8:4","nodeType":"VariableDeclaration","scope":681,"src":"1112:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":648,"name":"uint256","nodeType":"ElementaryTypeName","src":"1112:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1073:62:4"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":681,"src":"1159:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"buffer","nameLocations":["1159:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1159:6:4"},"referencedDeclaration":643,"src":"1159:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"1158:15:4"},"scope":1157,"src":"1060:497:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":709,"nodeType":"Block","src":"1886:113:4","statements":[{"assignments":[692],"declarations":[{"constant":false,"id":692,"mutability":"mutable","name":"buf","nameLocation":"1911:3:4","nodeType":"VariableDeclaration","scope":709,"src":"1897:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":691,"nodeType":"UserDefinedTypeName","pathNode":{"id":690,"name":"buffer","nameLocations":["1897:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1897:6:4"},"referencedDeclaration":643,"src":"1897:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"id":693,"nodeType":"VariableDeclarationStatement","src":"1897:17:4"},{"expression":{"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":694,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1925:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1929:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"1925:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":697,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"1935:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1925:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":699,"nodeType":"ExpressionStatement","src":"1925:11:4"},{"expression":{"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":700,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1947:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1951:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"1947:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":703,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"1962:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1964:6:4","memberName":"length","nodeType":"MemberAccess","src":"1962:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1947:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":706,"nodeType":"ExpressionStatement","src":"1947:23:4"},{"expression":{"id":707,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"1988:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":689,"id":708,"nodeType":"Return","src":"1981:10:4"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"1565:242:4","text":" @dev Initializes a new buffer from an existing bytes object.\n      Changes to the buffer may mutate the original value.\n @param b The bytes object to initialize the buffer with.\n @return A new buffer."},"id":710,"implemented":true,"kind":"function","modifiers":[],"name":"fromBytes","nameLocation":"1822:9:4","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"b","nameLocation":"1845:1:4","nodeType":"VariableDeclaration","scope":710,"src":"1832:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":683,"name":"bytes","nodeType":"ElementaryTypeName","src":"1832:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1831:16:4"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":710,"src":"1871:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":687,"nodeType":"UserDefinedTypeName","pathNode":{"id":686,"name":"buffer","nameLocations":["1871:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"1871:6:4"},"referencedDeclaration":643,"src":"1871:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"1870:15:4"},"scope":1157,"src":"1813:186:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":733,"nodeType":"Block","src":"2073:108:4","statements":[{"assignments":[719],"declarations":[{"constant":false,"id":719,"mutability":"mutable","name":"oldbuf","nameLocation":"2097:6:4","nodeType":"VariableDeclaration","scope":733,"src":"2084:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":718,"name":"bytes","nodeType":"ElementaryTypeName","src":"2084:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":722,"initialValue":{"expression":{"id":720,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2106:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2110:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"2106:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2084:29:4"},{"expression":{"arguments":[{"id":724,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2129:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":725,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"2134:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":723,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"2124:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2124:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":727,"nodeType":"ExpressionStatement","src":"2124:19:4"},{"expression":{"arguments":[{"id":729,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2161:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":730,"name":"oldbuf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2166:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":728,"name":"append","nodeType":"Identifier","overloadedDeclarations":[877,900],"referencedDeclaration":900,"src":"2154:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,bytes memory) pure returns (struct BufferBase.buffer memory)"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":732,"nodeType":"ExpressionStatement","src":"2154:19:4"}]},"id":734,"implemented":true,"kind":"function","modifiers":[],"name":"resize","nameLocation":"2016:6:4","nodeType":"FunctionDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":713,"mutability":"mutable","name":"buf","nameLocation":"2037:3:4","nodeType":"VariableDeclaration","scope":734,"src":"2023:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":712,"nodeType":"UserDefinedTypeName","pathNode":{"id":711,"name":"buffer","nameLocations":["2023:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2023:6:4"},"referencedDeclaration":643,"src":"2023:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":715,"mutability":"mutable","name":"capacity","nameLocation":"2050:8:4","nodeType":"VariableDeclaration","scope":734,"src":"2042:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"2042:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2022:37:4"},"returnParameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"2073:0:4"},"scope":1157,"src":"2007:174:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":752,"nodeType":"Block","src":"2255:83:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":743,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2270:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":744,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"2274:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2270:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":749,"nodeType":"IfStatement","src":"2266:46:4","trueBody":{"id":748,"nodeType":"Block","src":"2277:35:4","statements":[{"expression":{"id":746,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2299:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":742,"id":747,"nodeType":"Return","src":"2292:8:4"}]}},{"expression":{"id":750,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"2329:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":742,"id":751,"nodeType":"Return","src":"2322:8:4"}]},"id":753,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2198:3:4","nodeType":"FunctionDefinition","parameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":736,"mutability":"mutable","name":"a","nameLocation":"2210:1:4","nodeType":"VariableDeclaration","scope":753,"src":"2202:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":735,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":738,"mutability":"mutable","name":"b","nameLocation":"2221:1:4","nodeType":"VariableDeclaration","scope":753,"src":"2213:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"2213:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:22:4"},"returnParameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"2246:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":740,"name":"uint256","nodeType":"ElementaryTypeName","src":"2246:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2245:9:4"},"scope":1157,"src":"2189:149:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":766,"nodeType":"Block","src":"2572:129:4","statements":[{"AST":{"nodeType":"YulBlock","src":"2592:81:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2607:24:4","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"2627:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2621:5:4"},"nodeType":"YulFunctionCall","src":"2621:10:4"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"2611:6:4","type":""}]},{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"2652:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"2660:1:4","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2645:6:4"},"nodeType":"YulFunctionCall","src":"2645:17:4"},"nodeType":"YulExpressionStatement","src":"2645:17:4"}]},"evmVersion":"london","externalReferences":[{"declaration":757,"isOffset":false,"isSlot":false,"src":"2627:3:4","valueSize":1}],"id":763,"nodeType":"InlineAssembly","src":"2583:90:4"},{"expression":{"id":764,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"2690:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":762,"id":765,"nodeType":"Return","src":"2683:10:4"}]},"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"2346:145:4","text":" @dev Sets buffer length to 0.\n @param buf The buffer to truncate.\n @return The original buffer, for chaining.."},"id":767,"implemented":true,"kind":"function","modifiers":[],"name":"truncate","nameLocation":"2506:8:4","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"buf","nameLocation":"2529:3:4","nodeType":"VariableDeclaration","scope":767,"src":"2515:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":756,"nodeType":"UserDefinedTypeName","pathNode":{"id":755,"name":"buffer","nameLocations":["2515:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2515:6:4"},"referencedDeclaration":643,"src":"2515:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"2514:19:4"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":767,"src":"2557:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":760,"nodeType":"UserDefinedTypeName","pathNode":{"id":759,"name":"buffer","nameLocations":["2557:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"2557:6:4"},"referencedDeclaration":643,"src":"2557:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"2556:15:4"},"scope":1157,"src":"2497:204:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":852,"nodeType":"Block","src":"3240:1324:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":784,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3259:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":785,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3266:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3271:6:4","memberName":"length","nodeType":"MemberAccess","src":"3266:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3259:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3251:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":789,"nodeType":"ExpressionStatement","src":"3251:27:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":790,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"3295:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":791,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3301:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3295:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":793,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"3307:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3311:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"3307:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3295:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":810,"nodeType":"IfStatement","src":"3291:102:4","trueBody":{"id":809,"nodeType":"Block","src":"3321:72:4","statements":[{"expression":{"arguments":[{"id":797,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"3343:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":799,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"3352:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":800,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3356:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"3352:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":801,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3366:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":802,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"3372:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3366:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":798,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"3348:3:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3379:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3348:32:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":796,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"3336:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint256) pure"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3336:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":808,"nodeType":"ExpressionStatement","src":"3336:45:4"}]}},{"assignments":[812],"declarations":[{"constant":false,"id":812,"mutability":"mutable","name":"dest","nameLocation":"3413:4:4","nodeType":"VariableDeclaration","scope":852,"src":"3405:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"3405:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":813,"nodeType":"VariableDeclarationStatement","src":"3405:12:4"},{"assignments":[815],"declarations":[{"constant":false,"id":815,"mutability":"mutable","name":"src","nameLocation":"3436:3:4","nodeType":"VariableDeclaration","scope":852,"src":"3428:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"3428:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":816,"nodeType":"VariableDeclarationStatement","src":"3428:11:4"},{"AST":{"nodeType":"YulBlock","src":"3459:514:4","statements":[{"nodeType":"YulVariableDeclaration","src":"3524:24:4","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"3544:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3538:5:4"},"nodeType":"YulFunctionCall","src":"3538:10:4"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"3528:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3609:27:4","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3629:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3623:5:4"},"nodeType":"YulFunctionCall","src":"3623:13:4"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"3613:6:4","type":""}]},{"nodeType":"YulAssignment","src":"3730:33:4","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3746:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"3754:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3742:3:4"},"nodeType":"YulFunctionCall","src":"3742:15:4"},{"name":"off","nodeType":"YulIdentifier","src":"3759:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3738:3:4"},"nodeType":"YulFunctionCall","src":"3738:25:4"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"3730:4:4"}]},{"body":{"nodeType":"YulBlock","src":"3865:63:4","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3891:6:4"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3903:3:4"},{"name":"off","nodeType":"YulIdentifier","src":"3908:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3899:3:4"},"nodeType":"YulFunctionCall","src":"3899:13:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3884:6:4"},"nodeType":"YulFunctionCall","src":"3884:29:4"},"nodeType":"YulExpressionStatement","src":"3884:29:4"}]},"condition":{"arguments":[{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3846:3:4"},{"name":"off","nodeType":"YulIdentifier","src":"3851:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3842:3:4"},"nodeType":"YulFunctionCall","src":"3842:13:4"},{"name":"buflen","nodeType":"YulIdentifier","src":"3857:6:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3839:2:4"},"nodeType":"YulFunctionCall","src":"3839:25:4"},"nodeType":"YulIf","src":"3836:92:4"},{"nodeType":"YulAssignment","src":"3942:20:4","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3953:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"3959:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3949:3:4"},"nodeType":"YulFunctionCall","src":"3949:13:4"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3942:3:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":771,"isOffset":false,"isSlot":false,"src":"3544:3:4","valueSize":1},{"declaration":775,"isOffset":false,"isSlot":false,"src":"3953:4:4","valueSize":1},{"declaration":812,"isOffset":false,"isSlot":false,"src":"3730:4:4","valueSize":1},{"declaration":777,"isOffset":false,"isSlot":false,"src":"3846:3:4","valueSize":1},{"declaration":777,"isOffset":false,"isSlot":false,"src":"3903:3:4","valueSize":1},{"declaration":773,"isOffset":false,"isSlot":false,"src":"3759:3:4","valueSize":1},{"declaration":773,"isOffset":false,"isSlot":false,"src":"3851:3:4","valueSize":1},{"declaration":773,"isOffset":false,"isSlot":false,"src":"3908:3:4","valueSize":1},{"declaration":815,"isOffset":false,"isSlot":false,"src":"3942:3:4","valueSize":1}],"id":817,"nodeType":"InlineAssembly","src":"3450:523:4"},{"body":{"id":834,"nodeType":"Block","src":"4065:142:4","statements":[{"AST":{"nodeType":"YulBlock","src":"4089:58:4","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4115:4:4"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4127:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4121:5:4"},"nodeType":"YulFunctionCall","src":"4121:10:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4108:6:4"},"nodeType":"YulFunctionCall","src":"4108:24:4"},"nodeType":"YulExpressionStatement","src":"4108:24:4"}]},"evmVersion":"london","externalReferences":[{"declaration":812,"isOffset":false,"isSlot":false,"src":"4115:4:4","valueSize":1},{"declaration":815,"isOffset":false,"isSlot":false,"src":"4127:3:4","valueSize":1}],"id":825,"nodeType":"InlineAssembly","src":"4080:67:4"},{"expression":{"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":826,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"4161:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4169:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4161:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":829,"nodeType":"ExpressionStatement","src":"4161:10:4"},{"expression":{"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":830,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"4186:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4193:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4186:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":833,"nodeType":"ExpressionStatement","src":"4186:9:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4043:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4050:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4043:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":835,"loopExpression":{"expression":{"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":821,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4054:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4061:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4054:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":824,"nodeType":"ExpressionStatement","src":"4054:9:4"},"nodeType":"ForStatement","src":"4036:171:4"},{"id":849,"nodeType":"UncheckedBlock","src":"4252:282:4","statements":[{"assignments":[837],"declarations":[{"constant":false,"id":837,"mutability":"mutable","name":"mask","nameLocation":"4285:4:4","nodeType":"VariableDeclaration","scope":849,"src":"4277:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":836,"name":"uint256","nodeType":"ElementaryTypeName","src":"4277:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":847,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4293:3:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4301:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":840,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4306:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4301:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":842,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4300:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4293:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":844,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4292:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4314:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4292:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4277:38:4"},{"AST":{"nodeType":"YulBlock","src":"4339:184:4","statements":[{"nodeType":"YulVariableDeclaration","src":"4358:41:4","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4383:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4377:5:4"},"nodeType":"YulFunctionCall","src":"4377:10:4"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4393:4:4"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4389:3:4"},"nodeType":"YulFunctionCall","src":"4389:9:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4373:3:4"},"nodeType":"YulFunctionCall","src":"4373:26:4"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"4362:7:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4417:38:4","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4443:4:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4437:5:4"},"nodeType":"YulFunctionCall","src":"4437:11:4"},{"name":"mask","nodeType":"YulIdentifier","src":"4450:4:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4433:3:4"},"nodeType":"YulFunctionCall","src":"4433:22:4"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"4421:8:4","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4480:4:4"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"4489:8:4"},{"name":"srcpart","nodeType":"YulIdentifier","src":"4499:7:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4486:2:4"},"nodeType":"YulFunctionCall","src":"4486:21:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4473:6:4"},"nodeType":"YulFunctionCall","src":"4473:35:4"},"nodeType":"YulExpressionStatement","src":"4473:35:4"}]},"evmVersion":"london","externalReferences":[{"declaration":812,"isOffset":false,"isSlot":false,"src":"4443:4:4","valueSize":1},{"declaration":812,"isOffset":false,"isSlot":false,"src":"4480:4:4","valueSize":1},{"declaration":837,"isOffset":false,"isSlot":false,"src":"4393:4:4","valueSize":1},{"declaration":837,"isOffset":false,"isSlot":false,"src":"4450:4:4","valueSize":1},{"declaration":815,"isOffset":false,"isSlot":false,"src":"4383:3:4","valueSize":1}],"id":848,"nodeType":"InlineAssembly","src":"4330:193:4"}]},{"expression":{"id":850,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"4553:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":782,"id":851,"nodeType":"Return","src":"4546:10:4"}]},"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"2709:365:4","text":" @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The start offset to write to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":853,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"3089:5:4","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"buf","nameLocation":"3119:3:4","nodeType":"VariableDeclaration","scope":853,"src":"3105:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":770,"nodeType":"UserDefinedTypeName","pathNode":{"id":769,"name":"buffer","nameLocations":["3105:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"3105:6:4"},"referencedDeclaration":643,"src":"3105:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"off","nameLocation":"3141:3:4","nodeType":"VariableDeclaration","scope":853,"src":"3133:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":775,"mutability":"mutable","name":"data","nameLocation":"3168:4:4","nodeType":"VariableDeclaration","scope":853,"src":"3155:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":774,"name":"bytes","nodeType":"ElementaryTypeName","src":"3155:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"len","nameLocation":"3191:3:4","nodeType":"VariableDeclaration","scope":853,"src":"3183:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3183:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3094:107:4"},"returnParameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":853,"src":"3225:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":780,"nodeType":"UserDefinedTypeName","pathNode":{"id":779,"name":"buffer","nameLocations":["3225:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"3225:6:4"},"referencedDeclaration":643,"src":"3225:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"3224:15:4"},"scope":1157,"src":"3080:1484:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":876,"nodeType":"Block","src":"5034:63:4","statements":[{"expression":{"arguments":[{"id":868,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"5058:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"expression":{"expression":{"id":869,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"5063:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5067:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"5063:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5071:6:4","memberName":"length","nodeType":"MemberAccess","src":"5063:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":872,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"5079:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":873,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"5085:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":867,"name":"write","nodeType":"Identifier","overloadedDeclarations":[853,1013],"referencedDeclaration":853,"src":"5052:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,bytes memory,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5052:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":866,"id":875,"nodeType":"Return","src":"5045:44:4"}]},"documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"4572:317:4","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":877,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4904:6:4","nodeType":"FunctionDefinition","parameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"buf","nameLocation":"4935:3:4","nodeType":"VariableDeclaration","scope":877,"src":"4921:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":856,"nodeType":"UserDefinedTypeName","pathNode":{"id":855,"name":"buffer","nameLocations":["4921:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"4921:6:4"},"referencedDeclaration":643,"src":"4921:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"data","nameLocation":"4962:4:4","nodeType":"VariableDeclaration","scope":877,"src":"4949:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":858,"name":"bytes","nodeType":"ElementaryTypeName","src":"4949:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"len","nameLocation":"4985:3:4","nodeType":"VariableDeclaration","scope":877,"src":"4977:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":860,"name":"uint256","nodeType":"ElementaryTypeName","src":"4977:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4910:85:4"},"returnParameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":877,"src":"5019:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":864,"nodeType":"UserDefinedTypeName","pathNode":{"id":863,"name":"buffer","nameLocations":["5019:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"5019:6:4"},"referencedDeclaration":643,"src":"5019:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"5018:15:4"},"scope":1157,"src":"4895:202:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":899,"nodeType":"Block","src":"5497:71:4","statements":[{"expression":{"arguments":[{"id":890,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"5521:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"expression":{"expression":{"id":891,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"5526:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5530:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"5526:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5534:6:4","memberName":"length","nodeType":"MemberAccess","src":"5526:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":894,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"5542:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":895,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"5548:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5553:6:4","memberName":"length","nodeType":"MemberAccess","src":"5548:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":889,"name":"write","nodeType":"Identifier","overloadedDeclarations":[853,1013],"referencedDeclaration":853,"src":"5515:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,bytes memory,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5515:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":888,"id":898,"nodeType":"Return","src":"5508:52:4"}]},"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"5105:269:4","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"5389:6:4","nodeType":"FunctionDefinition","parameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"buf","nameLocation":"5420:3:4","nodeType":"VariableDeclaration","scope":900,"src":"5406:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":880,"nodeType":"UserDefinedTypeName","pathNode":{"id":879,"name":"buffer","nameLocations":["5406:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"5406:6:4"},"referencedDeclaration":643,"src":"5406:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":883,"mutability":"mutable","name":"data","nameLocation":"5447:4:4","nodeType":"VariableDeclaration","scope":900,"src":"5434:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":882,"name":"bytes","nodeType":"ElementaryTypeName","src":"5434:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5395:63:4"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"5482:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":886,"nodeType":"UserDefinedTypeName","pathNode":{"id":885,"name":"buffer","nameLocations":["5482:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"5482:6:4"},"referencedDeclaration":643,"src":"5482:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"5481:15:4"},"scope":1157,"src":"5380:188:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":931,"nodeType":"Block","src":"6033:636:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":914,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"6048:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":915,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"6055:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6059:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"6055:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6048:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":927,"nodeType":"IfStatement","src":"6044:81:4","trueBody":{"id":926,"nodeType":"Block","src":"6069:56:4","statements":[{"expression":{"arguments":[{"id":919,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"6091:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":920,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"6096:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6100:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"6096:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6111:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6096:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":918,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"6084:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint256) pure"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6084:29:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":925,"nodeType":"ExpressionStatement","src":"6084:29:4"}]}},{"AST":{"nodeType":"YulBlock","src":"6146:495:4","statements":[{"nodeType":"YulVariableDeclaration","src":"6211:24:4","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"6231:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6225:5:4"},"nodeType":"YulFunctionCall","src":"6225:10:4"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"6215:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6296:27:4","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6316:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6310:5:4"},"nodeType":"YulFunctionCall","src":"6310:13:4"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"6300:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6408:37:4","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6428:6:4"},{"name":"off","nodeType":"YulIdentifier","src":"6436:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6424:3:4"},"nodeType":"YulFunctionCall","src":"6424:16:4"},{"kind":"number","nodeType":"YulLiteral","src":"6442:2:4","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6420:3:4"},"nodeType":"YulFunctionCall","src":"6420:25:4"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"6412:4:4","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6467:4:4"},{"name":"data","nodeType":"YulIdentifier","src":"6473:4:4"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"6459:7:4"},"nodeType":"YulFunctionCall","src":"6459:19:4"},"nodeType":"YulExpressionStatement","src":"6459:19:4"},{"body":{"nodeType":"YulBlock","src":"6566:64:4","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6592:6:4"},{"arguments":[{"name":"buflen","nodeType":"YulIdentifier","src":"6604:6:4"},{"kind":"number","nodeType":"YulLiteral","src":"6612:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6600:3:4"},"nodeType":"YulFunctionCall","src":"6600:14:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6585:6:4"},"nodeType":"YulFunctionCall","src":"6585:30:4"},"nodeType":"YulExpressionStatement","src":"6585:30:4"}]},"condition":{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"6553:3:4"},{"name":"buflen","nodeType":"YulIdentifier","src":"6558:6:4"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6550:2:4"},"nodeType":"YulFunctionCall","src":"6550:15:4"},"nodeType":"YulIf","src":"6547:83:4"}]},"evmVersion":"london","externalReferences":[{"declaration":904,"isOffset":false,"isSlot":false,"src":"6231:3:4","valueSize":1},{"declaration":908,"isOffset":false,"isSlot":false,"src":"6473:4:4","valueSize":1},{"declaration":906,"isOffset":false,"isSlot":false,"src":"6436:3:4","valueSize":1},{"declaration":906,"isOffset":false,"isSlot":false,"src":"6553:3:4","valueSize":1}],"id":928,"nodeType":"InlineAssembly","src":"6137:504:4"},{"expression":{"id":929,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"6658:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":913,"id":930,"nodeType":"Return","src":"6651:10:4"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"5576:315:4","text":" @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write the byte at.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":932,"implemented":true,"kind":"function","modifiers":[],"name":"writeUint8","nameLocation":"5906:10:4","nodeType":"FunctionDefinition","parameters":{"id":909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":904,"mutability":"mutable","name":"buf","nameLocation":"5941:3:4","nodeType":"VariableDeclaration","scope":932,"src":"5927:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":903,"nodeType":"UserDefinedTypeName","pathNode":{"id":902,"name":"buffer","nameLocations":["5927:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"5927:6:4"},"referencedDeclaration":643,"src":"5927:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":906,"mutability":"mutable","name":"off","nameLocation":"5963:3:4","nodeType":"VariableDeclaration","scope":932,"src":"5955:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"5955:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"data","nameLocation":"5983:4:4","nodeType":"VariableDeclaration","scope":932,"src":"5977:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":907,"name":"uint8","nodeType":"ElementaryTypeName","src":"5977:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5916:78:4"},"returnParameters":{"id":913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":932,"src":"6018:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":911,"nodeType":"UserDefinedTypeName","pathNode":{"id":910,"name":"buffer","nameLocations":["6018:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"6018:6:4"},"referencedDeclaration":643,"src":"6018:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"6017:15:4"},"scope":1157,"src":"5897:772:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":952,"nodeType":"Block","src":"7062:63:4","statements":[{"expression":{"arguments":[{"id":945,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"7091:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"expression":{"expression":{"id":946,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"7096:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7100:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"7096:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7104:6:4","memberName":"length","nodeType":"MemberAccess","src":"7096:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":949,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"7112:4:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":944,"name":"writeUint8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"7080:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_uint8_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,uint8) pure returns (struct BufferBase.buffer memory)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7080:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":943,"id":951,"nodeType":"Return","src":"7073:44:4"}]},"documentation":{"id":933,"nodeType":"StructuredDocumentation","src":"6677:264:4","text":" @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":953,"implemented":true,"kind":"function","modifiers":[],"name":"appendUint8","nameLocation":"6956:11:4","nodeType":"FunctionDefinition","parameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"buf","nameLocation":"6992:3:4","nodeType":"VariableDeclaration","scope":953,"src":"6978:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":935,"nodeType":"UserDefinedTypeName","pathNode":{"id":934,"name":"buffer","nameLocations":["6978:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"6978:6:4"},"referencedDeclaration":643,"src":"6978:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":938,"mutability":"mutable","name":"data","nameLocation":"7012:4:4","nodeType":"VariableDeclaration","scope":953,"src":"7006:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":937,"name":"uint8","nodeType":"ElementaryTypeName","src":"7006:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6967:56:4"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":953,"src":"7047:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":941,"nodeType":"UserDefinedTypeName","pathNode":{"id":940,"name":"buffer","nameLocations":["7047:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"7047:6:4"},"referencedDeclaration":643,"src":"7047:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"7046:15:4"},"scope":1157,"src":"6947:178:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1012,"nodeType":"Block","src":"7671:808:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":969,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"7686:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":970,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"7692:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7686:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":972,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"7698:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7702:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"7698:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7686:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":986,"nodeType":"IfStatement","src":"7682:85:4","trueBody":{"id":985,"nodeType":"Block","src":"7712:55:4","statements":[{"expression":{"arguments":[{"id":976,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"7734:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":977,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"7740:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":978,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"7746:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7740:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":980,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7739:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7753:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7739:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":975,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"7727:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint256) pure"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7727:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":984,"nodeType":"ExpressionStatement","src":"7727:28:4"}]}},{"id":1009,"nodeType":"UncheckedBlock","src":"7779:672:4","statements":[{"assignments":[988],"declarations":[{"constant":false,"id":988,"mutability":"mutable","name":"mask","nameLocation":"7812:4:4","nodeType":"VariableDeclaration","scope":1009,"src":"7804:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":987,"name":"uint256","nodeType":"ElementaryTypeName","src":"7804:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":995,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7820:3:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":990,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"7827:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7820:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":992,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7819:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7834:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7819:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7804:31:4"},{"expression":{"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":996,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"7883:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":997,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"7890:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7899:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7904:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1000,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"7909:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7904:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1002,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7903:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7898:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7883:31:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1007,"nodeType":"ExpressionStatement","src":"7883:31:4"},{"AST":{"nodeType":"YulBlock","src":"7938:502:4","statements":[{"nodeType":"YulVariableDeclaration","src":"8011:24:4","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"8031:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8025:5:4"},"nodeType":"YulFunctionCall","src":"8025:10:4"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"8015:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8134:38:4","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8154:6:4"},{"name":"off","nodeType":"YulIdentifier","src":"8162:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8150:3:4"},"nodeType":"YulFunctionCall","src":"8150:16:4"},{"name":"len","nodeType":"YulIdentifier","src":"8168:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8146:3:4"},"nodeType":"YulFunctionCall","src":"8146:26:4"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"8138:4:4","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8197:4:4"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8216:4:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8210:5:4"},"nodeType":"YulFunctionCall","src":"8210:11:4"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"8227:4:4"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8223:3:4"},"nodeType":"YulFunctionCall","src":"8223:9:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8206:3:4"},"nodeType":"YulFunctionCall","src":"8206:27:4"},{"name":"data","nodeType":"YulIdentifier","src":"8235:4:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8203:2:4"},"nodeType":"YulFunctionCall","src":"8203:37:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8190:6:4"},"nodeType":"YulFunctionCall","src":"8190:51:4"},"nodeType":"YulExpressionStatement","src":"8190:51:4"},{"body":{"nodeType":"YulBlock","src":"8354:71:4","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8384:6:4"},{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"8396:3:4"},{"name":"len","nodeType":"YulIdentifier","src":"8401:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8392:3:4"},"nodeType":"YulFunctionCall","src":"8392:13:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8377:6:4"},"nodeType":"YulFunctionCall","src":"8377:29:4"},"nodeType":"YulExpressionStatement","src":"8377:29:4"}]},"condition":{"arguments":[{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"8328:3:4"},{"name":"len","nodeType":"YulIdentifier","src":"8333:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8324:3:4"},"nodeType":"YulFunctionCall","src":"8324:13:4"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8345:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8339:5:4"},"nodeType":"YulFunctionCall","src":"8339:13:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8321:2:4"},"nodeType":"YulFunctionCall","src":"8321:32:4"},"nodeType":"YulIf","src":"8318:107:4"}]},"evmVersion":"london","externalReferences":[{"declaration":957,"isOffset":false,"isSlot":false,"src":"8031:3:4","valueSize":1},{"declaration":961,"isOffset":false,"isSlot":false,"src":"8235:4:4","valueSize":1},{"declaration":963,"isOffset":false,"isSlot":false,"src":"8168:3:4","valueSize":1},{"declaration":963,"isOffset":false,"isSlot":false,"src":"8333:3:4","valueSize":1},{"declaration":963,"isOffset":false,"isSlot":false,"src":"8401:3:4","valueSize":1},{"declaration":988,"isOffset":false,"isSlot":false,"src":"8227:4:4","valueSize":1},{"declaration":959,"isOffset":false,"isSlot":false,"src":"8162:3:4","valueSize":1},{"declaration":959,"isOffset":false,"isSlot":false,"src":"8328:3:4","valueSize":1},{"declaration":959,"isOffset":false,"isSlot":false,"src":"8396:3:4","valueSize":1}],"id":1008,"nodeType":"InlineAssembly","src":"7929:511:4"}]},{"expression":{"id":1010,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"8468:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":968,"id":1011,"nodeType":"Return","src":"8461:10:4"}]},"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"7133:378:4","text":" @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @param len The number of bytes to write (left-aligned).\n @return The original buffer, for chaining."},"id":1013,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"7526:5:4","nodeType":"FunctionDefinition","parameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":957,"mutability":"mutable","name":"buf","nameLocation":"7556:3:4","nodeType":"VariableDeclaration","scope":1013,"src":"7542:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":956,"nodeType":"UserDefinedTypeName","pathNode":{"id":955,"name":"buffer","nameLocations":["7542:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"7542:6:4"},"referencedDeclaration":643,"src":"7542:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"off","nameLocation":"7578:3:4","nodeType":"VariableDeclaration","scope":1013,"src":"7570:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":958,"name":"uint256","nodeType":"ElementaryTypeName","src":"7570:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":961,"mutability":"mutable","name":"data","nameLocation":"7600:4:4","nodeType":"VariableDeclaration","scope":1013,"src":"7592:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7592:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":963,"mutability":"mutable","name":"len","nameLocation":"7623:3:4","nodeType":"VariableDeclaration","scope":1013,"src":"7615:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":962,"name":"uint256","nodeType":"ElementaryTypeName","src":"7615:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7531:102:4"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1013,"src":"7656:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":966,"nodeType":"UserDefinedTypeName","pathNode":{"id":965,"name":"buffer","nameLocations":["7656:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"7656:6:4"},"referencedDeclaration":643,"src":"7656:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"7655:15:4"},"scope":1157,"src":"7517:962:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1037,"nodeType":"Block","src":"8942:60:4","statements":[{"expression":{"arguments":[{"id":1028,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"8966:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"id":1029,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"8971:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1032,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"8984:4:4","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8976:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8976:7:4","typeDescriptions":{}}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":1034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8991:2:4","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":1027,"name":"write","nodeType":"Identifier","overloadedDeclarations":[853,1013],"referencedDeclaration":1013,"src":"8960:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8960:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":1026,"id":1036,"nodeType":"Return","src":"8953:41:4"}]},"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"8487:309:4","text":" @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"writeBytes20","nameLocation":"8811:12:4","nodeType":"FunctionDefinition","parameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"buf","nameLocation":"8848:3:4","nodeType":"VariableDeclaration","scope":1038,"src":"8834:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1016,"nodeType":"UserDefinedTypeName","pathNode":{"id":1015,"name":"buffer","nameLocations":["8834:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"8834:6:4"},"referencedDeclaration":643,"src":"8834:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"off","nameLocation":"8870:3:4","nodeType":"VariableDeclaration","scope":1038,"src":"8862:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1018,"name":"uint256","nodeType":"ElementaryTypeName","src":"8862:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1021,"mutability":"mutable","name":"data","nameLocation":"8892:4:4","nodeType":"VariableDeclaration","scope":1038,"src":"8884:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1020,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8884:7:4","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"8823:80:4"},"returnParameters":{"id":1026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1025,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1038,"src":"8927:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1024,"nodeType":"UserDefinedTypeName","pathNode":{"id":1023,"name":"buffer","nameLocations":["8927:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"8927:6:4"},"referencedDeclaration":643,"src":"8927:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"8926:15:4"},"scope":1157,"src":"8802:200:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1062,"nodeType":"Block","src":"9403:71:4","statements":[{"expression":{"arguments":[{"id":1051,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"9427:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"expression":{"expression":{"id":1052,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"9432:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9436:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"9432:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9440:6:4","memberName":"length","nodeType":"MemberAccess","src":"9432:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1057,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"9456:4:4","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9448:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1055,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9448:7:4","typeDescriptions":{}}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9448:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9463:2:4","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":1050,"name":"write","nodeType":"Identifier","overloadedDeclarations":[853,1013],"referencedDeclaration":1013,"src":"9421:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9421:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":1049,"id":1061,"nodeType":"Return","src":"9414:52:4"}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"9010:268:4","text":" @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chhaining."},"id":1063,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes20","nameLocation":"9293:13:4","nodeType":"FunctionDefinition","parameters":{"id":1045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"buf","nameLocation":"9331:3:4","nodeType":"VariableDeclaration","scope":1063,"src":"9317:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1041,"nodeType":"UserDefinedTypeName","pathNode":{"id":1040,"name":"buffer","nameLocations":["9317:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"9317:6:4"},"referencedDeclaration":643,"src":"9317:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":1044,"mutability":"mutable","name":"data","nameLocation":"9353:4:4","nodeType":"VariableDeclaration","scope":1063,"src":"9345:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1043,"name":"bytes20","nodeType":"ElementaryTypeName","src":"9345:7:4","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"9306:58:4"},"returnParameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1063,"src":"9388:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1047,"nodeType":"UserDefinedTypeName","pathNode":{"id":1046,"name":"buffer","nameLocations":["9388:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"9388:6:4"},"referencedDeclaration":643,"src":"9388:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"9387:15:4"},"scope":1157,"src":"9284:190:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1084,"nodeType":"Block","src":"9874:62:4","statements":[{"expression":{"arguments":[{"id":1076,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"9898:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"expression":{"expression":{"id":1077,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"9903:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1078,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9907:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"9903:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9911:6:4","memberName":"length","nodeType":"MemberAccess","src":"9903:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1080,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"9919:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3332","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9925:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":1075,"name":"write","nodeType":"Identifier","overloadedDeclarations":[853,1013],"referencedDeclaration":1013,"src":"9892:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9892:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":1074,"id":1083,"nodeType":"Return","src":"9885:43:4"}]},"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"9482:267:4","text":" @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1085,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes32","nameLocation":"9764:13:4","nodeType":"FunctionDefinition","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"buf","nameLocation":"9802:3:4","nodeType":"VariableDeclaration","scope":1085,"src":"9788:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1066,"nodeType":"UserDefinedTypeName","pathNode":{"id":1065,"name":"buffer","nameLocations":["9788:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"9788:6:4"},"referencedDeclaration":643,"src":"9788:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":1069,"mutability":"mutable","name":"data","nameLocation":"9824:4:4","nodeType":"VariableDeclaration","scope":1085,"src":"9816:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9816:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9777:58:4"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1085,"src":"9859:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1072,"nodeType":"UserDefinedTypeName","pathNode":{"id":1071,"name":"buffer","nameLocations":["9859:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"9859:6:4"},"referencedDeclaration":643,"src":"9859:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"9858:15:4"},"scope":1157,"src":"9755:181:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"10482:649:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1101,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"10497:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1102,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"10503:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10497:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1104,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"10509:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1105,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10513:8:4","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":642,"src":"10509:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10497:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1118,"nodeType":"IfStatement","src":"10493:85:4","trueBody":{"id":1117,"nodeType":"Block","src":"10523:55:4","statements":[{"expression":{"arguments":[{"id":1108,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"10545:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1109,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"10551:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1110,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"10557:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10551:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1112,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10550:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10564:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10550:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1107,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"10538:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferBase.buffer memory,uint256) pure"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10538:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1116,"nodeType":"ExpressionStatement","src":"10538:28:4"}]}},{"assignments":[1120],"declarations":[{"constant":false,"id":1120,"mutability":"mutable","name":"mask","nameLocation":"10598:4:4","nodeType":"VariableDeclaration","scope":1131,"src":"10590:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"10590:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1127,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10606:3:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1122,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"10613:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10606:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1124,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10605:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10620:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10605:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10590:31:4"},{"AST":{"nodeType":"YulBlock","src":"10641:462:4","statements":[{"nodeType":"YulVariableDeclaration","src":"10706:24:4","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"10726:3:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10720:5:4"},"nodeType":"YulFunctionCall","src":"10720:10:4"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"10710:6:4","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10821:38:4","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"10841:6:4"},{"name":"off","nodeType":"YulIdentifier","src":"10849:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10837:3:4"},"nodeType":"YulFunctionCall","src":"10837:16:4"},{"name":"len","nodeType":"YulIdentifier","src":"10855:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10833:3:4"},"nodeType":"YulFunctionCall","src":"10833:26:4"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"10825:4:4","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"10880:4:4"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"10899:4:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10893:5:4"},"nodeType":"YulFunctionCall","src":"10893:11:4"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"10910:4:4"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10906:3:4"},"nodeType":"YulFunctionCall","src":"10906:9:4"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10889:3:4"},"nodeType":"YulFunctionCall","src":"10889:27:4"},{"name":"data","nodeType":"YulIdentifier","src":"10918:4:4"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10886:2:4"},"nodeType":"YulFunctionCall","src":"10886:37:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10873:6:4"},"nodeType":"YulFunctionCall","src":"10873:51:4"},"nodeType":"YulExpressionStatement","src":"10873:51:4"},{"body":{"nodeType":"YulBlock","src":"11029:63:4","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"11055:6:4"},{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"11067:3:4"},{"name":"len","nodeType":"YulIdentifier","src":"11072:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11063:3:4"},"nodeType":"YulFunctionCall","src":"11063:13:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11048:6:4"},"nodeType":"YulFunctionCall","src":"11048:29:4"},"nodeType":"YulExpressionStatement","src":"11048:29:4"}]},"condition":{"arguments":[{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"11003:3:4"},{"name":"len","nodeType":"YulIdentifier","src":"11008:3:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10999:3:4"},"nodeType":"YulFunctionCall","src":"10999:13:4"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"11020:6:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11014:5:4"},"nodeType":"YulFunctionCall","src":"11014:13:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10996:2:4"},"nodeType":"YulFunctionCall","src":"10996:32:4"},"nodeType":"YulIf","src":"10993:99:4"}]},"evmVersion":"london","externalReferences":[{"declaration":1089,"isOffset":false,"isSlot":false,"src":"10726:3:4","valueSize":1},{"declaration":1093,"isOffset":false,"isSlot":false,"src":"10918:4:4","valueSize":1},{"declaration":1095,"isOffset":false,"isSlot":false,"src":"10855:3:4","valueSize":1},{"declaration":1095,"isOffset":false,"isSlot":false,"src":"11008:3:4","valueSize":1},{"declaration":1095,"isOffset":false,"isSlot":false,"src":"11072:3:4","valueSize":1},{"declaration":1120,"isOffset":false,"isSlot":false,"src":"10910:4:4","valueSize":1},{"declaration":1091,"isOffset":false,"isSlot":false,"src":"10849:3:4","valueSize":1},{"declaration":1091,"isOffset":false,"isSlot":false,"src":"11003:3:4","valueSize":1},{"declaration":1091,"isOffset":false,"isSlot":false,"src":"11067:3:4","valueSize":1}],"id":1128,"nodeType":"InlineAssembly","src":"10632:471:4"},{"expression":{"id":1129,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"11120:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":1100,"id":1130,"nodeType":"Return","src":"11113:10:4"}]},"documentation":{"id":1086,"nodeType":"StructuredDocumentation","src":"9944:375:4","text":" @dev Writes an integer to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @param len The number of bytes to write (right-aligned).\n @return The original buffer, for chaining."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt","nameLocation":"10334:8:4","nodeType":"FunctionDefinition","parameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"buf","nameLocation":"10367:3:4","nodeType":"VariableDeclaration","scope":1132,"src":"10353:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1088,"nodeType":"UserDefinedTypeName","pathNode":{"id":1087,"name":"buffer","nameLocations":["10353:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"10353:6:4"},"referencedDeclaration":643,"src":"10353:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"off","nameLocation":"10389:3:4","nodeType":"VariableDeclaration","scope":1132,"src":"10381:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"10381:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"data","nameLocation":"10411:4:4","nodeType":"VariableDeclaration","scope":1132,"src":"10403:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1092,"name":"uint256","nodeType":"ElementaryTypeName","src":"10403:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"len","nameLocation":"10434:3:4","nodeType":"VariableDeclaration","scope":1132,"src":"10426:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1094,"name":"uint256","nodeType":"ElementaryTypeName","src":"10426:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10342:102:4"},"returnParameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1132,"src":"10467:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1098,"nodeType":"UserDefinedTypeName","pathNode":{"id":1097,"name":"buffer","nameLocations":["10467:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"10467:6:4"},"referencedDeclaration":643,"src":"10467:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"10466:15:4"},"scope":1157,"src":"10325:806:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1155,"nodeType":"Block","src":"11538:66:4","statements":[{"expression":{"arguments":[{"id":1147,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"11565:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},{"expression":{"expression":{"id":1148,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"11570:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11574:3:4","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"11570:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11578:6:4","memberName":"length","nodeType":"MemberAccess","src":"11570:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1151,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"11586:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1152,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"11592:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1146,"name":"writeInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"11556:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,uint256,uint256,uint256) pure returns (struct BufferBase.buffer memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11556:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"functionReturnParameters":1145,"id":1154,"nodeType":"Return","src":"11549:47:4"}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"11139:256:4","text":" @dev Appends a byte to the end of the buffer. Resizes if doing so would\n exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer."},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"appendInt","nameLocation":"11410:9:4","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"buf","nameLocation":"11444:3:4","nodeType":"VariableDeclaration","scope":1156,"src":"11430:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1135,"nodeType":"UserDefinedTypeName","pathNode":{"id":1134,"name":"buffer","nameLocations":["11430:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"11430:6:4"},"referencedDeclaration":643,"src":"11430:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"},{"constant":false,"id":1138,"mutability":"mutable","name":"data","nameLocation":"11466:4:4","nodeType":"VariableDeclaration","scope":1156,"src":"11458:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"11458:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"len","nameLocation":"11489:3:4","nodeType":"VariableDeclaration","scope":1156,"src":"11481:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"11481:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11419:80:4"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1156,"src":"11523:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1143,"nodeType":"UserDefinedTypeName","pathNode":{"id":1142,"name":"buffer","nameLocations":["11523:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"11523:6:4"},"referencedDeclaration":643,"src":"11523:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"src":"11522:15:4"},"scope":1157,"src":"11401:203:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1158,"src":"452:11155:4","usedErrors":[]}],"src":"33:11574:4"},"id":4},"contracts/lib/RequestLib.sol":{"ast":{"absolutePath":"contracts/lib/RequestLib.sol","exportedSymbols":{"Buffer":[635],"BufferBase":[1157],"RequestLib":[1291]},"id":1292,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1159,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"40:23:5"},{"absolutePath":"contracts/lib/Buffer.sol","file":"./Buffer.sol","id":1161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1292,"sourceUnit":636,"src":"67:36:5","symbolAliases":[{"foreign":{"id":1160,"name":"Buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"75:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/lib/BufferBase.sol","file":"./BufferBase.sol","id":1163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1292,"sourceUnit":1158,"src":"105:44:5","symbolAliases":[{"foreign":{"id":1162,"name":"BufferBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"113:10:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"RequestLib","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1291,"linearizedBaseContracts":[1291],"name":"RequestLib","nameLocation":"161:10:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1167,"libraryName":{"id":1164,"name":"Buffer","nameLocations":["183:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":635,"src":"183:6:5"},"nodeType":"UsingForDirective","src":"177:35:5","typeName":{"id":1166,"nodeType":"UserDefinedTypeName","pathNode":{"id":1165,"name":"BufferBase.buffer","nameLocations":["194:10:5","205:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"194:17:5"},"referencedDeclaration":643,"src":"194:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}}},{"canonicalName":"RequestLib.Request","id":1177,"members":[{"constant":false,"id":1169,"mutability":"mutable","name":"id","nameLocation":"248:2:5","nodeType":"VariableDeclaration","scope":1177,"src":"240:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"240:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"callbackAddress","nameLocation":"265:15:5","nodeType":"VariableDeclaration","scope":1177,"src":"257:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"callbackFunctionId","nameLocation":"294:18:5","nodeType":"VariableDeclaration","scope":1177,"src":"287:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1172,"name":"bytes4","nodeType":"ElementaryTypeName","src":"287:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":1176,"mutability":"mutable","name":"requestData","nameLocation":"337:11:5","nodeType":"VariableDeclaration","scope":1177,"src":"319:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"},"typeName":{"id":1175,"nodeType":"UserDefinedTypeName","pathNode":{"id":1174,"name":"BufferBase.buffer","nameLocations":["319:10:5","330:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":643,"src":"319:17:5"},"referencedDeclaration":643,"src":"319:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_storage_ptr","typeString":"struct BufferBase.buffer"}},"visibility":"internal"}],"name":"Request","nameLocation":"225:7:5","nodeType":"StructDefinition","scope":1291,"src":"218:136:5","visibility":"public"},{"body":{"id":1204,"nodeType":"Block","src":"503:111:5","statements":[{"expression":{"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1190,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"510:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"515:15:5","memberName":"callbackAddress","nodeType":"MemberAccess","referencedDeclaration":1171,"src":"510:20:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1193,"name":"callbackAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"533:12:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"510:35:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1195,"nodeType":"ExpressionStatement","src":"510:35:5"},{"expression":{"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1196,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"552:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1198,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"557:18:5","memberName":"callbackFunctionId","nodeType":"MemberAccess","referencedDeclaration":1173,"src":"552:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1199,"name":"callbackFunc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"578:12:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"552:38:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1201,"nodeType":"ExpressionStatement","src":"552:38:5"},{"expression":{"id":1202,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"604:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"functionReturnParameters":1189,"id":1203,"nodeType":"Return","src":"597:11:5"}]},"id":1205,"implemented":true,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"369:10:5","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"mutability":"mutable","name":"self","nameLocation":"401:4:5","nodeType":"VariableDeclaration","scope":1205,"src":"386:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1179,"nodeType":"UserDefinedTypeName","pathNode":{"id":1178,"name":"Request","nameLocations":["386:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"386:7:5"},"referencedDeclaration":1177,"src":"386:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"},{"constant":false,"id":1182,"mutability":"mutable","name":"callbackAddr","nameLocation":"420:12:5","nodeType":"VariableDeclaration","scope":1205,"src":"412:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"412:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"callbackFunc","nameLocation":"446:12:5","nodeType":"VariableDeclaration","scope":1205,"src":"439:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1183,"name":"bytes4","nodeType":"ElementaryTypeName","src":"439:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"379:84:5"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1205,"src":"487:14:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1187,"nodeType":"UserDefinedTypeName","pathNode":{"id":1186,"name":"Request","nameLocations":["487:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"487:7:5"},"referencedDeclaration":1177,"src":"487:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"}],"src":"486:16:5"},"scope":1291,"src":"360:254:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1219,"nodeType":"Block","src":"682:25:5","statements":[{"expression":{"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1213,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"689:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1215,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"694:2:5","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"689:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1216,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"699:2:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"689:12:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1218,"nodeType":"ExpressionStatement","src":"689:12:5"}]},"id":1220,"implemented":true,"kind":"function","modifiers":[],"name":"setId","nameLocation":"629:5:5","nodeType":"FunctionDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"self","nameLocation":"650:4:5","nodeType":"VariableDeclaration","scope":1220,"src":"635:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1207,"nodeType":"UserDefinedTypeName","pathNode":{"id":1206,"name":"Request","nameLocations":["635:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"635:7:5"},"referencedDeclaration":1177,"src":"635:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"},{"constant":false,"id":1210,"mutability":"mutable","name":"id","nameLocation":"664:2:5","nodeType":"VariableDeclaration","scope":1220,"src":"656:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1209,"name":"bytes32","nodeType":"ElementaryTypeName","src":"656:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"634:33:5"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[],"src":"682:0:5"},"scope":1291,"src":"620:87:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1246,"nodeType":"Block","src":"801:90:5","statements":[{"expression":{"arguments":[{"id":1235,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"838:3:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":1230,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"808:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"813:11:5","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"808:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"825:12:5","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":598,"src":"808:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,string memory) pure"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"808:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1237,"nodeType":"ExpressionStatement","src":"808:34:5"},{"expression":{"arguments":[{"id":1243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"879:5:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":1238,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"849:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"854:11:5","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"849:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"866:12:5","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":598,"src":"849:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,string memory) pure"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"849:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1245,"nodeType":"ExpressionStatement","src":"849:36:5"}]},"id":1247,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"722:3:5","nodeType":"FunctionDefinition","parameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"self","nameLocation":"741:4:5","nodeType":"VariableDeclaration","scope":1247,"src":"726:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1222,"nodeType":"UserDefinedTypeName","pathNode":{"id":1221,"name":"Request","nameLocations":["726:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"726:7:5"},"referencedDeclaration":1177,"src":"726:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"},{"constant":false,"id":1225,"mutability":"mutable","name":"key","nameLocation":"761:3:5","nodeType":"VariableDeclaration","scope":1247,"src":"747:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1224,"name":"string","nodeType":"ElementaryTypeName","src":"747:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1227,"mutability":"mutable","name":"value","nameLocation":"780:5:5","nodeType":"VariableDeclaration","scope":1247,"src":"766:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1226,"name":"string","nodeType":"ElementaryTypeName","src":"766:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"725:61:5"},"returnParameters":{"id":1229,"nodeType":"ParameterList","parameters":[],"src":"801:0:5"},"scope":1291,"src":"713:178:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1289,"nodeType":"Block","src":"997:186:5","statements":[{"expression":{"arguments":[{"hexValue":"2068656164657228","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1034:10:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_fbdce2aaa7826403ec6d5dacc6927e84cd29a890755eba7d14eed6c5ed7d04e7","typeString":"literal_string \" header(\""},"value":" header("}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fbdce2aaa7826403ec6d5dacc6927e84cd29a890755eba7d14eed6c5ed7d04e7","typeString":"literal_string \" header(\""}],"expression":{"expression":{"id":1257,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1004:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1009:11:5","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"1004:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1021:12:5","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":598,"src":"1004:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,string memory) pure"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1004:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1264,"nodeType":"ExpressionStatement","src":"1004:41:5"},{"expression":{"arguments":[{"id":1270,"name":"headerKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1082:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":1265,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1052:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1057:11:5","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"1052:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1269,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1069:12:5","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":598,"src":"1052:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,string memory) pure"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1052:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1272,"nodeType":"ExpressionStatement","src":"1052:40:5"},{"expression":{"arguments":[{"id":1278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"1129:5:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"expression":{"id":1273,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1099:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1276,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1104:11:5","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"1099:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1116:12:5","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":598,"src":"1099:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,string memory) pure"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1099:36:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1280,"nodeType":"ExpressionStatement","src":"1099:36:5"},{"expression":{"arguments":[{"hexValue":"2920","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1172:4:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2488c79a9a5ed1a1bcdeb4e9163be0d9f74a90412fde70f7d7d252dc641271d7","typeString":"literal_string \") \""},"value":") "}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2488c79a9a5ed1a1bcdeb4e9163be0d9f74a90412fde70f7d7d252dc641271d7","typeString":"literal_string \") \""}],"expression":{"expression":{"id":1281,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"1142:4:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1147:11:5","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"1142:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1159:12:5","memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":598,"src":"1142:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$643_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$643_memory_ptr_$","typeString":"function (struct BufferBase.buffer memory,string memory) pure"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1142:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1288,"nodeType":"ExpressionStatement","src":"1142:35:5"}]},"id":1290,"implemented":true,"kind":"function","modifiers":[],"name":"addHeader","nameLocation":"906:9:5","nodeType":"FunctionDefinition","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"self","nameLocation":"931:4:5","nodeType":"VariableDeclaration","scope":1290,"src":"916:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1249,"nodeType":"UserDefinedTypeName","pathNode":{"id":1248,"name":"Request","nameLocations":["916:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"916:7:5"},"referencedDeclaration":1177,"src":"916:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"},{"constant":false,"id":1252,"mutability":"mutable","name":"headerKey","nameLocation":"951:9:5","nodeType":"VariableDeclaration","scope":1290,"src":"937:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1251,"name":"string","nodeType":"ElementaryTypeName","src":"937:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"value","nameLocation":"976:5:5","nodeType":"VariableDeclaration","scope":1290,"src":"962:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1253,"name":"string","nodeType":"ElementaryTypeName","src":"962:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"915:67:5"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[],"src":"997:0:5"},"scope":1291,"src":"897:286:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1292,"src":"153:1033:5","usedErrors":[]}],"src":"40:1146:5"},"id":5},"contracts/pull/HttpRequestOracle.sol":{"ast":{"absolutePath":"contracts/pull/HttpRequestOracle.sol","exportedSymbols":{"Buffer":[635],"BufferBase":[1157],"Context":[134],"HttpRequestOracle":[1396],"OnlyReporter":[1297],"Ownable":[112],"RequestLib":[1291]},"id":1397,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1293,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"40:23:6"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1397,"sourceUnit":113,"src":"67:52:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/RequestLib.sol","file":"../lib/RequestLib.sol","id":1295,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1397,"sourceUnit":1292,"src":"121:31:6","symbolAliases":[],"unitAlias":""},{"errorSelector":"87567bd9","id":1297,"name":"OnlyReporter","nameLocation":"162:12:6","nodeType":"ErrorDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[],"src":"174:2:6"},"src":"156:21:6"},{"abstract":false,"baseContracts":[{"baseName":{"id":1298,"name":"Ownable","nameLocations":["211:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"211:7:6"},"id":1299,"nodeType":"InheritanceSpecifier","src":"211:7:6"}],"canonicalName":"HttpRequestOracle","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1396,"linearizedBaseContracts":[1396,112,134],"name":"HttpRequestOracle","nameLocation":"190:17:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1303,"libraryName":{"id":1300,"name":"RequestLib","nameLocations":["230:10:6"],"nodeType":"IdentifierPath","referencedDeclaration":1291,"src":"230:10:6"},"nodeType":"UsingForDirective","src":"224:40:6","typeName":{"id":1302,"nodeType":"UserDefinedTypeName","pathNode":{"id":1301,"name":"RequestLib.Request","nameLocations":["245:10:6","256:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"245:18:6"},"referencedDeclaration":1177,"src":"245:18:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}}},{"constant":false,"id":1307,"mutability":"mutable","name":"reporters","nameLocation":"295:9:6","nodeType":"VariableDeclaration","scope":1396,"src":"270:34:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1306,"keyType":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"278:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"270:24:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1305,"name":"bool","nodeType":"ElementaryTypeName","src":"289:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"afb0931d973a0c62c636ef23ddd0b58b890a9bf7c77bca04c2ffbb30f61a8e86","id":1313,"name":"RequestSent","nameLocation":"317:11:6","nodeType":"EventDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"345:2:6","nodeType":"VariableDeclaration","scope":1313,"src":"329:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"329:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1311,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"355:4:6","nodeType":"VariableDeclaration","scope":1313,"src":"349:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1310,"name":"bytes","nodeType":"ElementaryTypeName","src":"349:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"328:32:6"},"src":"311:50:6"},{"anonymous":false,"eventSelector":"85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6","id":1317,"name":"RequestFulfilled","nameLocation":"371:16:6","nodeType":"EventDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"404:2:6","nodeType":"VariableDeclaration","scope":1317,"src":"388:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"388:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"387:20:6"},"src":"365:43:6"},{"anonymous":false,"eventSelector":"f903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb22","id":1321,"name":"RequestCancelled","nameLocation":"418:16:6","nodeType":"EventDefinition","parameters":{"id":1320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"451:2:6","nodeType":"VariableDeclaration","scope":1321,"src":"435:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"435:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"434:20:6"},"src":"412:43:6"},{"body":{"id":1336,"nodeType":"Block","src":"546:52:6","statements":[{"expression":{"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1330,"name":"reporters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"553:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1332,"indexExpression":{"id":1331,"name":"reporterAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"563:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"553:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1333,"name":"isReporter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"582:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"553:39:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1335,"nodeType":"ExpressionStatement","src":"553:39:6"}]},"functionSelector":"1ec6e24f","id":1337,"implemented":true,"kind":"function","modifiers":[{"id":1328,"kind":"modifierInvocation","modifierName":{"id":1327,"name":"onlyOwner","nameLocations":["536:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"536:9:6"},"nodeType":"ModifierInvocation","src":"536:9:6"}],"name":"updateReporter","nameLocation":"470:14:6","nodeType":"FunctionDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"reporterAddress","nameLocation":"493:15:6","nodeType":"VariableDeclaration","scope":1337,"src":"485:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"485:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"isReporter","nameLocation":"515:10:6","nodeType":"VariableDeclaration","scope":1337,"src":"510:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1324,"name":"bool","nodeType":"ElementaryTypeName","src":"510:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"484:42:6"},"returnParameters":{"id":1329,"nodeType":"ParameterList","parameters":[],"src":"546:0:6"},"scope":1396,"src":"461:137:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1348,"nodeType":"Block","src":"679:46:6","statements":[{"expression":{"baseExpression":{"id":1344,"name":"reporters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"693:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1346,"indexExpression":{"id":1345,"name":"reporterAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"703:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"693:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1343,"id":1347,"nodeType":"Return","src":"686:33:6"}]},"functionSelector":"732995af","id":1349,"implemented":true,"kind":"function","modifiers":[],"name":"getReporter","nameLocation":"613:11:6","nodeType":"FunctionDefinition","parameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"reporterAddress","nameLocation":"633:15:6","nodeType":"VariableDeclaration","scope":1349,"src":"625:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"625:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"624:25:6"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1349,"src":"673:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1341,"name":"bool","nodeType":"ElementaryTypeName","src":"673:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"672:6:6"},"scope":1396,"src":"604:121:6","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1360,"nodeType":"Block","src":"806:46:6","statements":[{"expression":{"baseExpression":{"id":1356,"name":"reporters","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"820:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1358,"indexExpression":{"id":1357,"name":"reporterAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"830:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"820:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1355,"id":1359,"nodeType":"Return","src":"813:33:6"}]},"id":1361,"implemented":true,"kind":"function","modifiers":[],"name":"_hasReporter","nameLocation":"740:12:6","nodeType":"FunctionDefinition","parameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"reporterAddress","nameLocation":"761:15:6","nodeType":"VariableDeclaration","scope":1361,"src":"753:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1350,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:25:6"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1361,"src":"800:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1353,"name":"bool","nodeType":"ElementaryTypeName","src":"800:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"799:6:6"},"scope":1396,"src":"731:121:6","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1394,"nodeType":"Block","src":"937:250:6","statements":[{"assignments":[1370],"declarations":[{"constant":false,"id":1370,"mutability":"mutable","name":"encodedRequest","nameLocation":"957:14:6","nodeType":"VariableDeclaration","scope":1394,"src":"944:27:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1369,"name":"bytes","nodeType":"ElementaryTypeName","src":"944:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1384,"initialValue":{"arguments":[{"expression":{"expression":{"id":1373,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1005:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1010:14:6","memberName":"updateReporter","nodeType":"MemberAccess","referencedDeclaration":1337,"src":"1005:19:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) external"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1025:8:6","memberName":"selector","nodeType":"MemberAccess","src":"1005:28:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"expression":{"id":1376,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1042:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1046:2:6","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"1042:6:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1378,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1057:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1061:18:6","memberName":"callbackFunctionId","nodeType":"MemberAccess","referencedDeclaration":1173,"src":"1057:22:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"expression":{"expression":{"id":1380,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1088:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1092:11:6","memberName":"requestData","nodeType":"MemberAccess","referencedDeclaration":1176,"src":"1088:15:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$643_memory_ptr","typeString":"struct BufferBase.buffer memory"}},"id":1382,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1104:3:6","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":640,"src":"1088:19:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1371,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"974:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"978:18:6","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"974:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"974:140:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"944:170:6"},{"eventCall":{"arguments":[{"expression":{"id":1386,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1138:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1387,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1142:2:6","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"1138:6:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1388,"name":"encodedRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"1146:14:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1385,"name":"RequestSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"1126:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory)"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1390,"nodeType":"EmitStatement","src":"1121:40:6"},{"expression":{"expression":{"id":1391,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1175:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1392,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1179:2:6","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"1175:6:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1368,"id":1393,"nodeType":"Return","src":"1168:13:6"}]},"functionSelector":"215d35cc","id":1395,"implemented":true,"kind":"function","modifiers":[],"name":"sendRequest","nameLocation":"867:11:6","nodeType":"FunctionDefinition","parameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"req","nameLocation":"905:3:6","nodeType":"VariableDeclaration","scope":1395,"src":"879:29:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1363,"nodeType":"UserDefinedTypeName","pathNode":{"id":1362,"name":"RequestLib.Request","nameLocations":["879:10:6","890:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"879:18:6"},"referencedDeclaration":1177,"src":"879:18:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"}],"src":"878:31:6"},"returnParameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1395,"src":"928:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"928:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"927:9:6"},"scope":1396,"src":"858:329:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1397,"src":"181:1009:6","usedErrors":[]}],"src":"40:1150:6"},"id":6},"contracts/pull/HttpRequestWithHeader.sol":{"ast":{"absolutePath":"contracts/pull/HttpRequestWithHeader.sol","exportedSymbols":{"Buffer":[635],"BufferBase":[1157],"Context":[134],"HttpRequestConsumerWithHeader":[1508],"HttpRequestOracle":[1396],"OnlyReporter":[1297],"Ownable":[112],"RequestConsumer":[1541],"RequestLib":[1291]},"id":1509,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1398,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"40:23:7"},{"absolutePath":"contracts/pull/HttpRequestOracle.sol","file":"./HttpRequestOracle.sol","id":1399,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1509,"sourceUnit":1397,"src":"67:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/pull/RequestConsumer.sol","file":"./RequestConsumer.sol","id":1400,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1509,"sourceUnit":1542,"src":"102:31:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1401,"name":"RequestConsumer","nameLocations":["179:15:7"],"nodeType":"IdentifierPath","referencedDeclaration":1541,"src":"179:15:7"},"id":1402,"nodeType":"InheritanceSpecifier","src":"179:15:7"}],"canonicalName":"HttpRequestConsumerWithHeader","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1508,"linearizedBaseContracts":[1508,1541],"name":"HttpRequestConsumerWithHeader","nameLocation":"146:29:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1406,"libraryName":{"id":1403,"name":"RequestLib","nameLocations":["206:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":1291,"src":"206:10:7"},"nodeType":"UsingForDirective","src":"200:40:7","typeName":{"id":1405,"nodeType":"UserDefinedTypeName","pathNode":{"id":1404,"name":"RequestLib.Request","nameLocations":["221:10:7","232:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"221:18:7"},"referencedDeclaration":1177,"src":"221:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}}},{"constant":false,"id":1409,"mutability":"mutable","name":"httpOracle","nameLocation":"264:10:7","nodeType":"VariableDeclaration","scope":1508,"src":"246:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"},"typeName":{"id":1408,"nodeType":"UserDefinedTypeName","pathNode":{"id":1407,"name":"HttpRequestOracle","nameLocations":["246:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":1396,"src":"246:17:7"},"referencedDeclaration":1396,"src":"246:17:7","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"prediction_signal","nameLocation":"286:17:7","nodeType":"VariableDeclaration","scope":1508,"src":"279:24:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1410,"name":"string","nodeType":"ElementaryTypeName","src":"279:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"f29235782b6dafca64e492ae4ebc3534f115394e4e462365c8ff66ec198b4144","id":1417,"name":"RequestExchangeRate","nameLocation":"316:19:7","nodeType":"EventDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"352:9:7","nodeType":"VariableDeclaration","scope":1417,"src":"336:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"336:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1415,"indexed":false,"mutability":"mutable","name":"prediction_signal","nameLocation":"370:17:7","nodeType":"VariableDeclaration","scope":1417,"src":"363:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1414,"name":"string","nodeType":"ElementaryTypeName","src":"363:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"335:53:7"},"src":"310:79:7"},{"body":{"id":1428,"nodeType":"Block","src":"424:52:7","statements":[{"expression":{"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1422,"name":"httpOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"431:10:7","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1424,"name":"_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"462:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1423,"name":"HttpRequestOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"444:17:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_HttpRequestOracle_$1396_$","typeString":"type(contract HttpRequestOracle)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"444:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"}},"src":"431:39:7","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"}},"id":1427,"nodeType":"ExpressionStatement","src":"431:39:7"}]},"id":1429,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"_oracle","nameLocation":"415:7:7","nodeType":"VariableDeclaration","scope":1429,"src":"407:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1418,"name":"address","nodeType":"ElementaryTypeName","src":"407:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"406:17:7"},"returnParameters":{"id":1421,"nodeType":"ParameterList","parameters":[],"src":"424:0:7"},"scope":1508,"src":"395:81:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1489,"nodeType":"Block","src":"543:1096:7","statements":[{"assignments":[1438],"declarations":[{"constant":false,"id":1438,"mutability":"mutable","name":"req","nameLocation":"576:3:7","nodeType":"VariableDeclaration","scope":1489,"src":"550:29:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1437,"nodeType":"UserDefinedTypeName","pathNode":{"id":1436,"name":"RequestLib.Request","nameLocations":["550:10:7","561:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"550:18:7"},"referencedDeclaration":1177,"src":"550:18:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"}],"id":1444,"initialValue":{"arguments":[{"expression":{"expression":{"id":1440,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"595:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestConsumerWithHeader_$1508","typeString":"contract HttpRequestConsumerWithHeader"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"600:23:7","memberName":"_requestedDataCompleted","nodeType":"MemberAccess","referencedDeclaration":1507,"src":"595:28:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,string memory) external"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"624:8:7","memberName":"selector","nodeType":"MemberAccess","src":"595:37:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1439,"name":"buildRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"582:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_struct$_Request_$1177_memory_ptr_$","typeString":"function (bytes4) view returns (struct RequestLib.Request memory)"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"582:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"nodeType":"VariableDeclarationStatement","src":"550:83:7"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":1451,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"677:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"683:9:7","memberName":"timestamp","nodeType":"MemberAccess","src":"677:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1453,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"694:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"698:6:7","memberName":"sender","nodeType":"MemberAccess","src":"694:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1449,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"660:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"664:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"660:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"660:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"650:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"650:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1445,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"640:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"644:5:7","memberName":"setId","nodeType":"MemberAccess","referencedDeclaration":1220,"src":"640:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1177_memory_ptr_$_t_bytes32_$returns$__$bound_to$_t_struct$_Request_$1177_memory_ptr_$","typeString":"function (struct RequestLib.Request memory,bytes32) pure"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:67:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1458,"nodeType":"ExpressionStatement","src":"640:67:7"},{"expression":{"arguments":[{"hexValue":"676574","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1260:5:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6817c00f03de8b5bd58d2016b59d251c13056b989171c5852949903bc043bc27","typeString":"literal_string \"get\""},"value":"get"},{"hexValue":"68747470733a2f2f6170692e73636f627275646f742e6465762f646174612f","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1267:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebb66ed70806a81fa706a3bbf139f914a960c5d74d35fe52024894290f2984cb","typeString":"literal_string \"https://api.scobrudot.dev/data/\""},"value":"https://api.scobrudot.dev/data/"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6817c00f03de8b5bd58d2016b59d251c13056b989171c5852949903bc043bc27","typeString":"literal_string \"get\""},{"typeIdentifier":"t_stringliteral_ebb66ed70806a81fa706a3bbf139f914a960c5d74d35fe52024894290f2984cb","typeString":"literal_string \"https://api.scobrudot.dev/data/\""}],"expression":{"id":1459,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1252:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1256:3:7","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1247,"src":"1252:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1177_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_Request_$1177_memory_ptr_$","typeString":"function (struct RequestLib.Request memory,string memory,string memory) pure"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1252:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1465,"nodeType":"ExpressionStatement","src":"1252:49:7"},{"expression":{"arguments":[{"hexValue":"417574686f72697a6174696f6e","id":1469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1322:15:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d4cb82d6ab4b12d898b7c329f98f78eb2888ed06c36c780bdb9d75165b9d43cf","typeString":"literal_string \"Authorization\""},"value":"Authorization"},{"hexValue":"","id":1470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1339:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d4cb82d6ab4b12d898b7c329f98f78eb2888ed06c36c780bdb9d75165b9d43cf","typeString":"literal_string \"Authorization\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1466,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1308:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1312:9:7","memberName":"addHeader","nodeType":"MemberAccess","referencedDeclaration":1290,"src":"1308:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1177_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_Request_$1177_memory_ptr_$","typeString":"function (struct RequestLib.Request memory,string memory,string memory) pure"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1472,"nodeType":"ExpressionStatement","src":"1308:34:7"},{"expression":{"arguments":[{"hexValue":"70617468","id":1476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1551:6:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_46f9db2921f88204395f1f47d741736216b2218e88e47f50e1f1b56261f0d0cd","typeString":"literal_string \"path\""},"value":"path"},{"hexValue":"70726564696374696f6e5f7369676e616c","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1559:19:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c35a2785152600206f87549d1e819163869c8287131d862911a377978ac3495e","typeString":"literal_string \"prediction_signal\""},"value":"prediction_signal"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_46f9db2921f88204395f1f47d741736216b2218e88e47f50e1f1b56261f0d0cd","typeString":"literal_string \"path\""},{"typeIdentifier":"t_stringliteral_c35a2785152600206f87549d1e819163869c8287131d862911a377978ac3495e","typeString":"literal_string \"prediction_signal\""}],"expression":{"id":1473,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1543:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1475,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1547:3:7","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1247,"src":"1543:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1177_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_Request_$1177_memory_ptr_$","typeString":"function (struct RequestLib.Request memory,string memory,string memory) pure"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1543:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"1543:36:7"},{"expression":{"arguments":[{"id":1483,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1609:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}],"expression":{"id":1480,"name":"httpOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"1586:10:7","typeDescriptions":{"typeIdentifier":"t_contract$_HttpRequestOracle_$1396","typeString":"contract HttpRequestOracle"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1597:11:7","memberName":"sendRequest","nodeType":"MemberAccess","referencedDeclaration":1395,"src":"1586:22:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_struct$_Request_$1177_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct RequestLib.Request memory) external returns (bytes32)"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1586:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1485,"nodeType":"ExpressionStatement","src":"1586:27:7"},{"expression":{"expression":{"id":1486,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1627:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1487,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1631:2:7","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":1169,"src":"1627:6:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1433,"id":1488,"nodeType":"Return","src":"1620:13:7"}]},"id":1490,"implemented":true,"kind":"function","modifiers":[],"name":"requestPredictionSignal","nameLocation":"491:23:7","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[],"src":"514:2:7"},"returnParameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1490,"src":"534:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:9:7"},"scope":1508,"src":"482:1157:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1506,"nodeType":"Block","src":"1739:114:7","statements":[{"eventCall":{"arguments":[{"id":1498,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1771:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1499,"name":"_prediction_signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"1783:18:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1497,"name":"RequestExchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"1751:19:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,string memory)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1751:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1501,"nodeType":"EmitStatement","src":"1746:56:7"},{"expression":{"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1502,"name":"prediction_signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"1809:17:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1503,"name":"_prediction_signal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"1829:18:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1809:38:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1505,"nodeType":"ExpressionStatement","src":"1809:38:7"}]},"functionSelector":"4cd581ed","id":1507,"implemented":true,"kind":"function","modifiers":[],"name":"_requestedDataCompleted","nameLocation":"1654:23:7","nodeType":"FunctionDefinition","parameters":{"id":1495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"_requestId","nameLocation":"1686:10:7","nodeType":"VariableDeclaration","scope":1507,"src":"1678:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1678:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1494,"mutability":"mutable","name":"_prediction_signal","nameLocation":"1712:18:7","nodeType":"VariableDeclaration","scope":1507,"src":"1698:32:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1493,"name":"string","nodeType":"ElementaryTypeName","src":"1698:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1677:54:7"},"returnParameters":{"id":1496,"nodeType":"ParameterList","parameters":[],"src":"1739:0:7"},"scope":1508,"src":"1645:208:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1509,"src":"137:1719:7","usedErrors":[]}],"src":"40:1816:7"},"id":7},"contracts/pull/RequestConsumer.sol":{"ast":{"absolutePath":"contracts/pull/RequestConsumer.sol","exportedSymbols":{"Buffer":[635],"BufferBase":[1157],"Context":[134],"HttpRequestOracle":[1396],"OnlyReporter":[1297],"Ownable":[112],"RequestConsumer":[1541],"RequestLib":[1291]},"id":1542,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1510,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"40:23:8"},{"absolutePath":"contracts/pull/HttpRequestOracle.sol","file":"./HttpRequestOracle.sol","id":1511,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1542,"sourceUnit":1397,"src":"67:33:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/RequestLib.sol","file":"../lib/RequestLib.sol","id":1512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1542,"sourceUnit":1292,"src":"102:31:8","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"RequestConsumer","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1541,"linearizedBaseContracts":[1541],"name":"RequestConsumer","nameLocation":"155:15:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1516,"libraryName":{"id":1513,"name":"RequestLib","nameLocations":["182:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":1291,"src":"182:10:8"},"nodeType":"UsingForDirective","src":"176:40:8","typeName":{"id":1515,"nodeType":"UserDefinedTypeName","pathNode":{"id":1514,"name":"RequestLib.Request","nameLocations":["197:10:8","208:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"197:18:8"},"referencedDeclaration":1177,"src":"197:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}}},{"body":{"id":1539,"nodeType":"Block","src":"328:112:8","statements":[{"assignments":[1528],"declarations":[{"constant":false,"id":1528,"mutability":"mutable","name":"req","nameLocation":"361:3:8","nodeType":"VariableDeclaration","scope":1539,"src":"335:29:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1527,"nodeType":"UserDefinedTypeName","pathNode":{"id":1526,"name":"RequestLib.Request","nameLocations":["335:10:8","346:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"335:18:8"},"referencedDeclaration":1177,"src":"335:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"}],"id":1529,"nodeType":"VariableDeclarationStatement","src":"335:29:8"},{"expression":{"arguments":[{"arguments":[{"id":1534,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"401:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_RequestConsumer_$1541","typeString":"contract RequestConsumer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RequestConsumer_$1541","typeString":"contract RequestConsumer"}],"id":1533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"393:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1532,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:8","typeDescriptions":{}}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"393:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1536,"name":"callbackFunctionSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"408:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1530,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"378:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"id":1531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"382:10:8","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":1205,"src":"378:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1177_memory_ptr_$_t_address_$_t_bytes4_$returns$_t_struct$_Request_$1177_memory_ptr_$bound_to$_t_struct$_Request_$1177_memory_ptr_$","typeString":"function (struct RequestLib.Request memory,address,bytes4) pure returns (struct RequestLib.Request memory)"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"378:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request memory"}},"functionReturnParameters":1523,"id":1538,"nodeType":"Return","src":"371:63:8"}]},"id":1540,"implemented":true,"kind":"function","modifiers":[],"name":"buildRequest","nameLocation":"231:12:8","nodeType":"FunctionDefinition","parameters":{"id":1519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1518,"mutability":"mutable","name":"callbackFunctionSignature","nameLocation":"251:25:8","nodeType":"VariableDeclaration","scope":1540,"src":"244:32:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1517,"name":"bytes4","nodeType":"ElementaryTypeName","src":"244:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"243:34:8"},"returnParameters":{"id":1523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1540,"src":"301:25:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_memory_ptr","typeString":"struct RequestLib.Request"},"typeName":{"id":1521,"nodeType":"UserDefinedTypeName","pathNode":{"id":1520,"name":"RequestLib.Request","nameLocations":["301:10:8","312:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1177,"src":"301:18:8"},"referencedDeclaration":1177,"src":"301:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1177_storage_ptr","typeString":"struct RequestLib.Request"}},"visibility":"internal"}],"src":"300:27:8"},"scope":1541,"src":"222:218:8","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1542,"src":"137:306:8","usedErrors":[]}],"src":"40:403:8"},"id":8}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SimpleOracle.sol":{"SimpleOracle":{"abi":[{"inputs":[{"internalType":"enum SimpleOracle.Status","name":"initialStatus","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum SimpleOracle.Status","name":"status","type":"uint8"}],"name":"StatusChange","type":"event"},{"inputs":[{"internalType":"enum SimpleOracle.Status","name":"status","type":"uint8"}],"name":"changeStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum SimpleOracle.Status","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_161":{"entryPoint":null,"id":161,"parameterSlots":1,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_124":{"entryPoint":null,"id":124,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":104,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_enum$_Status_$142_fromMemory":{"entryPoint":184,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":224,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:418:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"105:179:9","statements":[{"body":{"nodeType":"YulBlock","src":"151:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"160:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"153:6:9"},"nodeType":"YulFunctionCall","src":"153:12:9"},"nodeType":"YulExpressionStatement","src":"153:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"126:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"135:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"122:3:9"},"nodeType":"YulFunctionCall","src":"122:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"147:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"118:3:9"},"nodeType":"YulFunctionCall","src":"118:32:9"},"nodeType":"YulIf","src":"115:52:9"},{"nodeType":"YulVariableDeclaration","src":"176:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"195:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"189:5:9"},"nodeType":"YulFunctionCall","src":"189:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"180:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"238:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"247:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"250:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"240:6:9"},"nodeType":"YulFunctionCall","src":"240:12:9"},"nodeType":"YulExpressionStatement","src":"240:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"227:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"234:1:9","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"224:2:9"},"nodeType":"YulFunctionCall","src":"224:12:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"217:6:9"},"nodeType":"YulFunctionCall","src":"217:20:9"},"nodeType":"YulIf","src":"214:40:9"},{"nodeType":"YulAssignment","src":"263:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"273:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"263:6:9"}]}]},"name":"abi_decode_tuple_t_enum$_Status_$142_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"71:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"82:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"94:6:9","type":""}],"src":"14:270:9"},{"body":{"nodeType":"YulBlock","src":"321:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"338:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"345:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"350:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"341:3:9"},"nodeType":"YulFunctionCall","src":"341:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"331:6:9"},"nodeType":"YulFunctionCall","src":"331:31:9"},"nodeType":"YulExpressionStatement","src":"331:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"378:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"381:4:9","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"371:6:9"},"nodeType":"YulFunctionCall","src":"371:15:9"},"nodeType":"YulExpressionStatement","src":"371:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"402:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"405:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"395:6:9"},"nodeType":"YulFunctionCall","src":"395:15:9"},"nodeType":"YulExpressionStatement","src":"395:15:9"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"289:127:9"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_enum$_Status_$142_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161044038038061044083398101604081905261002f916100b8565b61003833610068565b6000805482919060ff60a01b1916600160a01b83600181111561005d5761005d6100e0565b0217905550506100f6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ca57600080fd5b8151600281106100d957600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b61033b806101056000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634e69d5601461005c578063715018a61461007f5780638da5cb5b1461008957806395bc9538146100a4578063f2fde38b146100b7575b600080fd5b600054600160a01b900460ff16604051610076919061028c565b60405180910390f35b6100876100ca565b005b6000546040516001600160a01b039091168152602001610076565b6100876100b23660046102b4565b6100de565b6100876100c53660046102dc565b61014e565b6100d26101cc565b6100dc6000610226565b565b6100e66101cc565b6000805482919060ff60a01b1916600160a01b83600181111561010b5761010b610276565b021790555080600181111561012257610122610276565b6040517fcaf614a467539eadacc5961ee316ce2d5590a46321100b51c19e0bbec526dd2790600090a250565b6101566101cc565b6001600160a01b0381166101c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101c981610226565b50565b6000546001600160a01b031633146100dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052602160045260246000fd5b60208101600283106102ae57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156102c657600080fd5b8135600281106102d557600080fd5b9392505050565b6000602082840312156102ee57600080fd5b81356001600160a01b03811681146102d557600080fdfea26469706673582212205945f2ecd2f0226dc9f6144d5322b54640c1423d8f83a4832054e279b8a67fc664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x440 CODESIZE SUB DUP1 PUSH2 0x440 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xB8 JUMP JUMPDEST PUSH2 0x38 CALLER PUSH2 0x68 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5D JUMPI PUSH2 0x5D PUSH2 0xE0 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP POP PUSH2 0xF6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x33B DUP1 PUSH2 0x105 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x95BC9538 EQ PUSH2 0xA4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0x76 SWAP2 SWAP1 PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x87 PUSH2 0xCA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x76 JUMP JUMPDEST PUSH2 0x87 PUSH2 0xB2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST PUSH2 0x87 PUSH2 0xC5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DC JUMP JUMPDEST PUSH2 0x14E JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1CC JUMP JUMPDEST PUSH2 0xDC PUSH1 0x0 PUSH2 0x226 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x10B JUMPI PUSH2 0x10B PUSH2 0x276 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x122 JUMPI PUSH2 0x122 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAF614A467539EADACC5961EE316CE2D5590A46321100B51C19E0BBEC526DD27 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x156 PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C9 DUP2 PUSH2 0x226 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0x2AE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE GASLIMIT CALLCODE 0xEC 0xD2 CREATE 0x22 PUSH14 0xC9F6144D5322B54640C1423D8F83 LOG4 DUP4 KECCAK256 SLOAD 0xE2 PUSH26 0xB8A67FC664736F6C634300081100330000000000000000000000 ","sourceMap":"83:653:2:-:0;;;362:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:1;936:18:0;:32::i;:::-;403:13:2;:29;;419:13;;403;-1:-1:-1;;;;403:29:2;-1:-1:-1;;;419:13:2;403:29;;;;;;;;:::i;:::-;;;;;;362:76;83:653;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:270:9:-;94:6;147:2;135:9;126:7;122:23;118:32;115:52;;;163:1;160;153:12;115:52;195:9;189:16;234:1;227:5;224:12;214:40;;250:1;247;240:12;214:40;273:5;14:270;-1:-1:-1;;;14:270:9:o;289:127::-;350:10;345:3;341:20;338:1;331:31;381:4;378:1;371:15;405:4;402:1;395:15;289:127;83:653:2;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":460,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_124":{"entryPoint":null,"id":124,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":550,"id":111,"parameterSlots":1,"returnSlots":0},"@changeStatus_178":{"entryPoint":222,"id":178,"parameterSlots":1,"returnSlots":0},"@getStatus_187":{"entryPoint":null,"id":187,"parameterSlots":0,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":202,"id":68,"parameterSlots":0,"returnSlots":0},"@transferOwnership_91":{"entryPoint":334,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":732,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_enum$_Status_$142":{"entryPoint":692,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_Status_$142__to_t_uint8__fromStack_reversed":{"entryPoint":652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":630,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2024:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:9"},"nodeType":"YulFunctionCall","src":"66:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:9"},"nodeType":"YulFunctionCall","src":"56:31:9"},"nodeType":"YulExpressionStatement","src":"56:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:9","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:9"},"nodeType":"YulFunctionCall","src":"96:15:9"},"nodeType":"YulExpressionStatement","src":"96:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:9"},"nodeType":"YulFunctionCall","src":"120:15:9"},"nodeType":"YulExpressionStatement","src":"120:15:9"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"14:127:9"},{"body":{"nodeType":"YulBlock","src":"255:229:9","statements":[{"nodeType":"YulAssignment","src":"265:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"277:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"288:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"273:3:9"},"nodeType":"YulFunctionCall","src":"273:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"265:4:9"}]},{"body":{"nodeType":"YulBlock","src":"333:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"354:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"361:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"366:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"357:3:9"},"nodeType":"YulFunctionCall","src":"357:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"347:6:9"},"nodeType":"YulFunctionCall","src":"347:31:9"},"nodeType":"YulExpressionStatement","src":"347:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"398:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"401:4:9","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"391:6:9"},"nodeType":"YulFunctionCall","src":"391:15:9"},"nodeType":"YulExpressionStatement","src":"391:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"426:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"429:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"419:6:9"},"nodeType":"YulFunctionCall","src":"419:15:9"},"nodeType":"YulExpressionStatement","src":"419:15:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"313:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"321:1:9","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"310:2:9"},"nodeType":"YulFunctionCall","src":"310:13:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"303:6:9"},"nodeType":"YulFunctionCall","src":"303:21:9"},"nodeType":"YulIf","src":"300:144:9"},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"460:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"471:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"453:6:9"},"nodeType":"YulFunctionCall","src":"453:25:9"},"nodeType":"YulExpressionStatement","src":"453:25:9"}]},"name":"abi_encode_tuple_t_enum$_Status_$142__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"224:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"235:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"246:4:9","type":""}],"src":"146:338:9"},{"body":{"nodeType":"YulBlock","src":"590:102:9","statements":[{"nodeType":"YulAssignment","src":"600:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"612:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"623:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"608:3:9"},"nodeType":"YulFunctionCall","src":"608:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"600:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"642:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"657:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"673:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"678:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"669:3:9"},"nodeType":"YulFunctionCall","src":"669:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"682:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"665:3:9"},"nodeType":"YulFunctionCall","src":"665:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"653:3:9"},"nodeType":"YulFunctionCall","src":"653:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"635:6:9"},"nodeType":"YulFunctionCall","src":"635:51:9"},"nodeType":"YulExpressionStatement","src":"635:51:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"559:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"570:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"581:4:9","type":""}],"src":"489:203:9"},{"body":{"nodeType":"YulBlock","src":"777:186:9","statements":[{"body":{"nodeType":"YulBlock","src":"823:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"832:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"835:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"825:6:9"},"nodeType":"YulFunctionCall","src":"825:12:9"},"nodeType":"YulExpressionStatement","src":"825:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"798:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"807:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"794:3:9"},"nodeType":"YulFunctionCall","src":"794:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"819:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"790:3:9"},"nodeType":"YulFunctionCall","src":"790:32:9"},"nodeType":"YulIf","src":"787:52:9"},{"nodeType":"YulVariableDeclaration","src":"848:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"874:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"861:12:9"},"nodeType":"YulFunctionCall","src":"861:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"852:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"917:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"926:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"929:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"919:6:9"},"nodeType":"YulFunctionCall","src":"919:12:9"},"nodeType":"YulExpressionStatement","src":"919:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"906:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"913:1:9","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"903:2:9"},"nodeType":"YulFunctionCall","src":"903:12:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"896:6:9"},"nodeType":"YulFunctionCall","src":"896:20:9"},"nodeType":"YulIf","src":"893:40:9"},{"nodeType":"YulAssignment","src":"942:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"952:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"942:6:9"}]}]},"name":"abi_decode_tuple_t_enum$_Status_$142","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"743:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"754:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"766:6:9","type":""}],"src":"697:266:9"},{"body":{"nodeType":"YulBlock","src":"1038:216:9","statements":[{"body":{"nodeType":"YulBlock","src":"1084:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1093:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1096:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1086:6:9"},"nodeType":"YulFunctionCall","src":"1086:12:9"},"nodeType":"YulExpressionStatement","src":"1086:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1059:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1068:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1055:3:9"},"nodeType":"YulFunctionCall","src":"1055:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1080:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1051:3:9"},"nodeType":"YulFunctionCall","src":"1051:32:9"},"nodeType":"YulIf","src":"1048:52:9"},{"nodeType":"YulVariableDeclaration","src":"1109:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1135:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1122:12:9"},"nodeType":"YulFunctionCall","src":"1122:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1208:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1217:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1220:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1210:6:9"},"nodeType":"YulFunctionCall","src":"1210:12:9"},"nodeType":"YulExpressionStatement","src":"1210:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1167:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1178:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1193:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1198:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1189:3:9"},"nodeType":"YulFunctionCall","src":"1189:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1202:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1185:3:9"},"nodeType":"YulFunctionCall","src":"1185:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1174:3:9"},"nodeType":"YulFunctionCall","src":"1174:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1164:2:9"},"nodeType":"YulFunctionCall","src":"1164:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1157:6:9"},"nodeType":"YulFunctionCall","src":"1157:50:9"},"nodeType":"YulIf","src":"1154:70:9"},{"nodeType":"YulAssignment","src":"1233:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"1243:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1233:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1004:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1015:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1027:6:9","type":""}],"src":"968:286:9"},{"body":{"nodeType":"YulBlock","src":"1433:228:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1443:6:9"},"nodeType":"YulFunctionCall","src":"1443:21:9"},"nodeType":"YulExpressionStatement","src":"1443:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1484:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1495:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1480:3:9"},"nodeType":"YulFunctionCall","src":"1480:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"1500:2:9","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1473:6:9"},"nodeType":"YulFunctionCall","src":"1473:30:9"},"nodeType":"YulExpressionStatement","src":"1473:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1523:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1534:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1519:3:9"},"nodeType":"YulFunctionCall","src":"1519:18:9"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"1539:34:9","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1512:6:9"},"nodeType":"YulFunctionCall","src":"1512:62:9"},"nodeType":"YulExpressionStatement","src":"1512:62:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1594:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1605:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1590:3:9"},"nodeType":"YulFunctionCall","src":"1590:18:9"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"1610:8:9","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1583:6:9"},"nodeType":"YulFunctionCall","src":"1583:36:9"},"nodeType":"YulExpressionStatement","src":"1583:36:9"},{"nodeType":"YulAssignment","src":"1628:27:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1640:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1651:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1636:3:9"},"nodeType":"YulFunctionCall","src":"1636:19:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1628:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1410:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1424:4:9","type":""}],"src":"1259:402:9"},{"body":{"nodeType":"YulBlock","src":"1840:182:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1857:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1868:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1850:6:9"},"nodeType":"YulFunctionCall","src":"1850:21:9"},"nodeType":"YulExpressionStatement","src":"1850:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1891:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1902:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1887:3:9"},"nodeType":"YulFunctionCall","src":"1887:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"1907:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1880:6:9"},"nodeType":"YulFunctionCall","src":"1880:30:9"},"nodeType":"YulExpressionStatement","src":"1880:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1930:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1941:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1926:3:9"},"nodeType":"YulFunctionCall","src":"1926:18:9"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1946:34:9","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1919:6:9"},"nodeType":"YulFunctionCall","src":"1919:62:9"},"nodeType":"YulExpressionStatement","src":"1919:62:9"},{"nodeType":"YulAssignment","src":"1990:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2002:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2013:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1998:3:9"},"nodeType":"YulFunctionCall","src":"1998:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1990:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1817:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1831:4:9","type":""}],"src":"1666:356:9"}]},"contents":"{\n    { }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_Status_$142__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 2))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_enum$_Status_$142(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100575760003560e01c80634e69d5601461005c578063715018a61461007f5780638da5cb5b1461008957806395bc9538146100a4578063f2fde38b146100b7575b600080fd5b600054600160a01b900460ff16604051610076919061028c565b60405180910390f35b6100876100ca565b005b6000546040516001600160a01b039091168152602001610076565b6100876100b23660046102b4565b6100de565b6100876100c53660046102dc565b61014e565b6100d26101cc565b6100dc6000610226565b565b6100e66101cc565b6000805482919060ff60a01b1916600160a01b83600181111561010b5761010b610276565b021790555080600181111561012257610122610276565b6040517fcaf614a467539eadacc5961ee316ce2d5590a46321100b51c19e0bbec526dd2790600090a250565b6101566101cc565b6001600160a01b0381166101c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6101c981610226565b50565b6000546001600160a01b031633146100dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052602160045260246000fd5b60208101600283106102ae57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156102c657600080fd5b8135600281106102d557600080fd5b9392505050565b6000602082840312156102ee57600080fd5b81356001600160a01b03811681146102d557600080fdfea26469706673582212205945f2ecd2f0226dc9f6144d5322b54640c1423d8f83a4832054e279b8a67fc664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x95BC9538 EQ PUSH2 0xA4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD PUSH2 0x76 SWAP2 SWAP1 PUSH2 0x28C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x87 PUSH2 0xCA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x76 JUMP JUMPDEST PUSH2 0x87 PUSH2 0xB2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST PUSH2 0x87 PUSH2 0xC5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DC JUMP JUMPDEST PUSH2 0x14E JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1CC JUMP JUMPDEST PUSH2 0xDC PUSH1 0x0 PUSH2 0x226 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x10B JUMPI PUSH2 0x10B PUSH2 0x276 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x122 JUMPI PUSH2 0x122 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCAF614A467539EADACC5961EE316CE2D5590A46321100B51C19E0BBEC526DD27 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x156 PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C9 DUP2 PUSH2 0x226 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0x2AE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE GASLIMIT CALLCODE 0xEC 0xD2 CREATE 0x22 PUSH14 0xC9F6144D5322B54640C1423D8F83 LOG4 DUP4 KECCAK256 SLOAD 0xE2 PUSH26 0xB8A67FC664736F6C634300081100330000000000000000000000 ","sourceMap":"83:653:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;648:85;692:6;714:13;-1:-1:-1;;;714:13:2;;;;648:85;;;;;;:::i;:::-;;;;;;;;1824:101:0;;;:::i;:::-;;1201:85;1247:7;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:0;;;635:51:9;;623:2;608:18;1201:85:0;489:203:9;483:123:2;;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;:::i;:::-;;:::i;1824:101::-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;483:123:2:-;1094:13:0;:11;:13::i;:::-;546::2::1;:22:::0;;562:6;;546:13;-1:-1:-1;;;;546:22:2::1;-1:-1:-1::0;;;562:6:2;546:22:::1;::::0;::::1;;;;;;:::i;:::-;;;;;;593:6;580:20;;;;;;;;:::i;:::-;;::::0;::::1;::::0;;;::::1;483:123:::0;:::o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;1461:2:9;2154:73:0::1;::::0;::::1;1443:21:9::0;1500:2;1480:18;;;1473:30;1539:34;1519:18;;;1512:62;-1:-1:-1;;;1590:18:9;;;1583:36;1636:19;;2154:73:0::1;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:1;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;1868:2:9;1414:68:0;;;1850:21:9;;;1887:18;;;1880:30;1946:34;1926:18;;;1919:62;1998:18;;1414:68:0;1666:356:9;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:127:9:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:338;288:2;273:18;;321:1;310:13;;300:144;;366:10;361:3;357:20;354:1;347:31;401:4;398:1;391:15;429:4;426:1;419:15;300:144;453:25;;;146:338;:::o;697:266::-;766:6;819:2;807:9;798:7;794:23;790:32;787:52;;;835:1;832;825:12;787:52;874:9;861:23;913:1;906:5;903:12;893:40;;929:1;926;919:12;893:40;952:5;697:266;-1:-1:-1;;;697:266:9:o;968:286::-;1027:6;1080:2;1068:9;1059:7;1055:23;1051:32;1048:52;;;1096:1;1093;1086:12;1048:52;1122:23;;-1:-1:-1;;;;;1174:31:9;;1164:42;;1154:70;;1220:1;1217;1210:12"},"gasEstimates":{"creation":{"codeDepositCost":"165400","executionCost":"infinite","totalCost":"infinite"},"external":{"changeStatus(uint8)":"27912","getStatus()":"2328","owner()":"2323","renounceOwnership()":"infinite","transferOwnership(address)":"28364"}},"methodIdentifiers":{"changeStatus(uint8)":"95bc9538","getStatus()":"4e69d560","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"initialStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"changeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum SimpleOracle.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleOracle.sol\":\"SimpleOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SimpleOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract SimpleOracle is Ownable {\\r\\n  // create enum struct\\r\\n  enum Status {\\r\\n    Buy,\\r\\n    Sell\\r\\n  }\\r\\n\\r\\n  // current status variable\\r\\n  Status private currentStatus;\\r\\n\\r\\n  // create event\\r\\n  event StatusChange(Status indexed status);\\r\\n\\r\\n  // constructor to set initial status\\r\\n  constructor(Status initialStatus) {\\r\\n    currentStatus = initialStatus;\\r\\n  }\\r\\n\\r\\n  // create function to change status\\r\\n  function changeStatus(Status status) external onlyOwner {\\r\\n    currentStatus = status;\\r\\n    emit StatusChange(status);\\r\\n  }\\r\\n\\r\\n  // create function to get status\\r\\n  function getStatus() external view returns (Status) {\\r\\n    return currentStatus;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x87b264f190703fd12b72bb8f82d0bdbe8c9482f8c941c7f223a704a3f436f178\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/SimpleOracle.sol:SimpleOracle","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":145,"contract":"contracts/SimpleOracle.sol:SimpleOracle","label":"currentStatus","offset":20,"slot":"0","type":"t_enum(Status)142"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_enum(Status)142":{"encoding":"inplace","label":"enum SimpleOracle.Status","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/Buffer.sol":{"Buffer":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122008764ec1624790e0c5f027e507c1aad022fd3d20da1a668dcd6a8c57b901eabf64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD PUSH23 0x4EC1624790E0C5F027E507C1AAD022FD3D20DA1A668DCD PUSH11 0x8C57B901EABF64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"110:3292:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;110:3292:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122008764ec1624790e0c5f027e507c1aad022fd3d20da1a668dcd6a8c57b901eabf64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD PUSH23 0x4EC1624790E0C5F027E507C1AAD022FD3D20DA1A668DCD PUSH11 0x8C57B901EABF64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"110:3292:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"encodeBigNum(struct BufferBase.buffer memory,uint256)":"infinite","encodeBytes(struct BufferBase.buffer memory,bytes memory)":"infinite","encodeFixedNumeric(struct BufferBase.buffer memory,uint8,uint64)":"infinite","encodeIndefiniteLengthType(struct BufferBase.buffer memory,uint8)":"infinite","encodeInt(struct BufferBase.buffer memory,int256)":"infinite","encodeSignedBigNum(struct BufferBase.buffer memory,int256)":"infinite","encodeString(struct BufferBase.buffer memory,string memory)":"infinite","encodeUInt(struct BufferBase.buffer memory,uint256)":"infinite","endSequence(struct BufferBase.buffer memory)":"infinite","startArray(struct BufferBase.buffer memory)":"infinite","startMap(struct BufferBase.buffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Buffer.sol\":\"Buffer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.19;\\r\\n\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary Buffer {\\r\\n  using BufferBase for BufferBase.buffer;\\r\\n\\r\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\r\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\r\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\r\\n\\r\\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\\r\\n    if (value <= 23) {\\r\\n      buf.appendUint8(uint8((major << 5) | value));\\r\\n    } else if (value <= 0xFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 24));\\r\\n      buf.appendInt(value, 1);\\r\\n    } else if (value <= 0xFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 25));\\r\\n      buf.appendInt(value, 2);\\r\\n    } else if (value <= 0xFFFFFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 26));\\r\\n      buf.appendInt(value, 4);\\r\\n    } else {\\r\\n      buf.appendUint8(uint8((major << 5) | 27));\\r\\n      buf.appendInt(value, 8);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\\r\\n    buf.appendUint8(uint8((major << 5) | 31));\\r\\n  }\\r\\n\\r\\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, value);\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\\r\\n    if (value < -0x10000000000000000) {\\r\\n      encodeSignedBigNum(buf, value);\\r\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, uint(value));\\r\\n    } else if (value >= 0) {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\r\\n    buf.append(value);\\r\\n  }\\r\\n\\r\\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(value));\\r\\n  }\\r\\n\\r\\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\r\\n  }\\r\\n\\r\\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\r\\n    buf.append(bytes(value));\\r\\n  }\\r\\n\\r\\n  function startArray(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\r\\n  }\\r\\n\\r\\n  function startMap(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\r\\n  }\\r\\n\\r\\n  function endSequence(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2aa6ac6639551697f8b11dc7daed84b0d51d9b51405c25b373b024f0e1c4f712\",\"license\":\"MIT\"},\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/BufferBase.sol":{"BufferBase":{"abi":[],"devdoc":{"details":"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb11946d0b609f80fe3e01dc26b98f6571a2876af10f01d6ba1f1df037d41cd864736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB GT SWAP5 PUSH14 0xB609F80FE3E01DC26B98F6571A2 DUP8 PUSH11 0xF10F01D6BA1F1DF037D41C 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"452:11155:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;452:11155:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb11946d0b609f80fe3e01dc26b98f6571a2876af10f01d6ba1f1df037d41cd864736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB GT SWAP5 PUSH14 0xB609F80FE3E01DC26B98F6571A2 DUP8 PUSH11 0xF10F01D6BA1F1DF037D41C 0xD8 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"452:11155:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"append(struct BufferBase.buffer memory,bytes memory)":"infinite","append(struct BufferBase.buffer memory,bytes memory,uint256)":"infinite","appendBytes20(struct BufferBase.buffer memory,bytes20)":"infinite","appendBytes32(struct BufferBase.buffer memory,bytes32)":"infinite","appendInt(struct BufferBase.buffer memory,uint256,uint256)":"infinite","appendUint8(struct BufferBase.buffer memory,uint8)":"infinite","fromBytes(bytes memory)":"infinite","init(struct BufferBase.buffer memory,uint256)":"infinite","max(uint256,uint256)":"infinite","resize(struct BufferBase.buffer memory,uint256)":"infinite","truncate(struct BufferBase.buffer memory)":"infinite","write(struct BufferBase.buffer memory,uint256,bytes memory,uint256)":"infinite","write(struct BufferBase.buffer memory,uint256,bytes32,uint256)":"infinite","writeBytes20(struct BufferBase.buffer memory,uint256,bytes20)":"infinite","writeInt(struct BufferBase.buffer memory,uint256,uint256,uint256)":"infinite","writeUint8(struct BufferBase.buffer memory,uint256,uint8)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/BufferBase.sol\":\"BufferBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/RequestLib.sol":{"RequestLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b09b53ce093a7a019c942a5fc76a85fb77e63e70ba7c6f79873b94b15f1451f764736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 SWAP12 MSTORE8 0xCE MULMOD GASPRICE PUSH27 0x19C942A5FC76A85FB77E63E70BA7C6F79873B94B15F1451F76473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"153:1033:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;153:1033:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b09b53ce093a7a019c942a5fc76a85fb77e63e70ba7c6f79873b94b15f1451f764736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 SWAP12 MSTORE8 0xCE MULMOD GASPRICE PUSH27 0x19C942A5FC76A85FB77E63E70BA7C6F79873B94B15F1451F76473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"153:1033:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(struct RequestLib.Request memory,string memory,string memory)":"infinite","addHeader(struct RequestLib.Request memory,string memory,string memory)":"infinite","initialize(struct RequestLib.Request memory,address,bytes4)":"infinite","setId(struct RequestLib.Request memory,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/RequestLib.sol\":\"RequestLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/lib/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.19;\\r\\n\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary Buffer {\\r\\n  using BufferBase for BufferBase.buffer;\\r\\n\\r\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\r\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\r\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\r\\n\\r\\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\\r\\n    if (value <= 23) {\\r\\n      buf.appendUint8(uint8((major << 5) | value));\\r\\n    } else if (value <= 0xFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 24));\\r\\n      buf.appendInt(value, 1);\\r\\n    } else if (value <= 0xFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 25));\\r\\n      buf.appendInt(value, 2);\\r\\n    } else if (value <= 0xFFFFFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 26));\\r\\n      buf.appendInt(value, 4);\\r\\n    } else {\\r\\n      buf.appendUint8(uint8((major << 5) | 27));\\r\\n      buf.appendInt(value, 8);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\\r\\n    buf.appendUint8(uint8((major << 5) | 31));\\r\\n  }\\r\\n\\r\\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, value);\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\\r\\n    if (value < -0x10000000000000000) {\\r\\n      encodeSignedBigNum(buf, value);\\r\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, uint(value));\\r\\n    } else if (value >= 0) {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\r\\n    buf.append(value);\\r\\n  }\\r\\n\\r\\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(value));\\r\\n  }\\r\\n\\r\\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\r\\n  }\\r\\n\\r\\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\r\\n    buf.append(bytes(value));\\r\\n  }\\r\\n\\r\\n  function startArray(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\r\\n  }\\r\\n\\r\\n  function startMap(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\r\\n  }\\r\\n\\r\\n  function endSequence(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2aa6ac6639551697f8b11dc7daed84b0d51d9b51405c25b373b024f0e1c4f712\",\"license\":\"MIT\"},\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"},\"contracts/lib/RequestLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary RequestLib {\\r\\n  using Buffer for BufferBase.buffer;\\r\\n\\r\\n  struct Request {\\r\\n    bytes32 id;\\r\\n    address callbackAddress;\\r\\n    bytes4 callbackFunctionId;\\r\\n    BufferBase.buffer requestData;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    Request memory self,\\r\\n    address callbackAddr,\\r\\n    bytes4 callbackFunc\\r\\n  ) internal pure returns (Request memory) {\\r\\n    self.callbackAddress = callbackAddr;\\r\\n    self.callbackFunctionId = callbackFunc;\\r\\n    return self;\\r\\n  }\\r\\n\\r\\n  function setId(Request memory self, bytes32 id) internal pure {\\r\\n    self.id = id;\\r\\n  }\\r\\n\\r\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\r\\n    self.requestData.encodeString(key);\\r\\n    self.requestData.encodeString(value);\\r\\n  }\\r\\n\\r\\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\\r\\n    self.requestData.encodeString(\\\" header(\\\");\\r\\n    self.requestData.encodeString(headerKey);\\r\\n    self.requestData.encodeString(value);\\r\\n    self.requestData.encodeString(\\\") \\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf8f70cb860bdc2202257a50ef25d755d31ccebcf9ffb900f8df3e9045831fd53\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/pull/HttpRequestOracle.sol":{"HttpRequestOracle":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"RequestSent","type":"event"},{"inputs":[{"internalType":"address","name":"reporterAddress","type":"address"}],"name":"getReporter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"address","name":"callbackAddress","type":"address"},{"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"components":[{"internalType":"bytes","name":"buf","type":"bytes"},{"internalType":"uint256","name":"capacity","type":"uint256"}],"internalType":"struct BufferBase.buffer","name":"requestData","type":"tuple"}],"internalType":"struct RequestLib.Request","name":"req","type":"tuple"}],"name":"sendRequest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"reporterAddress","type":"address"},{"internalType":"bool","name":"isReporter","type":"bool"}],"name":"updateReporter","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_124":{"entryPoint":null,"id":124,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":31,"id":111,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106228061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631ec6e24f14610067578063215d35cc1461007c578063715018a6146100a2578063732995af146100aa5780638da5cb5b146100e6578063f2fde38b14610101575b600080fd5b61007a610075366004610340565b610114565b005b61008f61008a36600461040f565b610147565b6040519081526020015b60405180910390f35b61007a6101e8565b6100d66100b8366004610540565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610099565b6000546040516001600160a01b039091168152602001610099565b61007a61010f366004610540565b6101fc565b61011c61027a565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b805160408083015160608401515191516000938493631ec6e24f60e01b93610174939091906024016105a8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252845191519092507fafb0931d973a0c62c636ef23ddd0b58b890a9bf7c77bca04c2ffbb30f61a8e86906101da9084906105d9565b60405180910390a250505190565b6101f061027a565b6101fa60006102d4565b565b61020461027a565b6001600160a01b03811661026e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610277816102d4565b50565b6000546001600160a01b031633146101fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610265565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461033b57600080fd5b919050565b6000806040838503121561035357600080fd5b61035c83610324565b91506020830135801515811461037157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156103b5576103b561037c565b60405290565b6040805190810167ffffffffffffffff811182821017156103b5576103b561037c565b604051601f8201601f1916810167ffffffffffffffff811182821017156104075761040761037c565b604052919050565b6000602080838503121561042257600080fd5b823567ffffffffffffffff8082111561043a57600080fd5b908401906080828703121561044e57600080fd5b610456610392565b82358152610465848401610324565b8185015260408301356001600160e01b03198116811461048457600080fd5b604082015260608301358281111561049b57600080fd5b9290920191604083880312156104b057600080fd5b6104b86103bb565b8335838111156104c757600080fd5b8401601f810189136104d857600080fd5b8035848111156104ea576104ea61037c565b6104fc601f8201601f191688016103de565b9450808552898782840101111561051257600080fd5b8087830188870137600090850187015250918252918301359281019290925260608101919091529392505050565b60006020828403121561055257600080fd5b61055b82610324565b9392505050565b6000815180845260005b818110156105885760208185018101518683018201520161056c565b506000602082860101526020601f19601f83011685010191505092915050565b83815263ffffffff60e01b831660208201526060604082015260006105d06060830184610562565b95945050505050565b60208152600061055b602083018461056256fea2646970667358221220bec162703ff5bd6cc76af0119918d370189e8b4f5b78cb5ef1adf8f91ef55e1664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x1F JUMP JUMPDEST PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x622 DUP1 PUSH2 0x7E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1EC6E24F EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x215D35CC EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x732995AF EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x340 JUMP JUMPDEST PUSH2 0x114 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x40F JUMP JUMPDEST PUSH2 0x147 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7A PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0xB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x540 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x99 JUMP JUMPDEST PUSH2 0x7A PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x1FC JUMP JUMPDEST PUSH2 0x11C PUSH2 0x27A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD MLOAD SWAP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0x1EC6E24F PUSH1 0xE0 SHL SWAP4 PUSH2 0x174 SWAP4 SWAP1 SWAP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE DUP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 POP PUSH32 0xAFB0931D973A0C62C636EF23DDD0B58B890A9BF7C77BCA04C2FFBB30F61A8E86 SWAP1 PUSH2 0x1DA SWAP1 DUP5 SWAP1 PUSH2 0x5D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1F0 PUSH2 0x27A JUMP JUMPDEST PUSH2 0x1FA PUSH1 0x0 PUSH2 0x2D4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x204 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x26E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x277 DUP2 PUSH2 0x2D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x265 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35C DUP4 PUSH2 0x324 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3B5 JUMPI PUSH2 0x3B5 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3B5 JUMPI PUSH2 0x3B5 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x407 JUMPI PUSH2 0x407 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x80 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x456 PUSH2 0x392 JUMP JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH2 0x465 DUP5 DUP5 ADD PUSH2 0x324 JUMP JUMPDEST DUP2 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x40 DUP4 DUP9 SUB SLT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B8 PUSH2 0x3BB JUMP JUMPDEST DUP4 CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP10 SGT PUSH2 0x4D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD DUP5 DUP2 GT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4EA PUSH2 0x37C JUMP JUMPDEST PUSH2 0x4FC PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP9 ADD PUSH2 0x3DE JUMP JUMPDEST SWAP5 POP DUP1 DUP6 MSTORE DUP10 DUP8 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP8 DUP4 ADD DUP9 DUP8 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP6 ADD DUP8 ADD MSTORE POP SWAP2 DUP3 MSTORE SWAP2 DUP4 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55B DUP3 PUSH2 0x324 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x588 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x56C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x562 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x55B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x562 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xC1 PUSH3 0x703FF5 0xBD PUSH13 0xC76AF0119918D370189E8B4F5B PUSH25 0xCB5EF1ADF8F91EF55E1664736F6C6343000811003300000000 ","sourceMap":"181:1009:6:-:0;;;;;;;;;;;;-1:-1:-1;936:32:0;719:10:1;936:18:0;:32::i;:::-;181:1009:6;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;181:1009:6:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":634,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_124":{"entryPoint":null,"id":124,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":724,"id":111,"parameterSlots":1,"returnSlots":0},"@getReporter_1349":{"entryPoint":null,"id":1349,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":488,"id":68,"parameterSlots":0,"returnSlots":0},"@sendRequest_1395":{"entryPoint":327,"id":1395,"parameterSlots":1,"returnSlots":1},"@transferOwnership_91":{"entryPoint":508,"id":91,"parameterSlots":1,"returnSlots":0},"@updateReporter_1337":{"entryPoint":276,"id":1337,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":804,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1344,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bool":{"entryPoint":832,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_Request_$1177_memory_ptr":{"entryPoint":1039,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":1378,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes4_t_bytes_memory_ptr__to_t_bytes32_t_bytes4_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1448,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1497,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":990,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_1039":{"entryPoint":914,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_1040":{"entryPoint":955,"id":null,"parameterSlots":0,"returnSlots":1},"panic_error_0x41":{"entryPoint":892,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5691:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:9","statements":[{"nodeType":"YulAssignment","src":"73:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:9"},"nodeType":"YulFunctionCall","src":"82:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:9"}]},{"body":{"nodeType":"YulBlock","src":"165:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:9"},"nodeType":"YulFunctionCall","src":"167:12:9"},"nodeType":"YulExpressionStatement","src":"167:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:9"},"nodeType":"YulFunctionCall","src":"146:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:9"},"nodeType":"YulFunctionCall","src":"142:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:9"},"nodeType":"YulFunctionCall","src":"131:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:9"},"nodeType":"YulFunctionCall","src":"121:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:9"},"nodeType":"YulFunctionCall","src":"114:50:9"},"nodeType":"YulIf","src":"111:70:9"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:9","type":""}],"src":"14:173:9"},{"body":{"nodeType":"YulBlock","src":"276:263:9","statements":[{"body":{"nodeType":"YulBlock","src":"322:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"331:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"334:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"324:6:9"},"nodeType":"YulFunctionCall","src":"324:12:9"},"nodeType":"YulExpressionStatement","src":"324:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"297:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"306:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"293:3:9"},"nodeType":"YulFunctionCall","src":"293:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"318:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"289:3:9"},"nodeType":"YulFunctionCall","src":"289:32:9"},"nodeType":"YulIf","src":"286:52:9"},{"nodeType":"YulAssignment","src":"347:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"376:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"357:18:9"},"nodeType":"YulFunctionCall","src":"357:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"347:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"395:45:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:9"},"nodeType":"YulFunctionCall","src":"421:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:9"},"nodeType":"YulFunctionCall","src":"408:32:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"399:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"493:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:9"},"nodeType":"YulFunctionCall","src":"495:12:9"},"nodeType":"YulExpressionStatement","src":"495:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"462:5:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"476:6:9"},"nodeType":"YulFunctionCall","src":"476:13:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"469:6:9"},"nodeType":"YulFunctionCall","src":"469:21:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"459:2:9"},"nodeType":"YulFunctionCall","src":"459:32:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"452:6:9"},"nodeType":"YulFunctionCall","src":"452:40:9"},"nodeType":"YulIf","src":"449:60:9"},{"nodeType":"YulAssignment","src":"518:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"528:5:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"518:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"234:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"245:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"257:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"265:6:9","type":""}],"src":"192:347:9"},{"body":{"nodeType":"YulBlock","src":"576:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"593:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"600:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"605:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"596:3:9"},"nodeType":"YulFunctionCall","src":"596:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"586:6:9"},"nodeType":"YulFunctionCall","src":"586:31:9"},"nodeType":"YulExpressionStatement","src":"586:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"633:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"636:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"626:6:9"},"nodeType":"YulFunctionCall","src":"626:15:9"},"nodeType":"YulExpressionStatement","src":"626:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"657:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"660:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"650:6:9"},"nodeType":"YulFunctionCall","src":"650:15:9"},"nodeType":"YulExpressionStatement","src":"650:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"544:127:9"},{"body":{"nodeType":"YulBlock","src":"722:207:9","statements":[{"nodeType":"YulAssignment","src":"732:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"748:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"742:5:9"},"nodeType":"YulFunctionCall","src":"742:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"732:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"760:35:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"782:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"790:4:9","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:9"},"nodeType":"YulFunctionCall","src":"778:17:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"764:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"870:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"872:16:9"},"nodeType":"YulFunctionCall","src":"872:18:9"},"nodeType":"YulExpressionStatement","src":"872:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"813:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"825:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"810:2:9"},"nodeType":"YulFunctionCall","src":"810:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"849:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"861:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"846:2:9"},"nodeType":"YulFunctionCall","src":"846:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"807:2:9"},"nodeType":"YulFunctionCall","src":"807:62:9"},"nodeType":"YulIf","src":"804:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"908:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"912:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"901:6:9"},"nodeType":"YulFunctionCall","src":"901:22:9"},"nodeType":"YulExpressionStatement","src":"901:22:9"}]},"name":"allocate_memory_1039","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"711:6:9","type":""}],"src":"676:253:9"},{"body":{"nodeType":"YulBlock","src":"980:205:9","statements":[{"nodeType":"YulAssignment","src":"990:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1006:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1000:5:9"},"nodeType":"YulFunctionCall","src":"1000:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"990:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1018:33:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1040:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1048:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:9"},"nodeType":"YulFunctionCall","src":"1036:15:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1022:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1126:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1128:16:9"},"nodeType":"YulFunctionCall","src":"1128:18:9"},"nodeType":"YulExpressionStatement","src":"1128:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1069:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"1081:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1066:2:9"},"nodeType":"YulFunctionCall","src":"1066:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1105:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1117:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1102:2:9"},"nodeType":"YulFunctionCall","src":"1102:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1063:2:9"},"nodeType":"YulFunctionCall","src":"1063:62:9"},"nodeType":"YulIf","src":"1060:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1168:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1157:6:9"},"nodeType":"YulFunctionCall","src":"1157:22:9"},"nodeType":"YulExpressionStatement","src":"1157:22:9"}]},"name":"allocate_memory_1040","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"969:6:9","type":""}],"src":"934:251:9"},{"body":{"nodeType":"YulBlock","src":"1235:230:9","statements":[{"nodeType":"YulAssignment","src":"1245:19:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1261:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1255:5:9"},"nodeType":"YulFunctionCall","src":"1255:9:9"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1245:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1273:58:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1295:6:9"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1311:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"1317:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1307:3:9"},"nodeType":"YulFunctionCall","src":"1307:13:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1326:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1322:3:9"},"nodeType":"YulFunctionCall","src":"1322:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1303:3:9"},"nodeType":"YulFunctionCall","src":"1303:27:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1291:3:9"},"nodeType":"YulFunctionCall","src":"1291:40:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1277:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1406:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1408:16:9"},"nodeType":"YulFunctionCall","src":"1408:18:9"},"nodeType":"YulExpressionStatement","src":"1408:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1349:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"1361:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1346:2:9"},"nodeType":"YulFunctionCall","src":"1346:34:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1385:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1397:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1382:2:9"},"nodeType":"YulFunctionCall","src":"1382:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1343:2:9"},"nodeType":"YulFunctionCall","src":"1343:62:9"},"nodeType":"YulIf","src":"1340:88:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1444:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1448:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1437:6:9"},"nodeType":"YulFunctionCall","src":"1437:22:9"},"nodeType":"YulExpressionStatement","src":"1437:22:9"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1215:4:9","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1224:6:9","type":""}],"src":"1190:275:9"},{"body":{"nodeType":"YulBlock","src":"1565:1545:9","statements":[{"nodeType":"YulVariableDeclaration","src":"1575:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1585:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1579:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1632:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1641:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1644:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1634:6:9"},"nodeType":"YulFunctionCall","src":"1634:12:9"},"nodeType":"YulExpressionStatement","src":"1634:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1607:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1616:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1603:3:9"},"nodeType":"YulFunctionCall","src":"1603:23:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1628:2:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1599:3:9"},"nodeType":"YulFunctionCall","src":"1599:32:9"},"nodeType":"YulIf","src":"1596:52:9"},{"nodeType":"YulVariableDeclaration","src":"1657:37:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1684:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1671:12:9"},"nodeType":"YulFunctionCall","src":"1671:23:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1661:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1703:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1713:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1707:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1758:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1767:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1770:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1760:6:9"},"nodeType":"YulFunctionCall","src":"1760:12:9"},"nodeType":"YulExpressionStatement","src":"1760:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1746:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"1754:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1743:2:9"},"nodeType":"YulFunctionCall","src":"1743:14:9"},"nodeType":"YulIf","src":"1740:34:9"},{"nodeType":"YulVariableDeclaration","src":"1783:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1797:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"1808:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1793:3:9"},"nodeType":"YulFunctionCall","src":"1793:22:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1787:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1855:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1864:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1867:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1857:6:9"},"nodeType":"YulFunctionCall","src":"1857:12:9"},"nodeType":"YulExpressionStatement","src":"1857:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1835:7:9"},{"name":"_3","nodeType":"YulIdentifier","src":"1844:2:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1831:3:9"},"nodeType":"YulFunctionCall","src":"1831:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"1849:4:9","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1827:3:9"},"nodeType":"YulFunctionCall","src":"1827:27:9"},"nodeType":"YulIf","src":"1824:47:9"},{"nodeType":"YulVariableDeclaration","src":"1880:35:9","value":{"arguments":[],"functionName":{"name":"allocate_memory_1039","nodeType":"YulIdentifier","src":"1893:20:9"},"nodeType":"YulFunctionCall","src":"1893:22:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1884:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1931:5:9"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1951:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1938:12:9"},"nodeType":"YulFunctionCall","src":"1938:16:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1924:6:9"},"nodeType":"YulFunctionCall","src":"1924:31:9"},"nodeType":"YulExpressionStatement","src":"1924:31:9"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1975:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1982:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1971:3:9"},"nodeType":"YulFunctionCall","src":"1971:14:9"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2010:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2014:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2006:3:9"},"nodeType":"YulFunctionCall","src":"2006:11:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1987:18:9"},"nodeType":"YulFunctionCall","src":"1987:31:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1964:6:9"},"nodeType":"YulFunctionCall","src":"1964:55:9"},"nodeType":"YulExpressionStatement","src":"1964:55:9"},{"nodeType":"YulVariableDeclaration","src":"2028:40:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2060:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2064:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2056:3:9"},"nodeType":"YulFunctionCall","src":"2056:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2043:12:9"},"nodeType":"YulFunctionCall","src":"2043:25:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2032:7:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2136:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2145:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2148:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2138:6:9"},"nodeType":"YulFunctionCall","src":"2138:12:9"},"nodeType":"YulExpressionStatement","src":"2138:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2090:7:9"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2103:7:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2116:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2121:10:9","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2112:3:9"},"nodeType":"YulFunctionCall","src":"2112:20:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2099:3:9"},"nodeType":"YulFunctionCall","src":"2099:34:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2087:2:9"},"nodeType":"YulFunctionCall","src":"2087:47:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2080:6:9"},"nodeType":"YulFunctionCall","src":"2080:55:9"},"nodeType":"YulIf","src":"2077:75:9"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2172:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"2179:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2168:3:9"},"nodeType":"YulFunctionCall","src":"2168:14:9"},{"name":"value_1","nodeType":"YulIdentifier","src":"2184:7:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2161:6:9"},"nodeType":"YulFunctionCall","src":"2161:31:9"},"nodeType":"YulExpressionStatement","src":"2161:31:9"},{"nodeType":"YulVariableDeclaration","src":"2201:41:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2234:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2238:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2230:3:9"},"nodeType":"YulFunctionCall","src":"2230:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2217:12:9"},"nodeType":"YulFunctionCall","src":"2217:25:9"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2205:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2271:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2280:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2283:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2273:6:9"},"nodeType":"YulFunctionCall","src":"2273:12:9"},"nodeType":"YulExpressionStatement","src":"2273:12:9"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2257:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2267:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2254:2:9"},"nodeType":"YulFunctionCall","src":"2254:16:9"},"nodeType":"YulIf","src":"2251:36:9"},{"nodeType":"YulVariableDeclaration","src":"2296:27:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2310:2:9"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2314:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2306:3:9"},"nodeType":"YulFunctionCall","src":"2306:17:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2300:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2361:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2370:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2373:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2363:6:9"},"nodeType":"YulFunctionCall","src":"2363:12:9"},"nodeType":"YulExpressionStatement","src":"2363:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2343:7:9"},{"name":"_4","nodeType":"YulIdentifier","src":"2352:2:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2339:3:9"},"nodeType":"YulFunctionCall","src":"2339:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"2357:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2335:3:9"},"nodeType":"YulFunctionCall","src":"2335:25:9"},"nodeType":"YulIf","src":"2332:45:9"},{"nodeType":"YulVariableDeclaration","src":"2386:37:9","value":{"arguments":[],"functionName":{"name":"allocate_memory_1040","nodeType":"YulIdentifier","src":"2401:20:9"},"nodeType":"YulFunctionCall","src":"2401:22:9"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"2390:7:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2432:32:9","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"2461:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2448:12:9"},"nodeType":"YulFunctionCall","src":"2448:16:9"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"2436:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2493:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2502:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2505:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2495:6:9"},"nodeType":"YulFunctionCall","src":"2495:12:9"},"nodeType":"YulExpressionStatement","src":"2495:12:9"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"2479:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2489:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2476:2:9"},"nodeType":"YulFunctionCall","src":"2476:16:9"},"nodeType":"YulIf","src":"2473:36:9"},{"nodeType":"YulVariableDeclaration","src":"2518:27:9","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"2532:2:9"},{"name":"offset_2","nodeType":"YulIdentifier","src":"2536:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2528:3:9"},"nodeType":"YulFunctionCall","src":"2528:17:9"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"2522:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2593:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2602:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2605:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2595:6:9"},"nodeType":"YulFunctionCall","src":"2595:12:9"},"nodeType":"YulExpressionStatement","src":"2595:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"2572:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2576:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:9"},"nodeType":"YulFunctionCall","src":"2568:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2583:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2564:3:9"},"nodeType":"YulFunctionCall","src":"2564:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2557:6:9"},"nodeType":"YulFunctionCall","src":"2557:35:9"},"nodeType":"YulIf","src":"2554:55:9"},{"nodeType":"YulVariableDeclaration","src":"2618:26:9","value":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"2641:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2628:12:9"},"nodeType":"YulFunctionCall","src":"2628:16:9"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"2622:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2667:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2669:16:9"},"nodeType":"YulFunctionCall","src":"2669:18:9"},"nodeType":"YulExpressionStatement","src":"2669:18:9"}]},"condition":{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"2659:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2663:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2656:2:9"},"nodeType":"YulFunctionCall","src":"2656:10:9"},"nodeType":"YulIf","src":"2653:36:9"},{"nodeType":"YulVariableDeclaration","src":"2698:66:9","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"2739:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2743:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2735:3:9"},"nodeType":"YulFunctionCall","src":"2735:13:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2754:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2750:3:9"},"nodeType":"YulFunctionCall","src":"2750:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2731:3:9"},"nodeType":"YulFunctionCall","src":"2731:27:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2760:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2727:3:9"},"nodeType":"YulFunctionCall","src":"2727:36:9"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2711:15:9"},"nodeType":"YulFunctionCall","src":"2711:53:9"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"2702:5:9","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2780:5:9"},{"name":"_6","nodeType":"YulIdentifier","src":"2787:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2773:6:9"},"nodeType":"YulFunctionCall","src":"2773:17:9"},"nodeType":"YulExpressionStatement","src":"2773:17:9"},{"body":{"nodeType":"YulBlock","src":"2836:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2845:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2848:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2838:6:9"},"nodeType":"YulFunctionCall","src":"2838:12:9"},"nodeType":"YulExpressionStatement","src":"2838:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"2813:2:9"},{"name":"_6","nodeType":"YulIdentifier","src":"2817:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2809:3:9"},"nodeType":"YulFunctionCall","src":"2809:11:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2822:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2805:3:9"},"nodeType":"YulFunctionCall","src":"2805:20:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2827:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2802:2:9"},"nodeType":"YulFunctionCall","src":"2802:33:9"},"nodeType":"YulIf","src":"2799:53:9"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2878:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2885:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2874:3:9"},"nodeType":"YulFunctionCall","src":"2874:14:9"},{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"2894:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2898:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2890:3:9"},"nodeType":"YulFunctionCall","src":"2890:11:9"},{"name":"_6","nodeType":"YulIdentifier","src":"2903:2:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2861:12:9"},"nodeType":"YulFunctionCall","src":"2861:45:9"},"nodeType":"YulExpressionStatement","src":"2861:45:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2930:5:9"},{"name":"_6","nodeType":"YulIdentifier","src":"2937:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2926:3:9"},"nodeType":"YulFunctionCall","src":"2926:14:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2942:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2922:3:9"},"nodeType":"YulFunctionCall","src":"2922:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2947:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2915:6:9"},"nodeType":"YulFunctionCall","src":"2915:34:9"},"nodeType":"YulExpressionStatement","src":"2915:34:9"},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"2965:7:9"},{"name":"array","nodeType":"YulIdentifier","src":"2974:5:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2958:6:9"},"nodeType":"YulFunctionCall","src":"2958:22:9"},"nodeType":"YulExpressionStatement","src":"2958:22:9"},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"3000:7:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3009:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2996:3:9"},"nodeType":"YulFunctionCall","src":"2996:16:9"},{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"3031:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3035:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3027:3:9"},"nodeType":"YulFunctionCall","src":"3027:11:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3014:12:9"},"nodeType":"YulFunctionCall","src":"3014:25:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2989:6:9"},"nodeType":"YulFunctionCall","src":"2989:51:9"},"nodeType":"YulExpressionStatement","src":"2989:51:9"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3060:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"3067:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3056:3:9"},"nodeType":"YulFunctionCall","src":"3056:14:9"},{"name":"value_2","nodeType":"YulIdentifier","src":"3072:7:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3049:6:9"},"nodeType":"YulFunctionCall","src":"3049:31:9"},"nodeType":"YulExpressionStatement","src":"3049:31:9"},{"nodeType":"YulAssignment","src":"3089:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"3099:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3089:6:9"}]}]},"name":"abi_decode_tuple_t_struct$_Request_$1177_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1531:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1542:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1554:6:9","type":""}],"src":"1470:1640:9"},{"body":{"nodeType":"YulBlock","src":"3216:76:9","statements":[{"nodeType":"YulAssignment","src":"3226:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3238:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3249:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3234:3:9"},"nodeType":"YulFunctionCall","src":"3234:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3226:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3268:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"3279:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3261:6:9"},"nodeType":"YulFunctionCall","src":"3261:25:9"},"nodeType":"YulExpressionStatement","src":"3261:25:9"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3185:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3196:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3207:4:9","type":""}],"src":"3115:177:9"},{"body":{"nodeType":"YulBlock","src":"3367:116:9","statements":[{"body":{"nodeType":"YulBlock","src":"3413:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3422:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3425:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3415:6:9"},"nodeType":"YulFunctionCall","src":"3415:12:9"},"nodeType":"YulExpressionStatement","src":"3415:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3388:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"3397:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3384:3:9"},"nodeType":"YulFunctionCall","src":"3384:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3409:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3380:3:9"},"nodeType":"YulFunctionCall","src":"3380:32:9"},"nodeType":"YulIf","src":"3377:52:9"},{"nodeType":"YulAssignment","src":"3438:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3467:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3448:18:9"},"nodeType":"YulFunctionCall","src":"3448:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3438:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3333:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3344:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3356:6:9","type":""}],"src":"3297:186:9"},{"body":{"nodeType":"YulBlock","src":"3583:92:9","statements":[{"nodeType":"YulAssignment","src":"3593:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3605:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3616:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3601:3:9"},"nodeType":"YulFunctionCall","src":"3601:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3593:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3635:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3660:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3653:6:9"},"nodeType":"YulFunctionCall","src":"3653:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3646:6:9"},"nodeType":"YulFunctionCall","src":"3646:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3628:6:9"},"nodeType":"YulFunctionCall","src":"3628:41:9"},"nodeType":"YulExpressionStatement","src":"3628:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3552:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3563:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3574:4:9","type":""}],"src":"3488:187:9"},{"body":{"nodeType":"YulBlock","src":"3781:102:9","statements":[{"nodeType":"YulAssignment","src":"3791:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3803:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3814:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3799:3:9"},"nodeType":"YulFunctionCall","src":"3799:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3791:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3833:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3848:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3864:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3869:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3860:3:9"},"nodeType":"YulFunctionCall","src":"3860:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"3873:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3856:3:9"},"nodeType":"YulFunctionCall","src":"3856:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3844:3:9"},"nodeType":"YulFunctionCall","src":"3844:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3826:6:9"},"nodeType":"YulFunctionCall","src":"3826:51:9"},"nodeType":"YulExpressionStatement","src":"3826:51:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3750:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3761:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3772:4:9","type":""}],"src":"3680:203:9"},{"body":{"nodeType":"YulBlock","src":"3937:373:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3947:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3967:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3961:5:9"},"nodeType":"YulFunctionCall","src":"3961:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3951:6:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3989:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"3994:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3982:6:9"},"nodeType":"YulFunctionCall","src":"3982:19:9"},"nodeType":"YulExpressionStatement","src":"3982:19:9"},{"nodeType":"YulVariableDeclaration","src":"4010:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4019:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4014:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4081:110:9","statements":[{"nodeType":"YulVariableDeclaration","src":"4095:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4105:4:9","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4099:2:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4137:3:9"},{"name":"i","nodeType":"YulIdentifier","src":"4142:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:9"},"nodeType":"YulFunctionCall","src":"4133:11:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4146:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4129:3:9"},"nodeType":"YulFunctionCall","src":"4129:20:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4165:5:9"},{"name":"i","nodeType":"YulIdentifier","src":"4172:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4161:3:9"},"nodeType":"YulFunctionCall","src":"4161:13:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4176:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4157:3:9"},"nodeType":"YulFunctionCall","src":"4157:22:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4151:5:9"},"nodeType":"YulFunctionCall","src":"4151:29:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4122:6:9"},"nodeType":"YulFunctionCall","src":"4122:59:9"},"nodeType":"YulExpressionStatement","src":"4122:59:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4040:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"4043:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4037:2:9"},"nodeType":"YulFunctionCall","src":"4037:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4051:21:9","statements":[{"nodeType":"YulAssignment","src":"4053:17:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4062:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"4065:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4058:3:9"},"nodeType":"YulFunctionCall","src":"4058:12:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4053:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"4033:3:9","statements":[]},"src":"4029:162:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4215:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"4220:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4211:3:9"},"nodeType":"YulFunctionCall","src":"4211:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"4229:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:9"},"nodeType":"YulFunctionCall","src":"4207:27:9"},{"kind":"number","nodeType":"YulLiteral","src":"4236:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4200:6:9"},"nodeType":"YulFunctionCall","src":"4200:38:9"},"nodeType":"YulExpressionStatement","src":"4200:38:9"},{"nodeType":"YulAssignment","src":"4247:57:9","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4262:3:9"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4275:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"4283:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4271:3:9"},"nodeType":"YulFunctionCall","src":"4271:15:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4292:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4288:3:9"},"nodeType":"YulFunctionCall","src":"4288:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4267:3:9"},"nodeType":"YulFunctionCall","src":"4267:29:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4258:3:9"},"nodeType":"YulFunctionCall","src":"4258:39:9"},{"kind":"number","nodeType":"YulLiteral","src":"4299:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4254:3:9"},"nodeType":"YulFunctionCall","src":"4254:50:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4247:3:9"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3914:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3921:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3929:3:9","type":""}],"src":"3888:422:9"},{"body":{"nodeType":"YulBlock","src":"4488:211:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4505:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"4516:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4498:6:9"},"nodeType":"YulFunctionCall","src":"4498:25:9"},"nodeType":"YulExpressionStatement","src":"4498:25:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4543:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4554:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4539:3:9"},"nodeType":"YulFunctionCall","src":"4539:18:9"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4563:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4575:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4580:10:9","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4571:3:9"},"nodeType":"YulFunctionCall","src":"4571:20:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4559:3:9"},"nodeType":"YulFunctionCall","src":"4559:33:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4532:6:9"},"nodeType":"YulFunctionCall","src":"4532:61:9"},"nodeType":"YulExpressionStatement","src":"4532:61:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4613:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4624:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4609:3:9"},"nodeType":"YulFunctionCall","src":"4609:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"4629:2:9","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4602:6:9"},"nodeType":"YulFunctionCall","src":"4602:30:9"},"nodeType":"YulExpressionStatement","src":"4602:30:9"},{"nodeType":"YulAssignment","src":"4641:52:9","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4666:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4678:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4689:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4674:3:9"},"nodeType":"YulFunctionCall","src":"4674:18:9"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"4649:16:9"},"nodeType":"YulFunctionCall","src":"4649:44:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4641:4:9"}]}]},"name":"abi_encode_tuple_t_bytes32_t_bytes4_t_bytes_memory_ptr__to_t_bytes32_t_bytes4_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4441:9:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4452:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4460:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4468:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4479:4:9","type":""}],"src":"4315:384:9"},{"body":{"nodeType":"YulBlock","src":"4823:98:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4840:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4851:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4833:6:9"},"nodeType":"YulFunctionCall","src":"4833:21:9"},"nodeType":"YulExpressionStatement","src":"4833:21:9"},{"nodeType":"YulAssignment","src":"4863:52:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4888:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4900:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4911:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4896:3:9"},"nodeType":"YulFunctionCall","src":"4896:18:9"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"4871:16:9"},"nodeType":"YulFunctionCall","src":"4871:44:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4863:4:9"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4792:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4803:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4814:4:9","type":""}],"src":"4704:217:9"},{"body":{"nodeType":"YulBlock","src":"5100:228:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5117:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5128:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5110:6:9"},"nodeType":"YulFunctionCall","src":"5110:21:9"},"nodeType":"YulExpressionStatement","src":"5110:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5151:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5162:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5147:3:9"},"nodeType":"YulFunctionCall","src":"5147:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"5167:2:9","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5140:6:9"},"nodeType":"YulFunctionCall","src":"5140:30:9"},"nodeType":"YulExpressionStatement","src":"5140:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5190:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5201:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5186:3:9"},"nodeType":"YulFunctionCall","src":"5186:18:9"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"5206:34:9","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5179:6:9"},"nodeType":"YulFunctionCall","src":"5179:62:9"},"nodeType":"YulExpressionStatement","src":"5179:62:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5261:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5272:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5257:3:9"},"nodeType":"YulFunctionCall","src":"5257:18:9"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"5277:8:9","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5250:6:9"},"nodeType":"YulFunctionCall","src":"5250:36:9"},"nodeType":"YulExpressionStatement","src":"5250:36:9"},{"nodeType":"YulAssignment","src":"5295:27:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5307:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5318:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5303:3:9"},"nodeType":"YulFunctionCall","src":"5303:19:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5295:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5077:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5091:4:9","type":""}],"src":"4926:402:9"},{"body":{"nodeType":"YulBlock","src":"5507:182:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5524:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5535:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5517:6:9"},"nodeType":"YulFunctionCall","src":"5517:21:9"},"nodeType":"YulExpressionStatement","src":"5517:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5558:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5569:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5554:3:9"},"nodeType":"YulFunctionCall","src":"5554:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"5574:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5547:6:9"},"nodeType":"YulFunctionCall","src":"5547:30:9"},"nodeType":"YulExpressionStatement","src":"5547:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5597:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5608:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5593:3:9"},"nodeType":"YulFunctionCall","src":"5593:18:9"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"5613:34:9","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5586:6:9"},"nodeType":"YulFunctionCall","src":"5586:62:9"},"nodeType":"YulExpressionStatement","src":"5586:62:9"},{"nodeType":"YulAssignment","src":"5657:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5669:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5680:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5665:3:9"},"nodeType":"YulFunctionCall","src":"5665:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5657:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5484:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5498:4:9","type":""}],"src":"5333:356:9"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_1039() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x80)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_1040() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_tuple_t_struct$_Request_$1177_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if slt(sub(dataEnd, _3), 0x80) { revert(0, 0) }\n        let value := allocate_memory_1039()\n        mstore(value, calldataload(_3))\n        mstore(add(value, _1), abi_decode_address(add(_3, _1)))\n        let value_1 := calldataload(add(_3, 64))\n        if iszero(eq(value_1, and(value_1, shl(224, 0xffffffff)))) { revert(0, 0) }\n        mstore(add(value, 64), value_1)\n        let offset_1 := calldataload(add(_3, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        let _4 := add(_3, offset_1)\n        if slt(sub(dataEnd, _4), 64) { revert(0, 0) }\n        let value_2 := allocate_memory_1040()\n        let offset_2 := calldataload(_4)\n        if gt(offset_2, _2) { revert(0, 0) }\n        let _5 := add(_4, offset_2)\n        if iszero(slt(add(_5, 0x1f), dataEnd)) { revert(0, 0) }\n        let _6 := calldataload(_5)\n        if gt(_6, _2) { panic_error_0x41() }\n        let array := allocate_memory(add(and(add(_6, 0x1f), not(31)), _1))\n        mstore(array, _6)\n        if gt(add(add(_5, _6), _1), dataEnd) { revert(0, 0) }\n        calldatacopy(add(array, _1), add(_5, _1), _6)\n        mstore(add(add(array, _6), _1), 0)\n        mstore(value_2, array)\n        mstore(add(value_2, _1), calldataload(add(_4, _1)))\n        mstore(add(value, 96), value_2)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes4_t_bytes_memory_ptr__to_t_bytes32_t_bytes4_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, shl(224, 0xffffffff)))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_bytes(value2, add(headStart, 96))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100625760003560e01c80631ec6e24f14610067578063215d35cc1461007c578063715018a6146100a2578063732995af146100aa5780638da5cb5b146100e6578063f2fde38b14610101575b600080fd5b61007a610075366004610340565b610114565b005b61008f61008a36600461040f565b610147565b6040519081526020015b60405180910390f35b61007a6101e8565b6100d66100b8366004610540565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610099565b6000546040516001600160a01b039091168152602001610099565b61007a61010f366004610540565b6101fc565b61011c61027a565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b805160408083015160608401515191516000938493631ec6e24f60e01b93610174939091906024016105a8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252845191519092507fafb0931d973a0c62c636ef23ddd0b58b890a9bf7c77bca04c2ffbb30f61a8e86906101da9084906105d9565b60405180910390a250505190565b6101f061027a565b6101fa60006102d4565b565b61020461027a565b6001600160a01b03811661026e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610277816102d4565b50565b6000546001600160a01b031633146101fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610265565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461033b57600080fd5b919050565b6000806040838503121561035357600080fd5b61035c83610324565b91506020830135801515811461037157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156103b5576103b561037c565b60405290565b6040805190810167ffffffffffffffff811182821017156103b5576103b561037c565b604051601f8201601f1916810167ffffffffffffffff811182821017156104075761040761037c565b604052919050565b6000602080838503121561042257600080fd5b823567ffffffffffffffff8082111561043a57600080fd5b908401906080828703121561044e57600080fd5b610456610392565b82358152610465848401610324565b8185015260408301356001600160e01b03198116811461048457600080fd5b604082015260608301358281111561049b57600080fd5b9290920191604083880312156104b057600080fd5b6104b86103bb565b8335838111156104c757600080fd5b8401601f810189136104d857600080fd5b8035848111156104ea576104ea61037c565b6104fc601f8201601f191688016103de565b9450808552898782840101111561051257600080fd5b8087830188870137600090850187015250918252918301359281019290925260608101919091529392505050565b60006020828403121561055257600080fd5b61055b82610324565b9392505050565b6000815180845260005b818110156105885760208185018101518683018201520161056c565b506000602082860101526020601f19601f83011685010191505092915050565b83815263ffffffff60e01b831660208201526060604082015260006105d06060830184610562565b95945050505050565b60208152600061055b602083018461056256fea2646970667358221220bec162703ff5bd6cc76af0119918d370189e8b4f5b78cb5ef1adf8f91ef55e1664736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1EC6E24F EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x215D35CC EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x732995AF EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x340 JUMP JUMPDEST PUSH2 0x114 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x40F JUMP JUMPDEST PUSH2 0x147 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7A PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0xB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x540 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x99 JUMP JUMPDEST PUSH2 0x7A PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x540 JUMP JUMPDEST PUSH2 0x1FC JUMP JUMPDEST PUSH2 0x11C PUSH2 0x27A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD MLOAD SWAP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0x1EC6E24F PUSH1 0xE0 SHL SWAP4 PUSH2 0x174 SWAP4 SWAP1 SWAP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE DUP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 POP PUSH32 0xAFB0931D973A0C62C636EF23DDD0B58B890A9BF7C77BCA04C2FFBB30F61A8E86 SWAP1 PUSH2 0x1DA SWAP1 DUP5 SWAP1 PUSH2 0x5D9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1F0 PUSH2 0x27A JUMP JUMPDEST PUSH2 0x1FA PUSH1 0x0 PUSH2 0x2D4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x204 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x26E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x277 DUP2 PUSH2 0x2D4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x265 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35C DUP4 PUSH2 0x324 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3B5 JUMPI PUSH2 0x3B5 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3B5 JUMPI PUSH2 0x3B5 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x407 JUMPI PUSH2 0x407 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x80 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x456 PUSH2 0x392 JUMP JUMPDEST DUP3 CALLDATALOAD DUP2 MSTORE PUSH2 0x465 DUP5 DUP5 ADD PUSH2 0x324 JUMP JUMPDEST DUP2 DUP6 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x49B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x40 DUP4 DUP9 SUB SLT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B8 PUSH2 0x3BB JUMP JUMPDEST DUP4 CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP10 SGT PUSH2 0x4D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD DUP5 DUP2 GT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4EA PUSH2 0x37C JUMP JUMPDEST PUSH2 0x4FC PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP9 ADD PUSH2 0x3DE JUMP JUMPDEST SWAP5 POP DUP1 DUP6 MSTORE DUP10 DUP8 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP8 DUP4 ADD DUP9 DUP8 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP6 ADD DUP8 ADD MSTORE POP SWAP2 DUP3 MSTORE SWAP2 DUP4 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55B DUP3 PUSH2 0x324 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x588 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x56C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x562 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x55B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x562 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xC1 PUSH3 0x703FF5 0xBD PUSH13 0xC76AF0119918D370189E8B4F5B PUSH25 0xCB5EF1ADF8F91EF55E1664736F6C6343000811003300000000 ","sourceMap":"181:1009:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;461:137;;;;;;:::i;:::-;;:::i;:::-;;858:329;;;;;;:::i;:::-;;:::i;:::-;;;3261:25:9;;;3249:2;3234:18;858:329:6;;;;;;;;1824:101:0;;;:::i;604:121:6:-;;;;;;:::i;:::-;-1:-1:-1;;;;;693:26:6;673:4;693:26;;;:9;:26;;;;;;;;;604:121;;;;3653:14:9;;3646:22;3628:41;;3616:2;3601:18;604:121:6;3488:187:9;1201:85:0;1247:7;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:0;;;3826:51:9;;3814:2;3799:18;1201:85:0;3680:203:9;2074:198:0;;;;;;:::i;:::-;;:::i;461:137:6:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;553:26:6;;;::::1;;::::0;;;:9:::1;:26;::::0;;;;:39;;-1:-1:-1;;553:39:6::1;::::0;::::1;;::::0;;;::::1;::::0;;461:137::o;858:329::-;1042:6;;1057:22;;;;;1088:15;;;;:19;974:140;;928:7;;;;-1:-1:-1;;;1005:28:6;974:140;;1057:22;;1088:19;974:140;;;:::i;:::-;;;;-1:-1:-1;;974:140:6;;;;;;;;;;;;;;-1:-1:-1;;;;;974:140:6;-1:-1:-1;;;;;;974:140:6;;;;;;;;;;1138:6;;1126:35;;974:140;;-1:-1:-1;1126:35:6;;;;974:140;;1126:35;:::i;:::-;;;;;;;;-1:-1:-1;;1175:6:6;;858:329::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;2074:198::-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;5128:2:9;2154:73:0::1;::::0;::::1;5110:21:9::0;5167:2;5147:18;;;5140:30;5206:34;5186:18;;;5179:62;-1:-1:-1;;;5257:18:9;;;5250:36;5303:19;;2154:73:0::1;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:1;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;5535:2:9;1414:68:0;;;5517:21:9;;;5554:18;;;5547:30;5613:34;5593:18;;;5586:62;5665:18;;1414:68:0;5333:356:9;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:173:9:-;82:20;;-1:-1:-1;;;;;131:31:9;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:347::-;257:6;265;318:2;306:9;297:7;293:23;289:32;286:52;;;334:1;331;324:12;286:52;357:29;376:9;357:29;:::i;:::-;347:39;;436:2;425:9;421:18;408:32;483:5;476:13;469:21;462:5;459:32;449:60;;505:1;502;495:12;449:60;528:5;518:15;;;192:347;;;;;:::o;544:127::-;605:10;600:3;596:20;593:1;586:31;636:4;633:1;626:15;660:4;657:1;650:15;676:253;748:2;742:9;790:4;778:17;;825:18;810:34;;846:22;;;807:62;804:88;;;872:18;;:::i;:::-;908:2;901:22;676:253;:::o;934:251::-;1006:2;1000:9;;;1036:15;;1081:18;1066:34;;1102:22;;;1063:62;1060:88;;;1128:18;;:::i;1190:275::-;1261:2;1255:9;1326:2;1307:13;;-1:-1:-1;;1303:27:9;1291:40;;1361:18;1346:34;;1382:22;;;1343:62;1340:88;;;1408:18;;:::i;:::-;1444:2;1437:22;1190:275;;-1:-1:-1;1190:275:9:o;1470:1640::-;1554:6;1585:2;1628;1616:9;1607:7;1603:23;1599:32;1596:52;;;1644:1;1641;1634:12;1596:52;1684:9;1671:23;1713:18;1754:2;1746:6;1743:14;1740:34;;;1770:1;1767;1760:12;1740:34;1793:22;;;;1849:4;1831:16;;;1827:27;1824:47;;;1867:1;1864;1857:12;1824:47;1893:22;;:::i;:::-;1951:2;1938:16;1931:5;1924:31;1987;2014:2;2010;2006:11;1987:31;:::i;:::-;1971:14;;;1964:55;2064:2;2056:11;;2043:25;-1:-1:-1;;;;;;2099:34:9;;2087:47;;2077:75;;2148:1;2145;2138:12;2077:75;2179:2;2168:14;;2161:31;2238:2;2230:11;;2217:25;2254:16;;;2251:36;;;2283:1;2280;2273:12;2251:36;2306:17;;;;;2357:2;2339:16;;;2335:25;2332:45;;;2373:1;2370;2363:12;2332:45;2401:22;;:::i;:::-;2461:2;2448:16;2489:2;2479:8;2476:16;2473:36;;;2505:1;2502;2495:12;2473:36;2528:17;;2576:4;2568:13;;2564:27;-1:-1:-1;2554:55:9;;2605:1;2602;2595:12;2554:55;2641:2;2628:16;2663:2;2659;2656:10;2653:36;;;2669:18;;:::i;:::-;2711:53;2754:2;2735:13;;-1:-1:-1;;2731:27:9;2727:36;;2711:53;:::i;:::-;2698:66;;2787:2;2780:5;2773:17;2827:7;2822:2;2817;2813;2809:11;2805:20;2802:33;2799:53;;;2848:1;2845;2838:12;2799:53;2903:2;2898;2894;2890:11;2885:2;2878:5;2874:14;2861:45;2947:1;2926:14;;;2922:23;;2915:34;-1:-1:-1;2958:22:9;;;3027:11;;;3014:25;2996:16;;;2989:51;;;;3067:2;3056:14;;3049:31;;;;3060:5;1470:1640;-1:-1:-1;;;1470:1640:9:o;3297:186::-;3356:6;3409:2;3397:9;3388:7;3384:23;3380:32;3377:52;;;3425:1;3422;3415:12;3377:52;3448:29;3467:9;3448:29;:::i;:::-;3438:39;3297:186;-1:-1:-1;;;3297:186:9:o;3888:422::-;3929:3;3967:5;3961:12;3994:6;3989:3;3982:19;4019:1;4029:162;4043:6;4040:1;4037:13;4029:162;;;4105:4;4161:13;;;4157:22;;4151:29;4133:11;;;4129:20;;4122:59;4058:12;4029:162;;;4033:3;4236:1;4229:4;4220:6;4215:3;4211:16;4207:27;4200:38;4299:4;4292:2;4288:7;4283:2;4275:6;4271:15;4267:29;4262:3;4258:39;4254:50;4247:57;;;3888:422;;;;:::o;4315:384::-;4516:6;4505:9;4498:25;4580:10;4575:3;4571:20;4563:6;4559:33;4554:2;4543:9;4539:18;4532:61;4629:2;4624;4613:9;4609:18;4602:30;4479:4;4649:44;4689:2;4678:9;4674:18;4666:6;4649:44;:::i;:::-;4641:52;4315:384;-1:-1:-1;;;;;4315:384:9:o;4704:217::-;4851:2;4840:9;4833:21;4814:4;4871:44;4911:2;4900:9;4896:18;4888:6;4871:44;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"314000","executionCost":"26196","totalCost":"340196"},"external":{"getReporter(address)":"2593","owner()":"2367","renounceOwnership()":"infinite","sendRequest((bytes32,address,bytes4,(bytes,uint256)))":"infinite","transferOwnership(address)":"28421","updateReporter(address,bool)":"26836"},"internal":{"_hasReporter(address)":"infinite"}},"methodIdentifiers":{"getReporter(address)":"732995af","owner()":"8da5cb5b","renounceOwnership()":"715018a6","sendRequest((bytes32,address,bytes4,(bytes,uint256)))":"215d35cc","transferOwnership(address)":"f2fde38b","updateReporter(address,bool)":"1ec6e24f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporterAddress\",\"type\":\"address\"}],\"name\":\"getReporter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferBase.buffer\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"internalType\":\"struct RequestLib.Request\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReporter\",\"type\":\"bool\"}],\"name\":\"updateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pull/HttpRequestOracle.sol\":\"HttpRequestOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.19;\\r\\n\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary Buffer {\\r\\n  using BufferBase for BufferBase.buffer;\\r\\n\\r\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\r\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\r\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\r\\n\\r\\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\\r\\n    if (value <= 23) {\\r\\n      buf.appendUint8(uint8((major << 5) | value));\\r\\n    } else if (value <= 0xFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 24));\\r\\n      buf.appendInt(value, 1);\\r\\n    } else if (value <= 0xFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 25));\\r\\n      buf.appendInt(value, 2);\\r\\n    } else if (value <= 0xFFFFFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 26));\\r\\n      buf.appendInt(value, 4);\\r\\n    } else {\\r\\n      buf.appendUint8(uint8((major << 5) | 27));\\r\\n      buf.appendInt(value, 8);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\\r\\n    buf.appendUint8(uint8((major << 5) | 31));\\r\\n  }\\r\\n\\r\\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, value);\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\\r\\n    if (value < -0x10000000000000000) {\\r\\n      encodeSignedBigNum(buf, value);\\r\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, uint(value));\\r\\n    } else if (value >= 0) {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\r\\n    buf.append(value);\\r\\n  }\\r\\n\\r\\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(value));\\r\\n  }\\r\\n\\r\\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\r\\n  }\\r\\n\\r\\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\r\\n    buf.append(bytes(value));\\r\\n  }\\r\\n\\r\\n  function startArray(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\r\\n  }\\r\\n\\r\\n  function startMap(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\r\\n  }\\r\\n\\r\\n  function endSequence(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2aa6ac6639551697f8b11dc7daed84b0d51d9b51405c25b373b024f0e1c4f712\",\"license\":\"MIT\"},\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"},\"contracts/lib/RequestLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary RequestLib {\\r\\n  using Buffer for BufferBase.buffer;\\r\\n\\r\\n  struct Request {\\r\\n    bytes32 id;\\r\\n    address callbackAddress;\\r\\n    bytes4 callbackFunctionId;\\r\\n    BufferBase.buffer requestData;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    Request memory self,\\r\\n    address callbackAddr,\\r\\n    bytes4 callbackFunc\\r\\n  ) internal pure returns (Request memory) {\\r\\n    self.callbackAddress = callbackAddr;\\r\\n    self.callbackFunctionId = callbackFunc;\\r\\n    return self;\\r\\n  }\\r\\n\\r\\n  function setId(Request memory self, bytes32 id) internal pure {\\r\\n    self.id = id;\\r\\n  }\\r\\n\\r\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\r\\n    self.requestData.encodeString(key);\\r\\n    self.requestData.encodeString(value);\\r\\n  }\\r\\n\\r\\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\\r\\n    self.requestData.encodeString(\\\" header(\\\");\\r\\n    self.requestData.encodeString(headerKey);\\r\\n    self.requestData.encodeString(value);\\r\\n    self.requestData.encodeString(\\\") \\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf8f70cb860bdc2202257a50ef25d755d31ccebcf9ffb900f8df3e9045831fd53\",\"license\":\"UNLICENSED\"},\"contracts/pull/HttpRequestOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../lib/RequestLib.sol\\\";\\r\\n\\r\\nerror OnlyReporter();\\r\\n\\r\\ncontract HttpRequestOracle is Ownable {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  mapping(address => bool) reporters;\\r\\n\\r\\n  event RequestSent(bytes32 indexed id, bytes data);\\r\\n  event RequestFulfilled(bytes32 indexed id);\\r\\n  event RequestCancelled(bytes32 indexed id);\\r\\n\\r\\n  function updateReporter(address reporterAddress, bool isReporter) external onlyOwner {\\r\\n    reporters[reporterAddress] = isReporter;\\r\\n  }\\r\\n\\r\\n  function getReporter(address reporterAddress) external view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function _hasReporter(address reporterAddress) private view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function sendRequest(RequestLib.Request memory req) external returns (bytes32) {\\r\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\r\\n      this.updateReporter.selector,\\r\\n      req.id,\\r\\n      req.callbackFunctionId,\\r\\n      req.requestData.buf\\r\\n    );\\r\\n    emit RequestSent(req.id, encodedRequest);\\r\\n    return req.id;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc69e4f20d24c112f1a3effb2b7c0b0af033f172d94ced2149c73195e9e2f7d04\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/pull/HttpRequestOracle.sol:HttpRequestOracle","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1307,"contract":"contracts/pull/HttpRequestOracle.sol:HttpRequestOracle","label":"reporters","offset":0,"slot":"1","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/pull/HttpRequestWithHeader.sol":{"HttpRequestConsumerWithHeader":{"abi":[{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":false,"internalType":"string","name":"prediction_signal","type":"string"}],"name":"RequestExchangeRate","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_requestId","type":"bytes32"},{"internalType":"string","name":"_prediction_signal","type":"string"}],"name":"_requestedDataCompleted","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1429":{"entryPoint":null,"id":1429,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":84,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:306:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:9","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:9"},"nodeType":"YulFunctionCall","src":"143:12:9"},"nodeType":"YulExpressionStatement","src":"143:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:9"},"nodeType":"YulFunctionCall","src":"112:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:9"},"nodeType":"YulFunctionCall","src":"108:32:9"},"nodeType":"YulIf","src":"105:52:9"},{"nodeType":"YulVariableDeclaration","src":"166:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:9"},"nodeType":"YulFunctionCall","src":"179:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:9"},"nodeType":"YulFunctionCall","src":"260:12:9"},"nodeType":"YulExpressionStatement","src":"260:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:9"},"nodeType":"YulFunctionCall","src":"239:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:9"},"nodeType":"YulFunctionCall","src":"235:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:9"},"nodeType":"YulFunctionCall","src":"224:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:9"},"nodeType":"YulFunctionCall","src":"214:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:9"},"nodeType":"YulFunctionCall","src":"207:50:9"},"nodeType":"YulIf","src":"204:70:9"},{"nodeType":"YulAssignment","src":"283:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:9"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:9","type":""}],"src":"14:290:9"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516103be3803806103be83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61032b806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634cd581ed14610030575b600080fd5b61004361003e3660046100a4565b610045565b005b817ff29235782b6dafca64e492ae4ebc3534f115394e4e462365c8ff66ec198b414482604051610075919061015f565b60405180910390a260016100898282610235565b505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156100b757600080fd5b82359150602083013567ffffffffffffffff808211156100d657600080fd5b818501915085601f8301126100ea57600080fd5b8135818111156100fc576100fc61008e565b604051601f8201601f19908116603f011681019083821181831017156101245761012461008e565b8160405282815288602084870101111561013d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208083528351808285015260005b8181101561018c57858101830151858201604001528201610170565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c908216806101c157607f821691505b6020821081036101e157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561008957600081815260208120601f850160051c8101602086101561020e5750805b601f850160051c820191505b8181101561022d5782815560010161021a565b505050505050565b815167ffffffffffffffff81111561024f5761024f61008e565b6102638161025d84546101ad565b846101e7565b602080601f83116001811461029857600084156102805750858301515b600019600386901b1c1916600185901b17855561022d565b600085815260208120601f198616915b828110156102c7578886015182559484019460019091019084016102a8565b50858210156102e55787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122090556279bdaf6e294b50a2acb91abd20b0c8605a3f9d456972e6944e5621974a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3BE CODESIZE SUB DUP1 PUSH2 0x3BE DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x32B DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4CD581ED EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA4 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST DUP2 PUSH32 0xF29235782B6DAFCA64E492AE4EBC3534F115394E4E462365C8FF66EC198B4144 DUP3 PUSH1 0x40 MLOAD PUSH2 0x75 SWAP2 SWAP1 PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 PUSH2 0x89 DUP3 DUP3 PUSH2 0x235 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFC JUMPI PUSH2 0xFC PUSH2 0x8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x124 JUMPI PUSH2 0x124 PUSH2 0x8E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x170 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x20E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22D JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x21A JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F JUMPI PUSH2 0x24F PUSH2 0x8E JUMP JUMPDEST PUSH2 0x263 DUP2 PUSH2 0x25D DUP5 SLOAD PUSH2 0x1AD JUMP JUMPDEST DUP5 PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x298 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x280 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x22D JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2C7 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2A8 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2E5 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 SSTORE PUSH3 0x79BDAF PUSH15 0x294B50A2ACB91ABD20B0C8605A3F9D GASLIMIT PUSH10 0x72E6944E5621974A6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"137:1719:7:-:0;;;395:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;431:10;:39;;-1:-1:-1;;;;;;431:39:7;-1:-1:-1;;;;;431:39:7;;;;;;;;;;137:1719;;14:290:9;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:9;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:9:o;:::-;137:1719:7;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_requestedDataCompleted_1507":{"entryPoint":69,"id":1507,"parameterSlots":2,"returnSlots":0},"abi_decode_tuple_t_bytes32t_string_memory_ptr":{"entryPoint":164,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":351,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":487,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":565,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":429,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":142,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4280:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:9"},"nodeType":"YulFunctionCall","src":"66:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:9"},"nodeType":"YulFunctionCall","src":"56:31:9"},"nodeType":"YulExpressionStatement","src":"56:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:9"},"nodeType":"YulFunctionCall","src":"96:15:9"},"nodeType":"YulExpressionStatement","src":"96:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:9"},"nodeType":"YulFunctionCall","src":"120:15:9"},"nodeType":"YulExpressionStatement","src":"120:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:9"},{"body":{"nodeType":"YulBlock","src":"243:893:9","statements":[{"body":{"nodeType":"YulBlock","src":"289:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"298:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"301:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"291:6:9"},"nodeType":"YulFunctionCall","src":"291:12:9"},"nodeType":"YulExpressionStatement","src":"291:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"264:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"273:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"260:3:9"},"nodeType":"YulFunctionCall","src":"260:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"285:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"256:3:9"},"nodeType":"YulFunctionCall","src":"256:32:9"},"nodeType":"YulIf","src":"253:52:9"},{"nodeType":"YulAssignment","src":"314:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"337:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"324:12:9"},"nodeType":"YulFunctionCall","src":"324:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"314:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"356:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"387:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"398:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"383:3:9"},"nodeType":"YulFunctionCall","src":"383:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"370:12:9"},"nodeType":"YulFunctionCall","src":"370:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"360:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"411:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"421:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"415:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"466:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"475:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"478:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"468:6:9"},"nodeType":"YulFunctionCall","src":"468:12:9"},"nodeType":"YulExpressionStatement","src":"468:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"454:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"462:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"451:2:9"},"nodeType":"YulFunctionCall","src":"451:14:9"},"nodeType":"YulIf","src":"448:34:9"},{"nodeType":"YulVariableDeclaration","src":"491:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"505:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"516:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"501:3:9"},"nodeType":"YulFunctionCall","src":"501:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"495:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"571:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"580:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"583:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"573:6:9"},"nodeType":"YulFunctionCall","src":"573:12:9"},"nodeType":"YulExpressionStatement","src":"573:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"550:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"554:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"546:3:9"},"nodeType":"YulFunctionCall","src":"546:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"561:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"542:3:9"},"nodeType":"YulFunctionCall","src":"542:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"535:6:9"},"nodeType":"YulFunctionCall","src":"535:35:9"},"nodeType":"YulIf","src":"532:55:9"},{"nodeType":"YulVariableDeclaration","src":"596:26:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"619:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"606:12:9"},"nodeType":"YulFunctionCall","src":"606:16:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"600:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"645:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"647:16:9"},"nodeType":"YulFunctionCall","src":"647:18:9"},"nodeType":"YulExpressionStatement","src":"647:18:9"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"637:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"641:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"634:2:9"},"nodeType":"YulFunctionCall","src":"634:10:9"},"nodeType":"YulIf","src":"631:36:9"},{"nodeType":"YulVariableDeclaration","src":"676:17:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"690:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"686:3:9"},"nodeType":"YulFunctionCall","src":"686:7:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"680:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"702:23:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"722:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"716:5:9"},"nodeType":"YulFunctionCall","src":"716:9:9"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"706:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"734:71:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"756:6:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"780:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"784:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"776:3:9"},"nodeType":"YulFunctionCall","src":"776:13:9"},{"name":"_4","nodeType":"YulIdentifier","src":"791:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"772:3:9"},"nodeType":"YulFunctionCall","src":"772:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"796:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"768:3:9"},"nodeType":"YulFunctionCall","src":"768:31:9"},{"name":"_4","nodeType":"YulIdentifier","src":"801:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"764:3:9"},"nodeType":"YulFunctionCall","src":"764:40:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"752:3:9"},"nodeType":"YulFunctionCall","src":"752:53:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"738:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"864:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"866:16:9"},"nodeType":"YulFunctionCall","src":"866:18:9"},"nodeType":"YulExpressionStatement","src":"866:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"823:10:9"},{"name":"_1","nodeType":"YulIdentifier","src":"835:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"820:2:9"},"nodeType":"YulFunctionCall","src":"820:18:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"843:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"855:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"840:2:9"},"nodeType":"YulFunctionCall","src":"840:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"817:2:9"},"nodeType":"YulFunctionCall","src":"817:46:9"},"nodeType":"YulIf","src":"814:72:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"906:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:9"},"nodeType":"YulFunctionCall","src":"895:22:9"},"nodeType":"YulExpressionStatement","src":"895:22:9"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"933:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"941:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"926:6:9"},"nodeType":"YulFunctionCall","src":"926:18:9"},"nodeType":"YulExpressionStatement","src":"926:18:9"},{"body":{"nodeType":"YulBlock","src":"990:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"999:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1002:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"992:6:9"},"nodeType":"YulFunctionCall","src":"992:12:9"},"nodeType":"YulExpressionStatement","src":"992:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"967:2:9"},{"name":"_3","nodeType":"YulIdentifier","src":"971:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:9"},"nodeType":"YulFunctionCall","src":"963:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"976:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"959:3:9"},"nodeType":"YulFunctionCall","src":"959:20:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"981:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"956:2:9"},"nodeType":"YulFunctionCall","src":"956:33:9"},"nodeType":"YulIf","src":"953:53:9"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1032:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1040:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1028:3:9"},"nodeType":"YulFunctionCall","src":"1028:15:9"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1049:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"1053:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1045:3:9"},"nodeType":"YulFunctionCall","src":"1045:11:9"},{"name":"_3","nodeType":"YulIdentifier","src":"1058:2:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1015:12:9"},"nodeType":"YulFunctionCall","src":"1015:46:9"},"nodeType":"YulExpressionStatement","src":"1015:46:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1085:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"1093:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1081:3:9"},"nodeType":"YulFunctionCall","src":"1081:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"1098:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1077:3:9"},"nodeType":"YulFunctionCall","src":"1077:24:9"},{"kind":"number","nodeType":"YulLiteral","src":"1103:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1070:6:9"},"nodeType":"YulFunctionCall","src":"1070:35:9"},"nodeType":"YulExpressionStatement","src":"1070:35:9"},{"nodeType":"YulAssignment","src":"1114:16:9","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1124:6:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1114:6:9"}]}]},"name":"abi_decode_tuple_t_bytes32t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"201:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"212:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"224:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"232:6:9","type":""}],"src":"146:990:9"},{"body":{"nodeType":"YulBlock","src":"1262:427:9","statements":[{"nodeType":"YulVariableDeclaration","src":"1272:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1282:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1276:2:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1300:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1311:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1293:6:9"},"nodeType":"YulFunctionCall","src":"1293:21:9"},"nodeType":"YulExpressionStatement","src":"1293:21:9"},{"nodeType":"YulVariableDeclaration","src":"1323:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1343:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1337:5:9"},"nodeType":"YulFunctionCall","src":"1337:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1327:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1370:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1381:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1366:3:9"},"nodeType":"YulFunctionCall","src":"1366:18:9"},{"name":"length","nodeType":"YulIdentifier","src":"1386:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1359:6:9"},"nodeType":"YulFunctionCall","src":"1359:34:9"},"nodeType":"YulExpressionStatement","src":"1359:34:9"},{"nodeType":"YulVariableDeclaration","src":"1402:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1411:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1406:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1471:90:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1500:9:9"},{"name":"i","nodeType":"YulIdentifier","src":"1511:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1496:3:9"},"nodeType":"YulFunctionCall","src":"1496:17:9"},{"kind":"number","nodeType":"YulLiteral","src":"1515:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1492:3:9"},"nodeType":"YulFunctionCall","src":"1492:26:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1534:6:9"},{"name":"i","nodeType":"YulIdentifier","src":"1542:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:9"},"nodeType":"YulFunctionCall","src":"1530:14:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1546:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1526:3:9"},"nodeType":"YulFunctionCall","src":"1526:23:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1520:5:9"},"nodeType":"YulFunctionCall","src":"1520:30:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1485:6:9"},"nodeType":"YulFunctionCall","src":"1485:66:9"},"nodeType":"YulExpressionStatement","src":"1485:66:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1432:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"1435:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1429:2:9"},"nodeType":"YulFunctionCall","src":"1429:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1443:19:9","statements":[{"nodeType":"YulAssignment","src":"1445:15:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1454:1:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1457:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1450:3:9"},"nodeType":"YulFunctionCall","src":"1450:10:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1445:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"1425:3:9","statements":[]},"src":"1421:140:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1585:9:9"},{"name":"length","nodeType":"YulIdentifier","src":"1596:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1581:3:9"},"nodeType":"YulFunctionCall","src":"1581:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"1605:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1577:3:9"},"nodeType":"YulFunctionCall","src":"1577:31:9"},{"kind":"number","nodeType":"YulLiteral","src":"1610:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1570:6:9"},"nodeType":"YulFunctionCall","src":"1570:42:9"},"nodeType":"YulExpressionStatement","src":"1570:42:9"},{"nodeType":"YulAssignment","src":"1621:62:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1637:9:9"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1656:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1664:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:9"},"nodeType":"YulFunctionCall","src":"1652:15:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1673:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1669:3:9"},"nodeType":"YulFunctionCall","src":"1669:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1648:3:9"},"nodeType":"YulFunctionCall","src":"1648:29:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1633:3:9"},"nodeType":"YulFunctionCall","src":"1633:45:9"},{"kind":"number","nodeType":"YulLiteral","src":"1680:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1629:3:9"},"nodeType":"YulFunctionCall","src":"1629:54:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1621:4:9"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1231:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1242:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1253:4:9","type":""}],"src":"1141:548:9"},{"body":{"nodeType":"YulBlock","src":"1749:325:9","statements":[{"nodeType":"YulAssignment","src":"1759:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1773:1:9","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1776:4:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1769:3:9"},"nodeType":"YulFunctionCall","src":"1769:12:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1759:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1790:38:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1820:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"1826:1:9","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1816:3:9"},"nodeType":"YulFunctionCall","src":"1816:12:9"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1794:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1867:31:9","statements":[{"nodeType":"YulAssignment","src":"1869:27:9","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1883:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1891:4:9","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1879:3:9"},"nodeType":"YulFunctionCall","src":"1879:17:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1869:6:9"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1847:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1840:6:9"},"nodeType":"YulFunctionCall","src":"1840:26:9"},"nodeType":"YulIf","src":"1837:61:9"},{"body":{"nodeType":"YulBlock","src":"1957:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1978:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1985:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1990:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1981:3:9"},"nodeType":"YulFunctionCall","src":"1981:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1971:6:9"},"nodeType":"YulFunctionCall","src":"1971:31:9"},"nodeType":"YulExpressionStatement","src":"1971:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2022:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2025:4:9","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2015:6:9"},"nodeType":"YulFunctionCall","src":"2015:15:9"},"nodeType":"YulExpressionStatement","src":"2015:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2043:6:9"},"nodeType":"YulFunctionCall","src":"2043:15:9"},"nodeType":"YulExpressionStatement","src":"2043:15:9"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1913:18:9"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1936:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1944:2:9","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1933:2:9"},"nodeType":"YulFunctionCall","src":"1933:14:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1910:2:9"},"nodeType":"YulFunctionCall","src":"1910:38:9"},"nodeType":"YulIf","src":"1907:161:9"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1729:4:9","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1738:6:9","type":""}],"src":"1694:380:9"},{"body":{"nodeType":"YulBlock","src":"2135:65:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2152:1:9","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2155:3:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2145:6:9"},"nodeType":"YulFunctionCall","src":"2145:14:9"},"nodeType":"YulExpressionStatement","src":"2145:14:9"},{"nodeType":"YulAssignment","src":"2168:26:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2186:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2189:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2176:9:9"},"nodeType":"YulFunctionCall","src":"2176:18:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2168:4:9"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2118:3:9","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2126:4:9","type":""}],"src":"2079:121:9"},{"body":{"nodeType":"YulBlock","src":"2286:464:9","statements":[{"body":{"nodeType":"YulBlock","src":"2319:425:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2333:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2343:1:9","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2337:2:9","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2364:2:9"},{"name":"array","nodeType":"YulIdentifier","src":"2368:5:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2357:6:9"},"nodeType":"YulFunctionCall","src":"2357:17:9"},"nodeType":"YulExpressionStatement","src":"2357:17:9"},{"nodeType":"YulVariableDeclaration","src":"2387:31:9","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2409:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2413:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2399:9:9"},"nodeType":"YulFunctionCall","src":"2399:19:9"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2391:4:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2431:57:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2454:4:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2464:1:9","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2471:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2483:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2467:3:9"},"nodeType":"YulFunctionCall","src":"2467:19:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2460:3:9"},"nodeType":"YulFunctionCall","src":"2460:27:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2450:3:9"},"nodeType":"YulFunctionCall","src":"2450:38:9"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2435:11:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2525:23:9","statements":[{"nodeType":"YulAssignment","src":"2527:19:9","value":{"name":"data","nodeType":"YulIdentifier","src":"2542:4:9"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2527:11:9"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2507:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2519:4:9","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2504:2:9"},"nodeType":"YulFunctionCall","src":"2504:20:9"},"nodeType":"YulIf","src":"2501:47:9"},{"nodeType":"YulVariableDeclaration","src":"2561:41:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2575:4:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2585:1:9","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2592:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"2597:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:9"},"nodeType":"YulFunctionCall","src":"2588:12:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2581:3:9"},"nodeType":"YulFunctionCall","src":"2581:20:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2571:3:9"},"nodeType":"YulFunctionCall","src":"2571:31:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2565:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2615:24:9","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2628:11:9"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2619:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2713:21:9","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2722:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2729:2:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2715:6:9"},"nodeType":"YulFunctionCall","src":"2715:17:9"},"nodeType":"YulExpressionStatement","src":"2715:17:9"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2663:5:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2670:2:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2660:2:9"},"nodeType":"YulFunctionCall","src":"2660:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2674:26:9","statements":[{"nodeType":"YulAssignment","src":"2676:22:9","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2689:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"2696:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2685:3:9"},"nodeType":"YulFunctionCall","src":"2685:13:9"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2676:5:9"}]}]},"pre":{"nodeType":"YulBlock","src":"2656:3:9","statements":[]},"src":"2652:82:9"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2302:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"2307:2:9","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2299:2:9"},"nodeType":"YulFunctionCall","src":"2299:11:9"},"nodeType":"YulIf","src":"2296:448:9"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2258:5:9","type":""},{"name":"len","nodeType":"YulTypedName","src":"2265:3:9","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2270:10:9","type":""}],"src":"2205:545:9"},{"body":{"nodeType":"YulBlock","src":"2840:81:9","statements":[{"nodeType":"YulAssignment","src":"2850:65:9","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2865:4:9"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2883:1:9","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2886:3:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2879:3:9"},"nodeType":"YulFunctionCall","src":"2879:11:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2896:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2892:3:9"},"nodeType":"YulFunctionCall","src":"2892:6:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2875:3:9"},"nodeType":"YulFunctionCall","src":"2875:24:9"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2871:3:9"},"nodeType":"YulFunctionCall","src":"2871:29:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2861:3:9"},"nodeType":"YulFunctionCall","src":"2861:40:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2907:1:9","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2910:3:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2903:3:9"},"nodeType":"YulFunctionCall","src":"2903:11:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2858:2:9"},"nodeType":"YulFunctionCall","src":"2858:57:9"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2850:4:9"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2817:4:9","type":""},{"name":"len","nodeType":"YulTypedName","src":"2823:3:9","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2831:4:9","type":""}],"src":"2755:166:9"},{"body":{"nodeType":"YulBlock","src":"3022:1256:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3032:24:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3052:3:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3046:5:9"},"nodeType":"YulFunctionCall","src":"3046:10:9"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3036:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3099:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3101:16:9"},"nodeType":"YulFunctionCall","src":"3101:18:9"},"nodeType":"YulExpressionStatement","src":"3101:18:9"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3071:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3079:18:9","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3068:2:9"},"nodeType":"YulFunctionCall","src":"3068:30:9"},"nodeType":"YulIf","src":"3065:56:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3174:4:9"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3212:4:9"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3206:5:9"},"nodeType":"YulFunctionCall","src":"3206:11:9"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3180:25:9"},"nodeType":"YulFunctionCall","src":"3180:38:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"3220:6:9"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3130:43:9"},"nodeType":"YulFunctionCall","src":"3130:97:9"},"nodeType":"YulExpressionStatement","src":"3130:97:9"},{"nodeType":"YulVariableDeclaration","src":"3236:18:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3253:1:9","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3240:9:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3263:23:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3282:4:9","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3267:11:9","type":""}]},{"nodeType":"YulAssignment","src":"3295:24:9","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3308:11:9"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3295:9:9"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3365:656:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3379:35:9","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3398:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3410:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3406:3:9"},"nodeType":"YulFunctionCall","src":"3406:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3394:3:9"},"nodeType":"YulFunctionCall","src":"3394:20:9"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3383:7:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3427:49:9","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3471:4:9"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3441:29:9"},"nodeType":"YulFunctionCall","src":"3441:35:9"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3431:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3489:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3493:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3576:172:9","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3601:6:9"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3619:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3624:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3615:3:9"},"nodeType":"YulFunctionCall","src":"3615:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3609:5:9"},"nodeType":"YulFunctionCall","src":"3609:26:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3594:6:9"},"nodeType":"YulFunctionCall","src":"3594:42:9"},"nodeType":"YulExpressionStatement","src":"3594:42:9"},{"nodeType":"YulAssignment","src":"3653:24:9","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3667:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3675:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3663:3:9"},"nodeType":"YulFunctionCall","src":"3663:14:9"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3653:6:9"}]},{"nodeType":"YulAssignment","src":"3694:40:9","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3711:9:9"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3722:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3707:3:9"},"nodeType":"YulFunctionCall","src":"3707:27:9"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3694:9:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3523:1:9"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3526:7:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3520:2:9"},"nodeType":"YulFunctionCall","src":"3520:14:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3535:28:9","statements":[{"nodeType":"YulAssignment","src":"3537:24:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3546:1:9"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3549:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3542:3:9"},"nodeType":"YulFunctionCall","src":"3542:19:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3537:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"3516:3:9","statements":[]},"src":"3512:236:9"},{"body":{"nodeType":"YulBlock","src":"3796:166:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3814:43:9","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3841:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3846:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3837:3:9"},"nodeType":"YulFunctionCall","src":"3837:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3831:5:9"},"nodeType":"YulFunctionCall","src":"3831:26:9"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3818:9:9","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3881:6:9"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3893:9:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3920:1:9","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3923:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3916:3:9"},"nodeType":"YulFunctionCall","src":"3916:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"3932:3:9","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3912:3:9"},"nodeType":"YulFunctionCall","src":"3912:24:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3942:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3938:3:9"},"nodeType":"YulFunctionCall","src":"3938:6:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3908:3:9"},"nodeType":"YulFunctionCall","src":"3908:37:9"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3904:3:9"},"nodeType":"YulFunctionCall","src":"3904:42:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3889:3:9"},"nodeType":"YulFunctionCall","src":"3889:58:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3874:6:9"},"nodeType":"YulFunctionCall","src":"3874:74:9"},"nodeType":"YulExpressionStatement","src":"3874:74:9"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3767:7:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"3776:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3764:2:9"},"nodeType":"YulFunctionCall","src":"3764:19:9"},"nodeType":"YulIf","src":"3761:201:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3982:4:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3996:1:9","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3999:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3992:3:9"},"nodeType":"YulFunctionCall","src":"3992:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"4008:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3988:3:9"},"nodeType":"YulFunctionCall","src":"3988:22:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3975:6:9"},"nodeType":"YulFunctionCall","src":"3975:36:9"},"nodeType":"YulExpressionStatement","src":"3975:36:9"}]},"nodeType":"YulCase","src":"3358:663:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3363:1:9","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4038:234:9","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"4065:1:9","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4056:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4101:67:9","statements":[{"nodeType":"YulAssignment","src":"4119:35:9","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4138:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4143:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4134:3:9"},"nodeType":"YulFunctionCall","src":"4134:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4128:5:9"},"nodeType":"YulFunctionCall","src":"4128:26:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4119:5:9"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4082:6:9"},"nodeType":"YulIf","src":"4079:89:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4188:4:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4247:5:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"4254:6:9"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4194:52:9"},"nodeType":"YulFunctionCall","src":"4194:67:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4181:6:9"},"nodeType":"YulFunctionCall","src":"4181:81:9"},"nodeType":"YulExpressionStatement","src":"4181:81:9"}]},"nodeType":"YulCase","src":"4030:242:9","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3338:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3346:2:9","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3335:2:9"},"nodeType":"YulFunctionCall","src":"3335:14:9"},"nodeType":"YulSwitch","src":"3328:944:9"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3007:4:9","type":""},{"name":"src","nodeType":"YulTypedName","src":"3013:3:9","type":""}],"src":"2926:1352:9"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes32t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80634cd581ed14610030575b600080fd5b61004361003e3660046100a4565b610045565b005b817ff29235782b6dafca64e492ae4ebc3534f115394e4e462365c8ff66ec198b414482604051610075919061015f565b60405180910390a260016100898282610235565b505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156100b757600080fd5b82359150602083013567ffffffffffffffff808211156100d657600080fd5b818501915085601f8301126100ea57600080fd5b8135818111156100fc576100fc61008e565b604051601f8201601f19908116603f011681019083821181831017156101245761012461008e565b8160405282815288602084870101111561013d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208083528351808285015260005b8181101561018c57858101830151858201604001528201610170565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c908216806101c157607f821691505b6020821081036101e157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561008957600081815260208120601f850160051c8101602086101561020e5750805b601f850160051c820191505b8181101561022d5782815560010161021a565b505050505050565b815167ffffffffffffffff81111561024f5761024f61008e565b6102638161025d84546101ad565b846101e7565b602080601f83116001811461029857600084156102805750858301515b600019600386901b1c1916600185901b17855561022d565b600085815260208120601f198616915b828110156102c7578886015182559484019460019091019084016102a8565b50858210156102e55787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122090556279bdaf6e294b50a2acb91abd20b0c8605a3f9d456972e6944e5621974a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4CD581ED EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0xA4 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST DUP2 PUSH32 0xF29235782B6DAFCA64E492AE4EBC3534F115394E4E462365C8FF66EC198B4144 DUP3 PUSH1 0x40 MLOAD PUSH2 0x75 SWAP2 SWAP1 PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 PUSH2 0x89 DUP3 DUP3 PUSH2 0x235 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFC JUMPI PUSH2 0xFC PUSH2 0x8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x124 JUMPI PUSH2 0x124 PUSH2 0x8E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x18C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x170 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x20E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x22D JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x21A JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24F JUMPI PUSH2 0x24F PUSH2 0x8E JUMP JUMPDEST PUSH2 0x263 DUP2 PUSH2 0x25D DUP5 SLOAD PUSH2 0x1AD JUMP JUMPDEST DUP5 PUSH2 0x1E7 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x298 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x280 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x22D JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2C7 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2A8 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2E5 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 SSTORE PUSH3 0x79BDAF PUSH15 0x294B50A2ACB91ABD20B0C8605A3F9D GASLIMIT PUSH10 0x72E6944E5621974A6473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"137:1719:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1645:208;;;;;;:::i;:::-;;:::i;:::-;;;1771:10;1751:51;1783:18;1751:51;;;;;;:::i;:::-;;;;;;;;1809:17;:38;1829:18;1809:17;:38;:::i;:::-;;1645:208;;:::o;14:127:9:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:990;224:6;232;285:2;273:9;264:7;260:23;256:32;253:52;;;301:1;298;291:12;253:52;337:9;324:23;314:33;;398:2;387:9;383:18;370:32;421:18;462:2;454:6;451:14;448:34;;;478:1;475;468:12;448:34;516:6;505:9;501:22;491:32;;561:7;554:4;550:2;546:13;542:27;532:55;;583:1;580;573:12;532:55;619:2;606:16;641:2;637;634:10;631:36;;;647:18;;:::i;:::-;722:2;716:9;690:2;776:13;;-1:-1:-1;;772:22:9;;;796:2;768:31;764:40;752:53;;;820:18;;;840:22;;;817:46;814:72;;;866:18;;:::i;:::-;906:10;902:2;895:22;941:2;933:6;926:18;981:7;976:2;971;967;963:11;959:20;956:33;953:53;;;1002:1;999;992:12;953:53;1058:2;1053;1049;1045:11;1040:2;1032:6;1028:15;1015:46;1103:1;1098:2;1093;1085:6;1081:15;1077:24;1070:35;1124:6;1114:16;;;;;;;146:990;;;;;:::o;1141:548::-;1253:4;1282:2;1311;1300:9;1293:21;1343:6;1337:13;1386:6;1381:2;1370:9;1366:18;1359:34;1411:1;1421:140;1435:6;1432:1;1429:13;1421:140;;;1530:14;;;1526:23;;1520:30;1496:17;;;1515:2;1492:26;1485:66;1450:10;;1421:140;;;1425:3;1610:1;1605:2;1596:6;1585:9;1581:22;1577:31;1570:42;1680:2;1673;1669:7;1664:2;1656:6;1652:15;1648:29;1637:9;1633:45;1629:54;1621:62;;;;1141:548;;;;:::o;1694:380::-;1773:1;1769:12;;;;1816;;;1837:61;;1891:4;1883:6;1879:17;1869:27;;1837:61;1944:2;1936:6;1933:14;1913:18;1910:38;1907:161;;1990:10;1985:3;1981:20;1978:1;1971:31;2025:4;2022:1;2015:15;2053:4;2050:1;2043:15;1907:161;;1694:380;;;:::o;2205:545::-;2307:2;2302:3;2299:11;2296:448;;;2343:1;2368:5;2364:2;2357:17;2413:4;2409:2;2399:19;2483:2;2471:10;2467:19;2464:1;2460:27;2454:4;2450:38;2519:4;2507:10;2504:20;2501:47;;;-1:-1:-1;2542:4:9;2501:47;2597:2;2592:3;2588:12;2585:1;2581:20;2575:4;2571:31;2561:41;;2652:82;2670:2;2663:5;2660:13;2652:82;;;2715:17;;;2696:1;2685:13;2652:82;;;2656:3;;;2205:545;;;:::o;2926:1352::-;3052:3;3046:10;3079:18;3071:6;3068:30;3065:56;;;3101:18;;:::i;:::-;3130:97;3220:6;3180:38;3212:4;3206:11;3180:38;:::i;:::-;3174:4;3130:97;:::i;:::-;3282:4;;3346:2;3335:14;;3363:1;3358:663;;;;4065:1;4082:6;4079:89;;;-1:-1:-1;4134:19:9;;;4128:26;4079:89;-1:-1:-1;;2883:1:9;2879:11;;;2875:24;2871:29;2861:40;2907:1;2903:11;;;2858:57;4181:81;;3328:944;;3358:663;2152:1;2145:14;;;2189:4;2176:18;;-1:-1:-1;;3394:20:9;;;3512:236;3526:7;3523:1;3520:14;3512:236;;;3615:19;;;3609:26;3594:42;;3707:27;;;;3675:1;3663:14;;;;3542:19;;3512:236;;;3516:3;3776:6;3767:7;3764:19;3761:201;;;3837:19;;;3831:26;-1:-1:-1;;3920:1:9;3916:14;;;3932:3;3912:24;3908:37;3904:42;3889:58;3874:74;;3761:201;-1:-1:-1;;;;;4008:1:9;3992:14;;;3988:22;3975:36;;-1:-1:-1;2926:1352:9:o"},"gasEstimates":{"creation":{"codeDepositCost":"162200","executionCost":"infinite","totalCost":"infinite"},"external":{"_requestedDataCompleted(bytes32,string)":"infinite"},"internal":{"requestPredictionSignal()":"infinite"}},"methodIdentifiers":{"_requestedDataCompleted(bytes32,string)":"4cd581ed"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prediction_signal\",\"type\":\"string\"}],\"name\":\"RequestExchangeRate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_prediction_signal\",\"type\":\"string\"}],\"name\":\"_requestedDataCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pull/HttpRequestWithHeader.sol\":\"HttpRequestConsumerWithHeader\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.19;\\r\\n\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary Buffer {\\r\\n  using BufferBase for BufferBase.buffer;\\r\\n\\r\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\r\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\r\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\r\\n\\r\\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\\r\\n    if (value <= 23) {\\r\\n      buf.appendUint8(uint8((major << 5) | value));\\r\\n    } else if (value <= 0xFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 24));\\r\\n      buf.appendInt(value, 1);\\r\\n    } else if (value <= 0xFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 25));\\r\\n      buf.appendInt(value, 2);\\r\\n    } else if (value <= 0xFFFFFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 26));\\r\\n      buf.appendInt(value, 4);\\r\\n    } else {\\r\\n      buf.appendUint8(uint8((major << 5) | 27));\\r\\n      buf.appendInt(value, 8);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\\r\\n    buf.appendUint8(uint8((major << 5) | 31));\\r\\n  }\\r\\n\\r\\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, value);\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\\r\\n    if (value < -0x10000000000000000) {\\r\\n      encodeSignedBigNum(buf, value);\\r\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, uint(value));\\r\\n    } else if (value >= 0) {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\r\\n    buf.append(value);\\r\\n  }\\r\\n\\r\\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(value));\\r\\n  }\\r\\n\\r\\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\r\\n  }\\r\\n\\r\\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\r\\n    buf.append(bytes(value));\\r\\n  }\\r\\n\\r\\n  function startArray(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\r\\n  }\\r\\n\\r\\n  function startMap(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\r\\n  }\\r\\n\\r\\n  function endSequence(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2aa6ac6639551697f8b11dc7daed84b0d51d9b51405c25b373b024f0e1c4f712\",\"license\":\"MIT\"},\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"},\"contracts/lib/RequestLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary RequestLib {\\r\\n  using Buffer for BufferBase.buffer;\\r\\n\\r\\n  struct Request {\\r\\n    bytes32 id;\\r\\n    address callbackAddress;\\r\\n    bytes4 callbackFunctionId;\\r\\n    BufferBase.buffer requestData;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    Request memory self,\\r\\n    address callbackAddr,\\r\\n    bytes4 callbackFunc\\r\\n  ) internal pure returns (Request memory) {\\r\\n    self.callbackAddress = callbackAddr;\\r\\n    self.callbackFunctionId = callbackFunc;\\r\\n    return self;\\r\\n  }\\r\\n\\r\\n  function setId(Request memory self, bytes32 id) internal pure {\\r\\n    self.id = id;\\r\\n  }\\r\\n\\r\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\r\\n    self.requestData.encodeString(key);\\r\\n    self.requestData.encodeString(value);\\r\\n  }\\r\\n\\r\\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\\r\\n    self.requestData.encodeString(\\\" header(\\\");\\r\\n    self.requestData.encodeString(headerKey);\\r\\n    self.requestData.encodeString(value);\\r\\n    self.requestData.encodeString(\\\") \\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf8f70cb860bdc2202257a50ef25d755d31ccebcf9ffb900f8df3e9045831fd53\",\"license\":\"UNLICENSED\"},\"contracts/pull/HttpRequestOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../lib/RequestLib.sol\\\";\\r\\n\\r\\nerror OnlyReporter();\\r\\n\\r\\ncontract HttpRequestOracle is Ownable {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  mapping(address => bool) reporters;\\r\\n\\r\\n  event RequestSent(bytes32 indexed id, bytes data);\\r\\n  event RequestFulfilled(bytes32 indexed id);\\r\\n  event RequestCancelled(bytes32 indexed id);\\r\\n\\r\\n  function updateReporter(address reporterAddress, bool isReporter) external onlyOwner {\\r\\n    reporters[reporterAddress] = isReporter;\\r\\n  }\\r\\n\\r\\n  function getReporter(address reporterAddress) external view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function _hasReporter(address reporterAddress) private view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function sendRequest(RequestLib.Request memory req) external returns (bytes32) {\\r\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\r\\n      this.updateReporter.selector,\\r\\n      req.id,\\r\\n      req.callbackFunctionId,\\r\\n      req.requestData.buf\\r\\n    );\\r\\n    emit RequestSent(req.id, encodedRequest);\\r\\n    return req.id;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc69e4f20d24c112f1a3effb2b7c0b0af033f172d94ced2149c73195e9e2f7d04\",\"license\":\"UNLICENSED\"},\"contracts/pull/HttpRequestWithHeader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./HttpRequestOracle.sol\\\";\\r\\nimport \\\"./RequestConsumer.sol\\\";\\r\\n\\r\\ncontract HttpRequestConsumerWithHeader is RequestConsumer {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  HttpRequestOracle httpOracle;\\r\\n  string prediction_signal;\\r\\n\\r\\n  event RequestExchangeRate(bytes32 indexed requestId, string prediction_signal);\\r\\n\\r\\n  constructor(address _oracle) {\\r\\n    httpOracle = HttpRequestOracle(_oracle);\\r\\n  }\\r\\n\\r\\n  function requestPredictionSignal() private returns (bytes32) {\\r\\n    RequestLib.Request memory req = buildRequest(this._requestedDataCompleted.selector);\\r\\n    req.setId(keccak256(abi.encodePacked(block.timestamp, msg.sender)));\\r\\n\\r\\n    // The code above is the same as\\r\\n    // const request = require('request');\\r\\n\\r\\n    // request.get({\\r\\n    //   url: 'https://api.api-ninjas.com/v1/exchangerate?pair=USD_EUR',\\r\\n    //   headers: {\\r\\n    //     'X-Api-Key': 'YOUR_API_KEY'\\r\\n    //   },\\r\\n    // }, function(error, response, body) {\\r\\n    //   if(error) return console.error('Request failed:', error);\\r\\n    //   else if(response.statusCode != 200) return console.error('Error:', response.statusCode, body.toString('utf8'));\\r\\n    //   else console.log(body)\\r\\n    // });\\r\\n\\r\\n    req.add(\\\"get\\\", \\\"https://api.scobrudot.dev/data/\\\");\\r\\n    req.addHeader(\\\"Authorization\\\", \\\"\\\");\\r\\n\\r\\n    // Set the path to find the desired data in the API response, where the response format is:\\r\\n    //  {\\r\\n    //   \\\"currency_pair\\\": \\\"USD_EUR\\\",\\r\\n    //   \\\"exchange_rate\\\": 0.826641\\r\\n    // }\\r\\n    req.add(\\\"path\\\", \\\"prediction_signal\\\");\\r\\n    httpOracle.sendRequest(req);\\r\\n    return req.id;\\r\\n  }\\r\\n\\r\\n  function _requestedDataCompleted(bytes32 _requestId, string memory _prediction_signal) public {\\r\\n    emit RequestExchangeRate(_requestId, _prediction_signal);\\r\\n    prediction_signal = _prediction_signal;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x90c34df9d5f0d0fd642cb997148d12c60f15717336e63aeec63127fba1ff78f4\",\"license\":\"UNLICENSED\"},\"contracts/pull/RequestConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./HttpRequestOracle.sol\\\";\\r\\nimport \\\"../lib/RequestLib.sol\\\";\\r\\n\\r\\nabstract contract RequestConsumer {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  function buildRequest(bytes4 callbackFunctionSignature) internal view returns (RequestLib.Request memory) {\\r\\n    RequestLib.Request memory req;\\r\\n    return req.initialize(address(this), callbackFunctionSignature);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xe2eb7d0dd11d2b359c4b52b8dca47db8adbf0c0f0f0eab5bdb4754952c1a3811\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1409,"contract":"contracts/pull/HttpRequestWithHeader.sol:HttpRequestConsumerWithHeader","label":"httpOracle","offset":0,"slot":"0","type":"t_contract(HttpRequestOracle)1396"},{"astId":1411,"contract":"contracts/pull/HttpRequestWithHeader.sol:HttpRequestConsumerWithHeader","label":"prediction_signal","offset":0,"slot":"1","type":"t_string_storage"}],"types":{"t_contract(HttpRequestOracle)1396":{"encoding":"inplace","label":"contract HttpRequestOracle","numberOfBytes":"20"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/pull/RequestConsumer.sol":{"RequestConsumer":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pull/RequestConsumer.sol\":\"RequestConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/lib/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.19;\\r\\n\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary Buffer {\\r\\n  using BufferBase for BufferBase.buffer;\\r\\n\\r\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\r\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\r\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\r\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\r\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\r\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\r\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\r\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\r\\n\\r\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\r\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\r\\n\\r\\n  function encodeFixedNumeric(BufferBase.buffer memory buf, uint8 major, uint64 value) private pure {\\r\\n    if (value <= 23) {\\r\\n      buf.appendUint8(uint8((major << 5) | value));\\r\\n    } else if (value <= 0xFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 24));\\r\\n      buf.appendInt(value, 1);\\r\\n    } else if (value <= 0xFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 25));\\r\\n      buf.appendInt(value, 2);\\r\\n    } else if (value <= 0xFFFFFFFF) {\\r\\n      buf.appendUint8(uint8((major << 5) | 26));\\r\\n      buf.appendInt(value, 4);\\r\\n    } else {\\r\\n      buf.appendUint8(uint8((major << 5) | 27));\\r\\n      buf.appendInt(value, 8);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeIndefiniteLengthType(BufferBase.buffer memory buf, uint8 major) private pure {\\r\\n    buf.appendUint8(uint8((major << 5) | 31));\\r\\n  }\\r\\n\\r\\n  function encodeUInt(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, value);\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeInt(BufferBase.buffer memory buf, int value) internal pure {\\r\\n    if (value < -0x10000000000000000) {\\r\\n      encodeSignedBigNum(buf, value);\\r\\n    } else if (value > 0xFFFFFFFFFFFFFFFF) {\\r\\n      encodeBigNum(buf, uint(value));\\r\\n    } else if (value >= 0) {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\r\\n    } else {\\r\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function encodeBytes(BufferBase.buffer memory buf, bytes memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\r\\n    buf.append(value);\\r\\n  }\\r\\n\\r\\n  function encodeBigNum(BufferBase.buffer memory buf, uint value) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(value));\\r\\n  }\\r\\n\\r\\n  function encodeSignedBigNum(BufferBase.buffer memory buf, int input) internal pure {\\r\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\r\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\r\\n  }\\r\\n\\r\\n  function encodeString(BufferBase.buffer memory buf, string memory value) internal pure {\\r\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\r\\n    buf.append(bytes(value));\\r\\n  }\\r\\n\\r\\n  function startArray(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\r\\n  }\\r\\n\\r\\n  function startMap(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\r\\n  }\\r\\n\\r\\n  function endSequence(BufferBase.buffer memory buf) internal pure {\\r\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2aa6ac6639551697f8b11dc7daed84b0d51d9b51405c25b373b024f0e1c4f712\",\"license\":\"MIT\"},\"contracts/lib/BufferBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev A library for working with mutable byte buffers in Solidity.\\r\\n *\\r\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\r\\n * for writing to them. At any time you can fetch a bytes object containing the\\r\\n * current contents of the buffer. The bytes object should not be stored between\\r\\n * operations, as it may change due to resizing of the buffer.\\r\\n */\\r\\nlibrary BufferBase {\\r\\n    /**\\r\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\r\\n     *      a capacity. The capacity may be longer than the current value, in\\r\\n     *      which case it can be extended without the need to allocate more memory.\\r\\n     */\\r\\n    struct buffer {\\r\\n        bytes buf;\\r\\n        uint256 capacity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a buffer with an initial capacity.\\r\\n     * @param buf The buffer to initialize.\\r\\n     * @param capacity The number of bytes of space to allocate the buffer.\\r\\n     * @return The buffer, for chaining.\\r\\n     */\\r\\n    function init(\\r\\n        buffer memory buf,\\r\\n        uint256 capacity\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (capacity % 32 != 0) {\\r\\n            capacity += 32 - (capacity % 32);\\r\\n        }\\r\\n        // Allocate space for the buffer data\\r\\n        buf.capacity = capacity;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(buf, ptr)\\r\\n            mstore(ptr, 0)\\r\\n            mstore(0x40, add(32, add(ptr, capacity)))\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes a new buffer from an existing bytes object.\\r\\n     *      Changes to the buffer may mutate the original value.\\r\\n     * @param b The bytes object to initialize the buffer with.\\r\\n     * @return A new buffer.\\r\\n     */\\r\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\r\\n        buffer memory buf;\\r\\n        buf.buf = b;\\r\\n        buf.capacity = b.length;\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\r\\n        bytes memory oldbuf = buf.buf;\\r\\n        init(buf, capacity);\\r\\n        append(buf, oldbuf);\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        if (a > b) {\\r\\n            return a;\\r\\n        }\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets buffer length to 0.\\r\\n     * @param buf The buffer to truncate.\\r\\n     * @return The original buffer, for chaining..\\r\\n     */\\r\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\r\\n        assembly {\\r\\n            let bufptr := mload(buf)\\r\\n            mstore(bufptr, 0)\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The start offset to write to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        require(len <= data.length);\\r\\n\\r\\n        if (off + len > buf.capacity) {\\r\\n            resize(buf, max(buf.capacity, len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 dest;\\r\\n        uint256 src;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Start address = buffer address + offset + sizeof(buffer length)\\r\\n            dest := add(add(bufptr, 32), off)\\r\\n            // Update buffer length if we're extending it\\r\\n            if gt(add(len, off), buflen) {\\r\\n                mstore(bufptr, add(len, off))\\r\\n            }\\r\\n            src := add(data, 32)\\r\\n        }\\r\\n\\r\\n        // Copy word-length chunks while possible\\r\\n        for (; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** (32 - len)) - 1;\\r\\n            assembly {\\r\\n                let srcpart := and(mload(src), not(mask))\\r\\n                let destpart := and(mload(dest), mask)\\r\\n                mstore(dest, or(destpart, srcpart))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to copy.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function append(\\r\\n        buffer memory buf,\\r\\n        bytes memory data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, data.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write the byte at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeUint8(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        if (off >= buf.capacity) {\\r\\n            resize(buf, buf.capacity * 2);\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Length of existing buffer data\\r\\n            let buflen := mload(bufptr)\\r\\n            // Address = buffer address + sizeof(buffer length) + off\\r\\n            let dest := add(add(bufptr, off), 32)\\r\\n            mstore8(dest, data)\\r\\n            // Update buffer length if we extended it\\r\\n            if eq(off, buflen) {\\r\\n                mstore(bufptr, add(buflen, 1))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendUint8(\\r\\n        buffer memory buf,\\r\\n        uint8 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeUint8(buf, buf.buf.length, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\r\\n     *      exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (left-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function write(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes32 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            uint256 mask = (256 ** len) - 1;\\r\\n            // Right-align data\\r\\n            data = data >> (8 * (32 - len));\\r\\n            assembly {\\r\\n                // Memory address of the buffer data\\r\\n                let bufptr := mload(buf)\\r\\n                // Address = buffer address + sizeof(buffer length) + off + len\\r\\n                let dest := add(add(bufptr, off), len)\\r\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n                // Update buffer length if we extended it\\r\\n                if gt(add(off, len), mload(bufptr)) {\\r\\n                    mstore(bufptr, add(off, len))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\r\\n     *      capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeBytes20(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, off, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chhaining.\\r\\n     */\\r\\n    function appendBytes20(\\r\\n        buffer memory buf,\\r\\n        bytes20 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function appendBytes32(\\r\\n        buffer memory buf,\\r\\n        bytes32 data\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return write(buf, buf.buf.length, data, 32);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\r\\n     *      the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param off The offset to write at.\\r\\n     * @param data The data to append.\\r\\n     * @param len The number of bytes to write (right-aligned).\\r\\n     * @return The original buffer, for chaining.\\r\\n     */\\r\\n    function writeInt(\\r\\n        buffer memory buf,\\r\\n        uint256 off,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) private pure returns (buffer memory) {\\r\\n        if (len + off > buf.capacity) {\\r\\n            resize(buf, (len + off) * 2);\\r\\n        }\\r\\n\\r\\n        uint256 mask = (256 ** len) - 1;\\r\\n        assembly {\\r\\n            // Memory address of the buffer data\\r\\n            let bufptr := mload(buf)\\r\\n            // Address = buffer address + off + sizeof(buffer length) + len\\r\\n            let dest := add(add(bufptr, off), len)\\r\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\r\\n            // Update buffer length if we extended it\\r\\n            if gt(add(off, len), mload(bufptr)) {\\r\\n                mstore(bufptr, add(off, len))\\r\\n            }\\r\\n        }\\r\\n        return buf;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\r\\n     * exceed the capacity of the buffer.\\r\\n     * @param buf The buffer to append to.\\r\\n     * @param data The data to append.\\r\\n     * @return The original buffer.\\r\\n     */\\r\\n    function appendInt(\\r\\n        buffer memory buf,\\r\\n        uint256 data,\\r\\n        uint256 len\\r\\n    ) internal pure returns (buffer memory) {\\r\\n        return writeInt(buf, buf.buf.length, data, len);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114f9ab3c40e59d64a0ea3e0dddef49b7155348341c9934baca0a7d27549209d\",\"license\":\"MIT\"},\"contracts/lib/RequestLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\r\\nimport {BufferBase} from \\\"./BufferBase.sol\\\";\\r\\n\\r\\nlibrary RequestLib {\\r\\n  using Buffer for BufferBase.buffer;\\r\\n\\r\\n  struct Request {\\r\\n    bytes32 id;\\r\\n    address callbackAddress;\\r\\n    bytes4 callbackFunctionId;\\r\\n    BufferBase.buffer requestData;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    Request memory self,\\r\\n    address callbackAddr,\\r\\n    bytes4 callbackFunc\\r\\n  ) internal pure returns (Request memory) {\\r\\n    self.callbackAddress = callbackAddr;\\r\\n    self.callbackFunctionId = callbackFunc;\\r\\n    return self;\\r\\n  }\\r\\n\\r\\n  function setId(Request memory self, bytes32 id) internal pure {\\r\\n    self.id = id;\\r\\n  }\\r\\n\\r\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\r\\n    self.requestData.encodeString(key);\\r\\n    self.requestData.encodeString(value);\\r\\n  }\\r\\n\\r\\n  function addHeader(Request memory self, string memory headerKey, string memory value) internal pure {\\r\\n    self.requestData.encodeString(\\\" header(\\\");\\r\\n    self.requestData.encodeString(headerKey);\\r\\n    self.requestData.encodeString(value);\\r\\n    self.requestData.encodeString(\\\") \\\");\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf8f70cb860bdc2202257a50ef25d755d31ccebcf9ffb900f8df3e9045831fd53\",\"license\":\"UNLICENSED\"},\"contracts/pull/HttpRequestOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../lib/RequestLib.sol\\\";\\r\\n\\r\\nerror OnlyReporter();\\r\\n\\r\\ncontract HttpRequestOracle is Ownable {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  mapping(address => bool) reporters;\\r\\n\\r\\n  event RequestSent(bytes32 indexed id, bytes data);\\r\\n  event RequestFulfilled(bytes32 indexed id);\\r\\n  event RequestCancelled(bytes32 indexed id);\\r\\n\\r\\n  function updateReporter(address reporterAddress, bool isReporter) external onlyOwner {\\r\\n    reporters[reporterAddress] = isReporter;\\r\\n  }\\r\\n\\r\\n  function getReporter(address reporterAddress) external view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function _hasReporter(address reporterAddress) private view returns (bool) {\\r\\n    return reporters[reporterAddress];\\r\\n  }\\r\\n\\r\\n  function sendRequest(RequestLib.Request memory req) external returns (bytes32) {\\r\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\r\\n      this.updateReporter.selector,\\r\\n      req.id,\\r\\n      req.callbackFunctionId,\\r\\n      req.requestData.buf\\r\\n    );\\r\\n    emit RequestSent(req.id, encodedRequest);\\r\\n    return req.id;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xc69e4f20d24c112f1a3effb2b7c0b0af033f172d94ced2149c73195e9e2f7d04\",\"license\":\"UNLICENSED\"},\"contracts/pull/RequestConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./HttpRequestOracle.sol\\\";\\r\\nimport \\\"../lib/RequestLib.sol\\\";\\r\\n\\r\\nabstract contract RequestConsumer {\\r\\n  using RequestLib for RequestLib.Request;\\r\\n\\r\\n  function buildRequest(bytes4 callbackFunctionSignature) internal view returns (RequestLib.Request memory) {\\r\\n    RequestLib.Request memory req;\\r\\n    return req.initialize(address(this), callbackFunctionSignature);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xe2eb7d0dd11d2b359c4b52b8dca47db8adbf0c0f0f0eab5bdb4754952c1a3811\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}